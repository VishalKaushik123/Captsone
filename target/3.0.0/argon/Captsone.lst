
c:/Users/Vishal/Documents/CTDProjects/Captsone/target/3.0.0/argon/Captsone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000059a0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000d99c0  000d99c0  000099c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000d99c8  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000068  2003e4ac  000d99cc  0001e4ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000002dc  2003e518  2003e518  0002e518  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000d9a34  000d9a34  00029a34  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000d9a5c  000d9a5c  00029a5c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001e7611  00000000  00000000  00029a60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0001c2d3  00000000  00000000  00211071  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0003cdb6  00000000  00000000  0022d344  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000034f8  00000000  00000000  0026a0fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 0000a470  00000000  00000000  0026d5f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000400a5  00000000  00000000  00277a62  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00049799  00000000  00000000  002b7b07  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0012ec3c  00000000  00000000  003012a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  000096e4  00000000  00000000  0042fedc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f004 fe63 	bl	d8cfc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f004 fe85 	bl	d8d4c <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e4ac 	.word	0x2003e4ac
   d404c:	000d99cc 	.word	0x000d99cc
   d4050:	2003e514 	.word	0x2003e514
   d4054:	2003e518 	.word	0x2003e518
   d4058:	2003e7f4 	.word	0x2003e7f4

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f002 ffe7 	bl	d7034 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000d999c 	.word	0x000d999c
   d4080:	000d99c0 	.word	0x000d99c0

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 bc7c 	b.w	d4980 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fe45 	bl	d4d18 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f002 bf91 	b.w	d6fb8 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f001 bffd 	b.w	d6094 <malloc>

000d409a <_Znaj>:
   d409a:	f001 bffb 	b.w	d6094 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f002 b801 	b.w	d60a4 <free>

000d40a2 <_ZdaPv>:
   d40a2:	f001 bfff 	b.w	d60a4 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr

000d40b6 <_Z8callbackPcPhj>:
  //   {
  //     // interruptOccured = true;
  //     digitalWrite(D7, HIGH);
  //   }
  // }
}
   d40b6:	4770      	bx	lr

000d40b8 <_Z9myThread1Pv>:

// THREADS

// TEMP
void myThread1(void *args)
{
   d40b8:	b580      	push	{r7, lr}
  {
    // if (interruptOccured == false)
    // {
      // temp in farenheit
      reading = analogRead(A5);
      voltage = (reading * 3.3) / 4095.0;   //converts the reading to a voltage value
   d40ba:	f20f 0990 	addw	r9, pc, #144	; 0x90
   d40be:	e9d9 8900 	ldrd	r8, r9, [r9]
   d40c2:	a724      	add	r7, pc, #144	; (adr r7, d4154 <_Z9myThread1Pv+0x9c>)
   d40c4:	e9d7 6700 	ldrd	r6, r7, [r7]
      temperature = (voltage - 0.5) * 100;  //converts the voltage value to temperature in celsius
   d40c8:	4d1b      	ldr	r5, [pc, #108]	; (d4138 <_Z9myThread1Pv+0x80>)
   d40ca:	2400      	movs	r4, #0
      reading = analogRead(A5);
   d40cc:	200e      	movs	r0, #14
   d40ce:	f003 fe46 	bl	d7d5e <analogRead>
   d40d2:	4b1a      	ldr	r3, [pc, #104]	; (d413c <_Z9myThread1Pv+0x84>)
   d40d4:	17c1      	asrs	r1, r0, #31
   d40d6:	e9c3 0100 	strd	r0, r1, [r3]
      voltage = (reading * 3.3) / 4095.0;   //converts the reading to a voltage value
   d40da:	f004 f961 	bl	d83a0 <__aeabi_ul2d>
   d40de:	4642      	mov	r2, r8
   d40e0:	464b      	mov	r3, r9
   d40e2:	f004 f993 	bl	d840c <__aeabi_dmul>
   d40e6:	4632      	mov	r2, r6
   d40e8:	463b      	mov	r3, r7
   d40ea:	f004 fab9 	bl	d8660 <__aeabi_ddiv>
   d40ee:	f8df c06c 	ldr.w	ip, [pc, #108]	; d415c <_Z9myThread1Pv+0xa4>
   d40f2:	4602      	mov	r2, r0
   d40f4:	460b      	mov	r3, r1
   d40f6:	e9cc 2300 	strd	r2, r3, [ip]
      temperature = (voltage - 0.5) * 100;  //converts the voltage value to temperature in celsius
   d40fa:	4622      	mov	r2, r4
   d40fc:	462b      	mov	r3, r5
   d40fe:	f003 ffcd 	bl	d809c <__aeabi_dsub>
   d4102:	4b0f      	ldr	r3, [pc, #60]	; (d4140 <_Z9myThread1Pv+0x88>)
   d4104:	2200      	movs	r2, #0
   d4106:	f004 f981 	bl	d840c <__aeabi_dmul>
      temperature = temperature * 1.8 + 32; //converts to farenheit
   d410a:	a309      	add	r3, pc, #36	; (adr r3, d4130 <_Z9myThread1Pv+0x78>)
   d410c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4110:	f004 f97c 	bl	d840c <__aeabi_dmul>
   d4114:	4b0b      	ldr	r3, [pc, #44]	; (d4144 <_Z9myThread1Pv+0x8c>)
   d4116:	2200      	movs	r2, #0
   d4118:	f003 ffc2 	bl	d80a0 <__adddf3>
   d411c:	4b0a      	ldr	r3, [pc, #40]	; (d4148 <_Z9myThread1Pv+0x90>)
   d411e:	e9c3 0100 	strd	r0, r1, [r3]
      delay(1000);
   d4122:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4126:	f002 ff0d 	bl	d6f44 <delay>
  while (1)
   d412a:	e7cf      	b.n	d40cc <_Z9myThread1Pv+0x14>
   d412c:	f3af 8000 	nop.w
   d4130:	cccccccd 	.word	0xcccccccd
   d4134:	3ffccccc 	.word	0x3ffccccc
   d4138:	3fe00000 	.word	0x3fe00000
   d413c:	2003e620 	.word	0x2003e620
   d4140:	40590000 	.word	0x40590000
   d4144:	40400000 	.word	0x40400000
   d4148:	2003e628 	.word	0x2003e628
   d414c:	66666666 	.word	0x66666666
   d4150:	400a6666 	.word	0x400a6666
   d4154:	00000000 	.word	0x00000000
   d4158:	40affe00 	.word	0x40affe00
   d415c:	2003e638 	.word	0x2003e638

000d4160 <_Z9myThread2Pv>:
  }
}

// prox values
void myThread2(void *args)
{
   d4160:	b508      	push	{r3, lr}
  while (1)
  {
    // if (interruptOccured == false)
    // {
      proxValue = proximitySensor.getProximity();
   d4162:	4d05      	ldr	r5, [pc, #20]	; (d4178 <_Z9myThread2Pv+0x18>)
   d4164:	4c05      	ldr	r4, [pc, #20]	; (d417c <_Z9myThread2Pv+0x1c>)
   d4166:	4628      	mov	r0, r5
   d4168:	f000 ff08 	bl	d4f7c <_ZN8VCNL404012getProximityEv>
   d416c:	6020      	str	r0, [r4, #0]
      delay(1000);
   d416e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4172:	f002 fee7 	bl	d6f44 <delay>
  while (1)
   d4176:	e7f6      	b.n	d4166 <_Z9myThread2Pv+0x6>
   d4178:	2003e61c 	.word	0x2003e61c
   d417c:	2003e618 	.word	0x2003e618

000d4180 <_Z9myThread3Pv>:
  }
}

// light values
void myThread3(void *args)
{
   d4180:	b508      	push	{r3, lr}
  while (1)
  {
    // if (interruptOccured == false)
    // {
      ambientValue = proximitySensor.getAmbient();
   d4182:	4d05      	ldr	r5, [pc, #20]	; (d4198 <_Z9myThread3Pv+0x18>)
   d4184:	4c05      	ldr	r4, [pc, #20]	; (d419c <_Z9myThread3Pv+0x1c>)
   d4186:	4628      	mov	r0, r5
   d4188:	f000 fefb 	bl	d4f82 <_ZN8VCNL404010getAmbientEv>
   d418c:	6020      	str	r0, [r4, #0]
      delay(1000);
   d418e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4192:	f002 fed7 	bl	d6f44 <delay>
  while (1)
   d4196:	e7f6      	b.n	d4186 <_Z9myThread3Pv+0x6>
   d4198:	2003e61c 	.word	0x2003e61c
   d419c:	2003e5b4 	.word	0x2003e5b4

000d41a0 <_ZN10BlynkParam3addEPKc.part.0.constprop.0>:
    memcpy(buff+len, b, l);
    len += l;
}

inline
void BlynkParam::add(const char* str)
   d41a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d41a2:	4604      	mov	r4, r0
{
    if (str == NULL) {
        buff[len++] = '\0';
        return;
    }
    add(str, strlen(str)+1);
   d41a4:	4608      	mov	r0, r1
   d41a6:	9101      	str	r1, [sp, #4]
   d41a8:	f004 fe06 	bl	d8db8 <strlen>
    if (len + l > buff_size)
   d41ac:	6863      	ldr	r3, [r4, #4]
   d41ae:	68a2      	ldr	r2, [r4, #8]
    add(str, strlen(str)+1);
   d41b0:	1c45      	adds	r5, r0, #1
    if (len + l > buff_size)
   d41b2:	18e8      	adds	r0, r5, r3
   d41b4:	4290      	cmp	r0, r2
   d41b6:	d808      	bhi.n	d41ca <_ZN10BlynkParam3addEPKc.part.0.constprop.0+0x2a>
    memcpy(buff+len, b, l);
   d41b8:	6820      	ldr	r0, [r4, #0]
   d41ba:	9901      	ldr	r1, [sp, #4]
   d41bc:	462a      	mov	r2, r5
   d41be:	4418      	add	r0, r3
   d41c0:	f004 fd9c 	bl	d8cfc <memcpy>
    len += l;
   d41c4:	6860      	ldr	r0, [r4, #4]
   d41c6:	4428      	add	r0, r5
   d41c8:	6060      	str	r0, [r4, #4]
}
   d41ca:	b003      	add	sp, #12
   d41cc:	bd30      	pop	{r4, r5, pc}
	...

000d41d0 <_ZN22BlynkTransportParticleD1Ev>:
#define BlynkParticle_h

#include "BlynkApiParticle.h"
#include "Blynk/BlynkProtocol.h"

class BlynkTransportParticle
   d41d0:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d41d2:	6984      	ldr	r4, [r0, #24]
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d41d4:	4b0a      	ldr	r3, [pc, #40]	; (d4200 <_ZN22BlynkTransportParticleD1Ev+0x30>)
   d41d6:	6003      	str	r3, [r0, #0]
   d41d8:	4605      	mov	r5, r0
   d41da:	b17c      	cbz	r4, d41fc <_ZN22BlynkTransportParticleD1Ev+0x2c>
      if (--_M_use_count == 0)
   d41dc:	6863      	ldr	r3, [r4, #4]
   d41de:	3b01      	subs	r3, #1
   d41e0:	6063      	str	r3, [r4, #4]
   d41e2:	b95b      	cbnz	r3, d41fc <_ZN22BlynkTransportParticleD1Ev+0x2c>
          _M_dispose();
   d41e4:	6823      	ldr	r3, [r4, #0]
   d41e6:	4620      	mov	r0, r4
   d41e8:	689b      	ldr	r3, [r3, #8]
   d41ea:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d41ec:	68a3      	ldr	r3, [r4, #8]
   d41ee:	3b01      	subs	r3, #1
   d41f0:	60a3      	str	r3, [r4, #8]
   d41f2:	b91b      	cbnz	r3, d41fc <_ZN22BlynkTransportParticleD1Ev+0x2c>
            _M_destroy();
   d41f4:	6823      	ldr	r3, [r4, #0]
   d41f6:	4620      	mov	r0, r4
   d41f8:	68db      	ldr	r3, [r3, #12]
   d41fa:	4798      	blx	r3
   d41fc:	4628      	mov	r0, r5
   d41fe:	bd38      	pop	{r3, r4, r5, pc}
   d4200:	000d96e8 	.word	0x000d96e8

000d4204 <_ZN10CloudClass7processEv>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
   d4204:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4206:	f001 fced 	bl	d5be4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d420a:	4b03      	ldr	r3, [pc, #12]	; (d4218 <_ZN10CloudClass7processEv+0x14>)
   d420c:	6018      	str	r0, [r3, #0]
    		application_checkin();
    		spark_process();
    }
   d420e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    		spark_process();
   d4212:	f001 bf27 	b.w	d6064 <spark_process>
   d4216:	bf00      	nop
   d4218:	2003e7d8 	.word	0x2003e7d8

000d421c <_ZNK10BlynkParam8iterator5asIntEv>:
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d421c:	6803      	ldr	r3, [r0, #0]
   d421e:	b12b      	cbz	r3, d422c <_ZNK10BlynkParam8iterator5asIntEv+0x10>
   d4220:	6842      	ldr	r2, [r0, #4]
   d4222:	4293      	cmp	r3, r2
   d4224:	d202      	bcs.n	d422c <_ZNK10BlynkParam8iterator5asIntEv+0x10>
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
   d4226:	4618      	mov	r0, r3
   d4228:	f004 bd44 	b.w	d8cb4 <atoi>
   d422c:	2000      	movs	r0, #0
   d422e:	4770      	bx	lr

000d4230 <_ZN10BlynkParam8iteratorppEv>:
        iterator& operator ++() {
   d4230:	b538      	push	{r3, r4, r5, lr}
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d4232:	6805      	ldr	r5, [r0, #0]
        iterator& operator ++() {
   d4234:	4604      	mov	r4, r0
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d4236:	b145      	cbz	r5, d424a <_ZN10BlynkParam8iteratorppEv+0x1a>
   d4238:	6843      	ldr	r3, [r0, #4]
   d423a:	429d      	cmp	r5, r3
   d423c:	d205      	bcs.n	d424a <_ZN10BlynkParam8iteratorppEv+0x1a>
                ptr += strlen(ptr) + 1;
   d423e:	4628      	mov	r0, r5
   d4240:	f004 fdba 	bl	d8db8 <strlen>
   d4244:	3001      	adds	r0, #1
   d4246:	4405      	add	r5, r0
   d4248:	6025      	str	r5, [r4, #0]
        }
   d424a:	4620      	mov	r0, r4
   d424c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4250 <_ZN10BlynkParam3addEi>:

    #include <stdio.h>

    inline
    void BlynkParam::add(int value)
    {
   d4250:	b538      	push	{r3, r4, r5, lr}
   d4252:	4604      	mov	r4, r0
   d4254:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%i", value)+1;
   d4256:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   d425a:	6825      	ldr	r5, [r4, #0]
   d425c:	4a04      	ldr	r2, [pc, #16]	; (d4270 <_ZN10BlynkParam3addEi+0x20>)
   d425e:	1a09      	subs	r1, r1, r0
   d4260:	4428      	add	r0, r5
   d4262:	f001 ff2f 	bl	d60c4 <snprintf>
   d4266:	6863      	ldr	r3, [r4, #4]
   d4268:	3001      	adds	r0, #1
   d426a:	4403      	add	r3, r0
   d426c:	6063      	str	r3, [r4, #4]
    }
   d426e:	bd38      	pop	{r3, r4, r5, pc}
   d4270:	000d8f24 	.word	0x000d8f24

000d4274 <_ZN10BlynkParam3addEl>:
        len += snprintf(buff+len, buff_size-len, "%u", value)+1;
    }

    inline
    void BlynkParam::add(long value)
    {
   d4274:	b538      	push	{r3, r4, r5, lr}
   d4276:	4604      	mov	r4, r0
   d4278:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%li", value)+1;
   d427a:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   d427e:	6825      	ldr	r5, [r4, #0]
   d4280:	4a04      	ldr	r2, [pc, #16]	; (d4294 <_ZN10BlynkParam3addEl+0x20>)
   d4282:	1a09      	subs	r1, r1, r0
   d4284:	4428      	add	r0, r5
   d4286:	f001 ff1d 	bl	d60c4 <snprintf>
   d428a:	6863      	ldr	r3, [r4, #4]
   d428c:	3001      	adds	r0, #1
   d428e:	4403      	add	r3, r0
   d4290:	6063      	str	r3, [r4, #4]
    }
   d4292:	bd38      	pop	{r3, r4, r5, pc}
   d4294:	000d8f27 	.word	0x000d8f27

000d4298 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>:
#endif
    }

private:

    void internalReconnect() {
   d4298:	b508      	push	{r3, lr}
        state = CONNECTING;
   d429a:	2300      	movs	r3, #0
   d429c:	7743      	strb	r3, [r0, #29]
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d429e:	6800      	ldr	r0, [r0, #0]
   d42a0:	f003 fb18 	bl	d78d4 <_ZN9TCPClient4stopEv>
        conn.disconnect();
        BlynkOnDisconnected();
    }
   d42a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        BlynkOnDisconnected();
   d42a8:	f001 bc1e 	b.w	d5ae8 <BlynkNoOpCbk>

000d42ac <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>:
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   d42ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    iterator begin() const { return iterator(buff, buff+len); }
   d42b0:	eb01 0902 	add.w	r9, r1, r2
   d42b4:	b08f      	sub	sp, #60	; 0x3c
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
   d42b6:	4549      	cmp	r1, r9
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d42b8:	e9cd 1905 	strd	r1, r9, [sp, #20]
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   d42bc:	4680      	mov	r8, r0
   d42be:	460d      	mov	r5, r1
   d42c0:	4616      	mov	r6, r2
    if (it >= param.end())
   d42c2:	f080 8092 	bcs.w	d43ea <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        return;
    const char* cmd = it.asStr();
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
    if (++it >= param.end())
   d42c6:	a805      	add	r0, sp, #20
   d42c8:	880f      	ldrh	r7, [r1, #0]
   d42ca:	f7ff ffb1 	bl	d4230 <_ZN10BlynkParam8iteratorppEv>
   d42ce:	6803      	ldr	r3, [r0, #0]
   d42d0:	4599      	cmp	r9, r3
   d42d2:	f240 808a 	bls.w	d43ea <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        return;

    const uint8_t pin = BLYNK_DECODE_PIN(it);
   d42d6:	a805      	add	r0, sp, #20
   d42d8:	f7ff ffa0 	bl	d421c <_ZNK10BlynkParam8iterator5asIntEv>

    switch(cmd16) {
   d42dc:	f247 2376 	movw	r3, #29302	; 0x7276
   d42e0:	429f      	cmp	r7, r3
    const uint8_t pin = BLYNK_DECODE_PIN(it);
   d42e2:	b2c4      	uxtb	r4, r0
    switch(cmd16) {
   d42e4:	f000 80a9 	beq.w	d443a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x18e>
   d42e8:	d827      	bhi.n	d433a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x8e>
   d42ea:	f247 2361 	movw	r3, #29281	; 0x7261
   d42ee:	429f      	cmp	r7, r3
   d42f0:	d07e      	beq.n	d43f0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x144>
   d42f2:	f247 2364 	movw	r3, #29284	; 0x7264
   d42f6:	429f      	cmp	r7, r3
   d42f8:	d042      	beq.n	d4380 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xd4>
   d42fa:	f646 5370 	movw	r3, #28016	; 0x6d70
   d42fe:	429f      	cmp	r7, r3
   d4300:	d128      	bne.n	d4354 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xa8>

    case BLYNK_HW_PM: {
        while (it < param.end()) {
            const uint8_t pin = BLYNK_DECODE_PIN(it);
            ++it;
            if (!strcmp(it.asStr(), "in")) {
   d4302:	4e63      	ldr	r6, [pc, #396]	; (d4490 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1e4>)
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   d4304:	4f63      	ldr	r7, [pc, #396]	; (d4494 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1e8>)
   d4306:	f8df 81a0 	ldr.w	r8, [pc, #416]	; d44a8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1fc>
        while (it < param.end()) {
   d430a:	9b05      	ldr	r3, [sp, #20]
   d430c:	4599      	cmp	r9, r3
   d430e:	d96c      	bls.n	d43ea <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
   d4310:	a805      	add	r0, sp, #20
   d4312:	f7ff ff83 	bl	d421c <_ZNK10BlynkParam8iterator5asIntEv>
   d4316:	b2c4      	uxtb	r4, r0
            ++it;
   d4318:	a805      	add	r0, sp, #20
   d431a:	f7ff ff89 	bl	d4230 <_ZN10BlynkParam8iteratorppEv>
            if (!strcmp(it.asStr(), "in")) {
   d431e:	9d05      	ldr	r5, [sp, #20]
   d4320:	4631      	mov	r1, r6
   d4322:	4628      	mov	r0, r5
   d4324:	f004 fd3e 	bl	d8da4 <strcmp>
   d4328:	4601      	mov	r1, r0
   d432a:	b9e0      	cbnz	r0, d4366 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xba>
                pinMode(pin, OUTPUT);
   d432c:	4620      	mov	r0, r4
   d432e:	f003 fcd9 	bl	d7ce4 <pinMode>
            } else {
#ifdef BLYNK_DEBUG
                BLYNK_LOG4(BLYNK_F("Invalid pin "), pin, BLYNK_F(" mode "), it.asStr());
#endif
            }
            ++it;
   d4332:	a805      	add	r0, sp, #20
   d4334:	f7ff ff7c 	bl	d4230 <_ZN10BlynkParam8iteratorppEv>
        while (it < param.end()) {
   d4338:	e7e7      	b.n	d430a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x5e>
    switch(cmd16) {
   d433a:	f247 7364 	movw	r3, #30564	; 0x7764
   d433e:	429f      	cmp	r7, r3
   d4340:	d03f      	beq.n	d43c2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x116>
   d4342:	f247 7376 	movw	r3, #30582	; 0x7776
   d4346:	429f      	cmp	r7, r3
   d4348:	f000 8087 	beq.w	d445a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ae>
   d434c:	f247 7361 	movw	r3, #30561	; 0x7761
   d4350:	429f      	cmp	r7, r3
   d4352:	d05f      	beq.n	d4414 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x168>
        BlynkParam param2(start, len - (start - (char*)buff));
        callWriteHandler(pin, param2);
    } break;
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   d4354:	2300      	movs	r3, #0
   d4356:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d435a:	2202      	movs	r2, #2
   d435c:	9200      	str	r2, [sp, #0]
   d435e:	f8b8 201a 	ldrh.w	r2, [r8, #26]
   d4362:	4619      	mov	r1, r3
   d4364:	e029      	b.n	d43ba <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x10e>
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   d4366:	4639      	mov	r1, r7
   d4368:	4628      	mov	r0, r5
   d436a:	f004 fd1b 	bl	d8da4 <strcmp>
   d436e:	b128      	cbz	r0, d437c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xd0>
   d4370:	4641      	mov	r1, r8
   d4372:	4628      	mov	r0, r5
   d4374:	f004 fd16 	bl	d8da4 <strcmp>
   d4378:	2800      	cmp	r0, #0
   d437a:	d1da      	bne.n	d4332 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x86>
                pinMode(pin, OUTPUT);
   d437c:	2101      	movs	r1, #1
   d437e:	e7d5      	b.n	d432c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x80>
        : buff((char*)addr), len(length), buff_size(buffsize)
   d4380:	ab0a      	add	r3, sp, #40	; 0x28
   d4382:	4945      	ldr	r1, [pc, #276]	; (d4498 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ec>)
   d4384:	9307      	str	r3, [sp, #28]
   d4386:	a807      	add	r0, sp, #28
   d4388:	2310      	movs	r3, #16
   d438a:	2500      	movs	r5, #0
   d438c:	e9cd 5308 	strd	r5, r3, [sp, #32]
    if (str == NULL) {
   d4390:	f7ff ff06 	bl	d41a0 <_ZN10BlynkParam3addEPKc.part.0.constprop.0>
        rsp.add(pin);
   d4394:	a807      	add	r0, sp, #28
   d4396:	4621      	mov	r1, r4
   d4398:	f7ff ff5a 	bl	d4250 <_ZN10BlynkParam3addEi>
        rsp.add(digitalRead(pin));
   d439c:	4620      	mov	r0, r4
   d439e:	f003 fccb 	bl	d7d38 <digitalRead>
        rsp.add(analogRead(pin));
   d43a2:	4601      	mov	r1, r0
   d43a4:	a807      	add	r0, sp, #28
   d43a6:	f7ff ff65 	bl	d4274 <_ZN10BlynkParam3addEl>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
   d43aa:	9b08      	ldr	r3, [sp, #32]
   d43ac:	e9cd 5501 	strd	r5, r5, [sp, #4]
   d43b0:	3b01      	subs	r3, #1
   d43b2:	9300      	str	r3, [sp, #0]
   d43b4:	9b07      	ldr	r3, [sp, #28]
   d43b6:	462a      	mov	r2, r5
   d43b8:	2114      	movs	r1, #20
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   d43ba:	4640      	mov	r0, r8
   d43bc:	f000 fb7c 	bl	d4ab8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
   d43c0:	e013      	b.n	d43ea <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        if (++it >= param.end())
   d43c2:	a805      	add	r0, sp, #20
   d43c4:	f7ff ff34 	bl	d4230 <_ZN10BlynkParam8iteratorppEv>
   d43c8:	6803      	ldr	r3, [r0, #0]
   d43ca:	4599      	cmp	r9, r3
   d43cc:	d90d      	bls.n	d43ea <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        pinMode(pin, OUTPUT);
   d43ce:	b2a4      	uxth	r4, r4
   d43d0:	2101      	movs	r1, #1
   d43d2:	4620      	mov	r0, r4
   d43d4:	f003 fc86 	bl	d7ce4 <pinMode>
        digitalWrite(pin, it.asInt() ? HIGH : LOW);
   d43d8:	a805      	add	r0, sp, #20
   d43da:	f7ff ff1f 	bl	d421c <_ZNK10BlynkParam8iterator5asIntEv>
   d43de:	1e01      	subs	r1, r0, #0
   d43e0:	bf18      	it	ne
   d43e2:	2101      	movne	r1, #1
   d43e4:	4620      	mov	r0, r4
   d43e6:	f003 fc8e 	bl	d7d06 <digitalWrite>
    }
}
   d43ea:	b00f      	add	sp, #60	; 0x3c
   d43ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        : buff((char*)addr), len(length), buff_size(buffsize)
   d43f0:	ab0a      	add	r3, sp, #40	; 0x28
   d43f2:	9307      	str	r3, [sp, #28]
   d43f4:	a807      	add	r0, sp, #28
   d43f6:	2310      	movs	r3, #16
   d43f8:	4928      	ldr	r1, [pc, #160]	; (d449c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f0>)
   d43fa:	2500      	movs	r5, #0
   d43fc:	e9cd 5308 	strd	r5, r3, [sp, #32]
    if (str == NULL) {
   d4400:	f7ff fece 	bl	d41a0 <_ZN10BlynkParam3addEPKc.part.0.constprop.0>
        rsp.add(pin);
   d4404:	a807      	add	r0, sp, #28
   d4406:	4621      	mov	r1, r4
   d4408:	f7ff ff22 	bl	d4250 <_ZN10BlynkParam3addEi>
        rsp.add(analogRead(pin));
   d440c:	4620      	mov	r0, r4
   d440e:	f003 fca6 	bl	d7d5e <analogRead>
   d4412:	e7c6      	b.n	d43a2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xf6>
        if (++it >= param.end())
   d4414:	a805      	add	r0, sp, #20
   d4416:	f7ff ff0b 	bl	d4230 <_ZN10BlynkParam8iteratorppEv>
   d441a:	6803      	ldr	r3, [r0, #0]
   d441c:	4599      	cmp	r9, r3
   d441e:	d9e4      	bls.n	d43ea <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        pinMode(pin, OUTPUT);
   d4420:	b2a4      	uxth	r4, r4
   d4422:	2101      	movs	r1, #1
   d4424:	4620      	mov	r0, r4
   d4426:	f003 fc5d 	bl	d7ce4 <pinMode>
        analogWrite(pin, it.asInt());
   d442a:	a805      	add	r0, sp, #20
   d442c:	f7ff fef6 	bl	d421c <_ZNK10BlynkParam8iterator5asIntEv>
   d4430:	4601      	mov	r1, r0
   d4432:	4620      	mov	r0, r4
   d4434:	f003 fcaa 	bl	d7d8c <_Z11analogWritetm>
    } break;
   d4438:	e7d7      	b.n	d43ea <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        }
    }

    void callReadHandler(int pin) {
        BlynkReq req = { (uint8_t)pin };
        WidgetReadHandler handler = GetReadHandler(pin);
   d443a:	4620      	mov	r0, r4
        BlynkReq req = { (uint8_t)pin };
   d443c:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
        WidgetReadHandler handler = GetReadHandler(pin);
   d4440:	f001 fb54 	bl	d5aec <GetReadHandler>
        if (handler && (handler != BlynkWidgetRead)) {
   d4444:	4603      	mov	r3, r0
            handler(req);
   d4446:	a80a      	add	r0, sp, #40	; 0x28
        if (handler && (handler != BlynkWidgetRead)) {
   d4448:	b123      	cbz	r3, d4454 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a8>
   d444a:	4a15      	ldr	r2, [pc, #84]	; (d44a0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f4>)
   d444c:	4293      	cmp	r3, r2
   d444e:	d001      	beq.n	d4454 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a8>
            handler(req);
   d4450:	4798      	blx	r3
   d4452:	e7ca      	b.n	d43ea <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        } else {
            BlynkWidgetReadDefault(req);
   d4454:	f001 fb46 	bl	d5ae4 <BlynkWidgetRead>
        }
    }
   d4458:	e7c7      	b.n	d43ea <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        ++it;
   d445a:	a805      	add	r0, sp, #20
   d445c:	f7ff fee8 	bl	d4230 <_ZN10BlynkParam8iteratorppEv>
        char* start = (char*)it.asStr();
   d4460:	9b05      	ldr	r3, [sp, #20]
        BlynkReq req = { (uint8_t)pin };
   d4462:	f88d 401c 	strb.w	r4, [sp, #28]
        BlynkParam param2(start, len - (start - (char*)buff));
   d4466:	1b5d      	subs	r5, r3, r5
   d4468:	1b75      	subs	r5, r6, r5
        WidgetWriteHandler handler = GetWriteHandler(pin);
   d446a:	4620      	mov	r0, r4
        : buff((char*)addr), len(length), buff_size(length)
   d446c:	e9cd 350a 	strd	r3, r5, [sp, #40]	; 0x28
   d4470:	950c      	str	r5, [sp, #48]	; 0x30
   d4472:	f001 fb45 	bl	d5b00 <GetWriteHandler>
        if (handler && (handler != BlynkWidgetWrite)) {
   d4476:	4603      	mov	r3, r0
            handler(req, param);
   d4478:	a90a      	add	r1, sp, #40	; 0x28
   d447a:	a807      	add	r0, sp, #28
        if (handler && (handler != BlynkWidgetWrite)) {
   d447c:	b123      	cbz	r3, d4488 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1dc>
   d447e:	4a09      	ldr	r2, [pc, #36]	; (d44a4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f8>)
   d4480:	4293      	cmp	r3, r2
   d4482:	d001      	beq.n	d4488 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1dc>
            handler(req, param);
   d4484:	4798      	blx	r3
   d4486:	e7b0      	b.n	d43ea <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
            BlynkWidgetWriteDefault(req, param);
   d4488:	f001 fb2d 	bl	d5ae6 <BlynkWidgetWrite>
    } break;
   d448c:	e7ad      	b.n	d43ea <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
   d448e:	bf00      	nop
   d4490:	000d8f2b 	.word	0x000d8f2b
   d4494:	000d8f2e 	.word	0x000d8f2e
   d4498:	000d8f36 	.word	0x000d8f36
   d449c:	000d8f39 	.word	0x000d8f39
   d44a0:	000d5ae5 	.word	0x000d5ae5
   d44a4:	000d5ae7 	.word	0x000d5ae7
   d44a8:	000d8f32 	.word	0x000d8f32

000d44ac <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>:
    return true;
}

template <class Transp>
BLYNK_FORCE_INLINE
bool BlynkProtocol<Transp>::processInput(void)
   d44ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d44b0:	b08c      	sub	sp, #48	; 0x30
   d44b2:	af04      	add	r7, sp, #16
   d44b4:	4604      	mov	r4, r0

    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
   d44b6:	2205      	movs	r2, #5
   d44b8:	6800      	ldr	r0, [r0, #0]
   d44ba:	1d39      	adds	r1, r7, #4
   d44bc:	f002 fd18 	bl	d6ef0 <_ZN6Stream9readBytesEPcj>

template <class Transp>
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
{
    size_t rlen = conn.read(&hdr, sizeof(hdr));
    if (rlen == 0) {
   d44c0:	b3b8      	cbz	r0, d4532 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x86>
        return 0;
    }

    if (sizeof(hdr) != rlen) {
   d44c2:	2805      	cmp	r0, #5
   d44c4:	d004      	beq.n	d44d0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24>
        return false;
   d44c6:	2000      	movs	r0, #0
}
   d44c8:	3720      	adds	r7, #32
   d44ca:	46bd      	mov	sp, r7
   d44cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   d44d0:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   d44d4:	0a13      	lsrs	r3, r2, #8
   d44d6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hdr.length = ntohs(hdr.length);
   d44da:	f8b7 2007 	ldrh.w	r2, [r7, #7]
    hdr.msg_id = ntohs(hdr.msg_id);
   d44de:	f8a7 3005 	strh.w	r3, [r7, #5]
   d44e2:	b299      	uxth	r1, r3
    hdr.length = ntohs(hdr.length);
   d44e4:	0a13      	lsrs	r3, r2, #8
   d44e6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d44ea:	fa1f f883 	uxth.w	r8, r3
   d44ee:	f8a7 3007 	strh.w	r3, [r7, #7]
    if (ret < 0 || hdr.msg_id == 0) {
   d44f2:	2900      	cmp	r1, #0
   d44f4:	d0e7      	beq.n	d44c6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a>
    if (hdr.type == BLYNK_CMD_RESPONSE) {
   d44f6:	793b      	ldrb	r3, [r7, #4]
   d44f8:	bb23      	cbnz	r3, d4544 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x98>
        lastActivityIn = BlynkMillis();
   d44fa:	f001 faf1 	bl	d5ae0 <_Z11BlynkMillisv>
   d44fe:	4602      	mov	r2, r0
   d4500:	60e0      	str	r0, [r4, #12]
        if (state == CONNECTING && (1 == hdr.msg_id)) {
   d4502:	7f60      	ldrb	r0, [r4, #29]
   d4504:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   d4508:	b9c0      	cbnz	r0, d453c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x90>
   d450a:	f8b7 1005 	ldrh.w	r1, [r7, #5]
   d450e:	2901      	cmp	r1, #1
   d4510:	d114      	bne.n	d453c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x90>
            switch (hdr.length) {
   d4512:	2b09      	cmp	r3, #9
   d4514:	d00f      	beq.n	d4536 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x8a>
   d4516:	2bc8      	cmp	r3, #200	; 0xc8
   d4518:	d001      	beq.n	d451e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x72>
   d451a:	2b04      	cmp	r3, #4
   d451c:	d1d4      	bne.n	d44c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = CONNECTED;
   d451e:	2501      	movs	r5, #1
                lastHeartbeat = lastActivityIn;
   d4520:	6162      	str	r2, [r4, #20]
                this->sendInfo();
   d4522:	4620      	mov	r0, r4
                state = CONNECTED;
   d4524:	7765      	strb	r5, [r4, #29]
                this->sendInfo();
   d4526:	f000 fb75 	bl	d4c14 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
                BLYNK_RUN_YIELD();
   d452a:	f7ff fe6b 	bl	d4204 <_ZN10CloudClass7processEv>
                BlynkOnConnected();
   d452e:	f001 fadb 	bl	d5ae8 <BlynkNoOpCbk>
        return true; // Considered OK (no data on input)
   d4532:	2001      	movs	r0, #1
   d4534:	e7c8      	b.n	d44c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = TOKEN_INVALID;
   d4536:	2303      	movs	r3, #3
   d4538:	7763      	strb	r3, [r4, #29]
                break;
   d453a:	e7c5      	b.n	d44c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        if (BLYNK_NOT_AUTHENTICATED == hdr.length) {
   d453c:	1f58      	subs	r0, r3, #5
   d453e:	bf18      	it	ne
   d4540:	2001      	movne	r0, #1
   d4542:	e7c1      	b.n	d44c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
    if (hdr.length > BLYNK_MAX_READBYTES) {
   d4544:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
   d4548:	d903      	bls.n	d4552 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xa6>
        internalReconnect();
   d454a:	4620      	mov	r0, r4
   d454c:	f7ff fea4 	bl	d4298 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   d4550:	e7ef      	b.n	d4532 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x86>
    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
   d4552:	f108 0308 	add.w	r3, r8, #8
   d4556:	f023 0307 	bic.w	r3, r3, #7
   d455a:	466e      	mov	r6, sp
   d455c:	ebad 0d03 	sub.w	sp, sp, r3
   d4560:	ad04      	add	r5, sp, #16
   d4562:	6820      	ldr	r0, [r4, #0]
   d4564:	4642      	mov	r2, r8
   d4566:	4629      	mov	r1, r5
   d4568:	f002 fcc2 	bl	d6ef0 <_ZN6Stream9readBytesEPcj>
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
   d456c:	4580      	cmp	r8, r0
   d456e:	f04f 0000 	mov.w	r0, #0
   d4572:	d17f      	bne.n	d4674 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c8>
    inputBuffer[hdr.length] = '\0';
   d4574:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   d4578:	54e8      	strb	r0, [r5, r3]
    lastActivityIn = BlynkMillis();
   d457a:	f001 fab1 	bl	d5ae0 <_Z11BlynkMillisv>
    switch (hdr.type)
   d457e:	793b      	ldrb	r3, [r7, #4]
    lastActivityIn = BlynkMillis();
   d4580:	60e0      	str	r0, [r4, #12]
    switch (hdr.type)
   d4582:	2b14      	cmp	r3, #20
   d4584:	f000 80a6 	beq.w	d46d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x228>
   d4588:	d848      	bhi.n	d461c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x170>
   d458a:	2b0f      	cmp	r3, #15
   d458c:	f000 80a2 	beq.w	d46d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x228>
   d4590:	d807      	bhi.n	d45a2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xf6>
   d4592:	2b02      	cmp	r3, #2
   d4594:	d048      	beq.n	d4628 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x17c>
   d4596:	2b06      	cmp	r3, #6
   d4598:	d051      	beq.n	d463e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x192>
        internalReconnect();
   d459a:	4620      	mov	r0, r4
   d459c:	f7ff fe7c 	bl	d4298 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   d45a0:	e058      	b.n	d4654 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
    switch (hdr.type)
   d45a2:	2b11      	cmp	r3, #17
   d45a4:	d1f9      	bne.n	d459a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xee>
        BlynkReq req = { 0 };
   d45a6:	2300      	movs	r3, #0
   d45a8:	703b      	strb	r3, [r7, #0]
        BlynkParam param(inputBuffer, hdr.length);
   d45aa:	f8b7 3007 	ldrh.w	r3, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   d45ae:	442b      	add	r3, r5
        if (it >= param.end())
   d45b0:	429d      	cmp	r5, r3
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d45b2:	e9c7 5303 	strd	r5, r3, [r7, #12]
   d45b6:	d24d      	bcs.n	d4654 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
        ++it;
   d45b8:	f107 000c 	add.w	r0, r7, #12
   d45bc:	f8d5 8000 	ldr.w	r8, [r5]
   d45c0:	f7ff fe36 	bl	d4230 <_ZN10BlynkParam8iteratorppEv>
        char* start = (char*)(it).asStr();
   d45c4:	68fb      	ldr	r3, [r7, #12]
        unsigned length = hdr.length - (start - (char*)inputBuffer);
   d45c6:	f8b7 1007 	ldrh.w	r1, [r7, #7]
   d45ca:	1b5d      	subs	r5, r3, r5
   d45cc:	1b4d      	subs	r5, r1, r5
        : buff((char*)addr), len(length), buff_size(length)
   d45ce:	e9c7 3505 	strd	r3, r5, [r7, #20]
        msgIdOutOverride = hdr.msg_id;
   d45d2:	687b      	ldr	r3, [r7, #4]
   d45d4:	61fd      	str	r5, [r7, #28]
   d45d6:	f3c3 230f 	ubfx	r3, r3, #8, #16
   d45da:	8363      	strh	r3, [r4, #26]
   d45dc:	4b64      	ldr	r3, [pc, #400]	; (d4770 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c4>)
   d45de:	4598      	cmp	r8, r3
   d45e0:	f000 80bf 	beq.w	d4762 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2b6>
   d45e4:	f200 808c 	bhi.w	d4700 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x254>
   d45e8:	f5a3 237f 	sub.w	r3, r3, #1044480	; 0xff000
   d45ec:	f46f 7200 	mvn.w	r2, #512	; 0x200
   d45f0:	4413      	add	r3, r2
   d45f2:	4598      	cmp	r8, r3
   d45f4:	f000 809d 	beq.w	d4732 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x286>
   d45f8:	d879      	bhi.n	d46ee <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x242>
   d45fa:	f5a3 3300 	sub.w	r3, r3, #131072	; 0x20000
   d45fe:	3b06      	subs	r3, #6
   d4600:	4598      	cmp	r8, r3
   d4602:	f000 809c 	beq.w	d473e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x292>
   d4606:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   d460a:	3303      	adds	r3, #3
   d460c:	4598      	cmp	r8, r3
   d460e:	d16b      	bne.n	d46e8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
   d4610:	f107 0114 	add.w	r1, r7, #20
   d4614:	4638      	mov	r0, r7
   d4616:	f001 fa66 	bl	d5ae6 <BlynkWidgetWrite>
   d461a:	e065      	b.n	d46e8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
    switch (hdr.type)
   d461c:	2b29      	cmp	r3, #41	; 0x29
   d461e:	d01b      	beq.n	d4658 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1ac>
   d4620:	2b37      	cmp	r3, #55	; 0x37
   d4622:	d017      	beq.n	d4654 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
   d4624:	2b1d      	cmp	r3, #29
   d4626:	d1b8      	bne.n	d459a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xee>
        if (state == CONNECTING) {
   d4628:	7f63      	ldrb	r3, [r4, #29]
   d462a:	b943      	cbnz	r3, d463e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x192>
            state = CONNECTED;
   d462c:	2301      	movs	r3, #1
   d462e:	7763      	strb	r3, [r4, #29]
            this->sendInfo();
   d4630:	4620      	mov	r0, r4
   d4632:	f000 faef 	bl	d4c14 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
            BLYNK_RUN_YIELD();
   d4636:	f7ff fde5 	bl	d4204 <_ZN10CloudClass7processEv>
            BlynkOnConnected();
   d463a:	f001 fa55 	bl	d5ae8 <BlynkNoOpCbk>
        sendCmd(BLYNK_CMD_RESPONSE, id, NULL, rsp);
   d463e:	2300      	movs	r3, #0
   d4640:	21c8      	movs	r1, #200	; 0xc8
   d4642:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   d4646:	9100      	str	r1, [sp, #0]
   d4648:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d464c:	4619      	mov	r1, r3
   d464e:	4620      	mov	r0, r4
   d4650:	f000 fa32 	bl	d4ab8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    switch (hdr.type)
   d4654:	2001      	movs	r0, #1
   d4656:	e00d      	b.n	d4674 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c8>
        if (!redir_serv) {
   d4658:	68a3      	ldr	r3, [r4, #8]
   d465a:	b91b      	cbnz	r3, d4664 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1b8>
             redir_serv = (char*)malloc(64);
   d465c:	2040      	movs	r0, #64	; 0x40
   d465e:	f001 fd19 	bl	d6094 <malloc>
   d4662:	60a0      	str	r0, [r4, #8]
        BlynkParam param(inputBuffer, hdr.length);
   d4664:	f8b7 8007 	ldrh.w	r8, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   d4668:	44a8      	add	r8, r5
        if (it >= param.end())
   d466a:	4545      	cmp	r5, r8
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d466c:	e9c7 5805 	strd	r5, r8, [r7, #20]
   d4670:	d302      	bcc.n	d4678 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1cc>
            return false;
   d4672:	2000      	movs	r0, #0
   d4674:	46b5      	mov	sp, r6
   d4676:	e727      	b.n	d44c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        strncpy(redir_serv, it.asStr(), 64);
   d4678:	4629      	mov	r1, r5
   d467a:	2240      	movs	r2, #64	; 0x40
   d467c:	68a0      	ldr	r0, [r4, #8]
   d467e:	f004 fba3 	bl	d8dc8 <strncpy>
        redir_serv[63] = '\0';
   d4682:	68a3      	ldr	r3, [r4, #8]
   d4684:	2500      	movs	r5, #0
   d4686:	f883 503f 	strb.w	r5, [r3, #63]	; 0x3f
        if (++it < param.end())
   d468a:	f107 0014 	add.w	r0, r7, #20
   d468e:	f7ff fdcf 	bl	d4230 <_ZN10BlynkParam8iteratorppEv>
   d4692:	6803      	ldr	r3, [r0, #0]
   d4694:	4543      	cmp	r3, r8
   d4696:	d21b      	bcs.n	d46d0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x224>
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d4698:	6978      	ldr	r0, [r7, #20]
   d469a:	b120      	cbz	r0, d46a6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1fa>
   d469c:	69bb      	ldr	r3, [r7, #24]
   d469e:	4298      	cmp	r0, r3
   d46a0:	d214      	bcs.n	d46cc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x220>
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
   d46a2:	f004 fb0b 	bl	d8cbc <atol>
            redir_port = it.asLong();
   d46a6:	b285      	uxth	r5, r0
    void disconnect() { client.stop(); }
   d46a8:	6820      	ldr	r0, [r4, #0]
   d46aa:	f003 f913 	bl	d78d4 <_ZN9TCPClient4stopEv>
        conn.begin(redir_serv, redir_port);
   d46ae:	6823      	ldr	r3, [r4, #0]
   d46b0:	68a2      	ldr	r2, [r4, #8]
        domain = d;
   d46b2:	635a      	str	r2, [r3, #52]	; 0x34
        port = p;
   d46b4:	871d      	strh	r5, [r3, #56]	; 0x38
        state = CONNECTING;
   d46b6:	2300      	movs	r3, #0
   d46b8:	7763      	strb	r3, [r4, #29]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   d46ba:	f001 fa11 	bl	d5ae0 <_Z11BlynkMillisv>
   d46be:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   d46c2:	3808      	subs	r0, #8
   d46c4:	e9c4 0003 	strd	r0, r0, [r4, #12]
   d46c8:	6160      	str	r0, [r4, #20]
   d46ca:	e7c3      	b.n	d4654 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
   d46cc:	4628      	mov	r0, r5
   d46ce:	e7ea      	b.n	d46a6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1fa>
        uint16_t redir_port = BLYNK_DEFAULT_PORT;
   d46d0:	2550      	movs	r5, #80	; 0x50
   d46d2:	e7e9      	b.n	d46a8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1fc>
        msgIdOutOverride = hdr.msg_id;
   d46d4:	687b      	ldr	r3, [r7, #4]
        this->processCmd(inputBuffer, hdr.length);
   d46d6:	f8b7 2007 	ldrh.w	r2, [r7, #7]
        msgIdOutOverride = hdr.msg_id;
   d46da:	f3c3 230f 	ubfx	r3, r3, #8, #16
   d46de:	8363      	strh	r3, [r4, #26]
        this->processCmd(inputBuffer, hdr.length);
   d46e0:	4629      	mov	r1, r5
   d46e2:	4620      	mov	r0, r4
   d46e4:	f7ff fde2 	bl	d42ac <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>
        msgIdOutOverride = 0;
   d46e8:	2300      	movs	r3, #0
   d46ea:	8363      	strh	r3, [r4, #26]
   d46ec:	e7b2      	b.n	d4654 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
   d46ee:	4b21      	ldr	r3, [pc, #132]	; (d4774 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c8>)
   d46f0:	4598      	cmp	r8, r3
   d46f2:	d1f9      	bne.n	d46e8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_DBG:  BlynkWidgetWriteInternalPinDBG(req, param2);    break;
   d46f4:	f107 0114 	add.w	r1, r7, #20
   d46f8:	4638      	mov	r0, r7
   d46fa:	f001 f9f4 	bl	d5ae6 <BlynkWidgetWrite>
   d46fe:	e7f3      	b.n	d46e8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
   d4700:	4b1d      	ldr	r3, [pc, #116]	; (d4778 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2cc>)
   d4702:	4598      	cmp	r8, r3
   d4704:	d021      	beq.n	d474a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x29e>
   d4706:	f103 639f 	add.w	r3, r3, #83361792	; 0x4f80000
   d470a:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   d470e:	f503 7380 	add.w	r3, r3, #256	; 0x100
   d4712:	4598      	cmp	r8, r3
   d4714:	d01f      	beq.n	d4756 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2aa>
   d4716:	f103 436e 	add.w	r3, r3, #3992977408	; 0xee000000
   d471a:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   d471e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   d4722:	4598      	cmp	r8, r3
   d4724:	d1e0      	bne.n	d46e8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_META: BlynkWidgetWriteInternalPinMETA(req, param2);   break;
   d4726:	f107 0114 	add.w	r1, r7, #20
   d472a:	4638      	mov	r0, r7
   d472c:	f001 f9db 	bl	d5ae6 <BlynkWidgetWrite>
   d4730:	e7da      	b.n	d46e8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_UTC:  BlynkWidgetWriteInternalPinUTC(req, param2);    break;
   d4732:	f107 0114 	add.w	r1, r7, #20
   d4736:	4638      	mov	r0, r7
   d4738:	f001 f9d5 	bl	d5ae6 <BlynkWidgetWrite>
   d473c:	e7d4      	b.n	d46e8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
   d473e:	f107 0114 	add.w	r1, r7, #20
   d4742:	4638      	mov	r0, r7
   d4744:	f001 f9cf 	bl	d5ae6 <BlynkWidgetWrite>
   d4748:	e7ce      	b.n	d46e8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
   d474a:	f107 0114 	add.w	r1, r7, #20
   d474e:	4638      	mov	r0, r7
   d4750:	f001 f9c9 	bl	d5ae6 <BlynkWidgetWrite>
   d4754:	e7c8      	b.n	d46e8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_ADIS: BlynkWidgetWriteInternalPinADIS(req, param2);   break;
   d4756:	f107 0114 	add.w	r1, r7, #20
   d475a:	4638      	mov	r0, r7
   d475c:	f001 f9c3 	bl	d5ae6 <BlynkWidgetWrite>
   d4760:	e7c2      	b.n	d46e8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_VFS:  BlynkWidgetWriteInternalPinVFS(req, param2);    break;
   d4762:	f107 0114 	add.w	r1, r7, #20
   d4766:	4638      	mov	r0, r7
   d4768:	f001 f9bd 	bl	d5ae6 <BlynkWidgetWrite>
   d476c:	e7bc      	b.n	d46e8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
   d476e:	bf00      	nop
   d4770:	00736676 	.word	0x00736676
   d4774:	00676264 	.word	0x00676264
   d4778:	6e6f6361 	.word	0x6e6f6361

000d477c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>:
bool BlynkProtocol<Transp>::run(bool avail)
   d477c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4780:	4604      	mov	r4, r0
   d4782:	b08c      	sub	sp, #48	; 0x30
   d4784:	460d      	mov	r5, r1
    BLYNK_RUN_YIELD();
   d4786:	f7ff fd3d 	bl	d4204 <_ZN10CloudClass7processEv>
    if (state == DISCONNECTED) {
   d478a:	7f63      	ldrb	r3, [r4, #29]
   d478c:	2b02      	cmp	r3, #2
   d478e:	f000 80a8 	beq.w	d48e2 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x166>
  return ~crc;
}

class BlynkHelperAutoInc {
public:
    BlynkHelperAutoInc(uint8_t& counter) : c(counter) { ++c; }
   d4792:	7f23      	ldrb	r3, [r4, #28]
    if (msgIdOutOverride || nesting > 2) {
   d4794:	8b62      	ldrh	r2, [r4, #26]
   d4796:	3301      	adds	r3, #1
   d4798:	b2db      	uxtb	r3, r3
   d479a:	7723      	strb	r3, [r4, #28]
   d479c:	b10a      	cbz	r2, d47a2 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x26>
    return true;
   d479e:	2501      	movs	r5, #1
   d47a0:	e016      	b.n	d47d0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>
    if (msgIdOutOverride || nesting > 2) {
   d47a2:	2b02      	cmp	r3, #2
   d47a4:	d8fb      	bhi.n	d479e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   d47a6:	6820      	ldr	r0, [r4, #0]
   d47a8:	f002 feb2 	bl	d7510 <_ZN9TCPClient9connectedEv>
    if (conn.connected()) {
   d47ac:	b1b8      	cbz	r0, d47de <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x62>
        while (avail || conn.available() > 0) {
   d47ae:	b925      	cbnz	r5, d47ba <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x3e>
    int available() { return client.available(); }
   d47b0:	6820      	ldr	r0, [r4, #0]
   d47b2:	f003 f835 	bl	d7820 <_ZN9TCPClient9availableEv>
   d47b6:	2800      	cmp	r0, #0
   d47b8:	dd11      	ble.n	d47de <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x62>
            if (!processInput()) {
   d47ba:	4620      	mov	r0, r4
   d47bc:	f7ff fe76 	bl	d44ac <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>
   d47c0:	4605      	mov	r5, r0
   d47c2:	2800      	cmp	r0, #0
   d47c4:	d1f4      	bne.n	d47b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x34>
    void disconnect() { client.stop(); }
   d47c6:	6820      	ldr	r0, [r4, #0]
   d47c8:	f003 f884 	bl	d78d4 <_ZN9TCPClient4stopEv>
                BlynkOnDisconnected();
   d47cc:	f001 f98c 	bl	d5ae8 <BlynkNoOpCbk>
    ~BlynkHelperAutoInc() { --c; }
   d47d0:	7f23      	ldrb	r3, [r4, #28]
   d47d2:	3b01      	subs	r3, #1
   d47d4:	7723      	strb	r3, [r4, #28]
}
   d47d6:	4628      	mov	r0, r5
   d47d8:	b00c      	add	sp, #48	; 0x30
   d47da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    const millis_time_t t = BlynkMillis();
   d47de:	f001 f97f 	bl	d5ae0 <_Z11BlynkMillisv>
   d47e2:	4606      	mov	r6, r0
    bool connected() { return client.connected(); }
   d47e4:	6820      	ldr	r0, [r4, #0]
   d47e6:	f002 fe93 	bl	d7510 <_ZN9TCPClient9connectedEv>
    if (state == CONNECTED) {
   d47ea:	7f67      	ldrb	r7, [r4, #29]
   d47ec:	2f01      	cmp	r7, #1
   d47ee:	4605      	mov	r5, r0
   d47f0:	d129      	bne.n	d4846 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xca>
        if (!tconn) {
   d47f2:	b920      	cbnz	r0, d47fe <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x82>
            lastHeartbeat = t;
   d47f4:	6166      	str	r6, [r4, #20]
            internalReconnect();
   d47f6:	4620      	mov	r0, r4
   d47f8:	f7ff fd4e 	bl	d4298 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   d47fc:	e7e8      	b.n	d47d0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>
        if (t - lastActivityIn > (1000UL * BLYNK_HEARTBEAT + BLYNK_TIMEOUT_MS*3)) {
   d47fe:	68e3      	ldr	r3, [r4, #12]
   d4800:	f24f 6218 	movw	r2, #63000	; 0xf618
   d4804:	1af3      	subs	r3, r6, r3
   d4806:	4293      	cmp	r3, r2
   d4808:	d904      	bls.n	d4814 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x98>
            internalReconnect();
   d480a:	4620      	mov	r0, r4
   d480c:	f7ff fd44 	bl	d4298 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   d4810:	2500      	movs	r5, #0
   d4812:	e7dd      	b.n	d47d0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   d4814:	f64a 72c8 	movw	r2, #45000	; 0xafc8
   d4818:	4293      	cmp	r3, r2
   d481a:	d803      	bhi.n	d4824 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   d481c:	6923      	ldr	r3, [r4, #16]
   d481e:	1af3      	subs	r3, r6, r3
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   d4820:	4293      	cmp	r3, r2
   d4822:	d9bc      	bls.n	d479e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   d4824:	6963      	ldr	r3, [r4, #20]
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   d4826:	f241 7270 	movw	r2, #6000	; 0x1770
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   d482a:	1af3      	subs	r3, r6, r3
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   d482c:	4293      	cmp	r3, r2
   d482e:	d9b6      	bls.n	d479e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
            sendCmd(BLYNK_CMD_PING);
   d4830:	2300      	movs	r3, #0
   d4832:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d4836:	9300      	str	r3, [sp, #0]
   d4838:	461a      	mov	r2, r3
   d483a:	2106      	movs	r1, #6
   d483c:	4620      	mov	r0, r4
   d483e:	f000 f93b 	bl	d4ab8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastHeartbeat = t;
   d4842:	6166      	str	r6, [r4, #20]
   d4844:	e7ab      	b.n	d479e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
    } else if (state == CONNECTING) {
   d4846:	2f00      	cmp	r7, #0
   d4848:	d1a9      	bne.n	d479e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
   d484a:	6962      	ldr	r2, [r4, #20]
   d484c:	1ab2      	subs	r2, r6, r2
        if (tconn && (t - lastLogin > BLYNK_TIMEOUT_MS)) {
   d484e:	b140      	cbz	r0, d4862 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xe6>
   d4850:	f241 7370 	movw	r3, #6000	; 0x1770
   d4854:	429a      	cmp	r2, r3
   d4856:	d9a2      	bls.n	d479e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
    void disconnect() { client.stop(); }
   d4858:	6820      	ldr	r0, [r4, #0]
   d485a:	f003 f83b 	bl	d78d4 <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   d485e:	7767      	strb	r7, [r4, #29]
   d4860:	e7d6      	b.n	d4810 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x94>
        } else if (!tconn && (t - lastLogin > 5000UL)) {
   d4862:	f241 3388 	movw	r3, #5000	; 0x1388
   d4866:	429a      	cmp	r2, r3
   d4868:	d999      	bls.n	d479e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
   d486a:	6820      	ldr	r0, [r4, #0]
   d486c:	f003 f832 	bl	d78d4 <_ZN9TCPClient4stopEv>
            if (!conn.connect()) {
   d4870:	f8d4 c000 	ldr.w	ip, [r4]
        if (domain) {
   d4874:	f8dc e034 	ldr.w	lr, [ip, #52]	; 0x34
   d4878:	f8bc 8038 	ldrh.w	r8, [ip, #56]	; 0x38
   d487c:	f1be 0f00 	cmp.w	lr, #0
   d4880:	d00b      	beq.n	d489a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x11e>
            return (1 == client.connect(domain, port));
   d4882:	462b      	mov	r3, r5
   d4884:	4642      	mov	r2, r8
   d4886:	4671      	mov	r1, lr
   d4888:	4660      	mov	r0, ip
   d488a:	f003 f881 	bl	d7990 <_ZN9TCPClient7connectEPKctm>
            return (1 == client.connect(addr, port));
   d488e:	1e43      	subs	r3, r0, #1
   d4890:	425d      	negs	r5, r3
   d4892:	415d      	adcs	r5, r3
   d4894:	b98d      	cbnz	r5, d48ba <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x13e>
                lastLogin = t;
   d4896:	6166      	str	r6, [r4, #20]
                return false;
   d4898:	e79a      	b.n	d47d0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d489a:	4b13      	ldr	r3, [pc, #76]	; (d48e8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x16c>)
   d489c:	9306      	str	r3, [sp, #24]
   d489e:	f10c 0720 	add.w	r7, ip, #32
   d48a2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   d48a4:	ad07      	add	r5, sp, #28
   d48a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d48a8:	683b      	ldr	r3, [r7, #0]
   d48aa:	702b      	strb	r3, [r5, #0]
   d48ac:	4642      	mov	r2, r8
   d48ae:	4673      	mov	r3, lr
   d48b0:	a906      	add	r1, sp, #24
   d48b2:	4660      	mov	r0, ip
   d48b4:	f002 ff39 	bl	d772a <_ZN9TCPClient7connectE9IPAddresstm>
   d48b8:	e7e9      	b.n	d488e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x112>
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   d48ba:	6863      	ldr	r3, [r4, #4]
   d48bc:	9305      	str	r3, [sp, #20]
            msgIdOut = 1;
   d48be:	2601      	movs	r6, #1
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   d48c0:	4618      	mov	r0, r3
            msgIdOut = 1;
   d48c2:	8326      	strh	r6, [r4, #24]
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   d48c4:	f004 fa78 	bl	d8db8 <strlen>
   d48c8:	2200      	movs	r2, #0
   d48ca:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d48ce:	9b05      	ldr	r3, [sp, #20]
   d48d0:	9000      	str	r0, [sp, #0]
   d48d2:	4632      	mov	r2, r6
   d48d4:	211d      	movs	r1, #29
   d48d6:	4620      	mov	r0, r4
   d48d8:	f000 f8ee 	bl	d4ab8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastLogin = lastActivityOut;
   d48dc:	6923      	ldr	r3, [r4, #16]
   d48de:	6163      	str	r3, [r4, #20]
            return true;
   d48e0:	e776      	b.n	d47d0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>
        return false;
   d48e2:	2500      	movs	r5, #0
   d48e4:	e777      	b.n	d47d6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x5a>
   d48e6:	bf00      	nop
   d48e8:	000d9618 	.word	0x000d9618

000d48ec <_ZN13BlynkParticle5beginEPKc9IPAddresst>:
        BlynkDelay(3000); // Give the board time to settle
        config(auth, domain, port);
        while(this->connect() != true) {}
    }

    void begin( const char* auth,
   d48ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d48f0:	4615      	mov	r5, r2
   d48f2:	b08c      	sub	sp, #48	; 0x30
   d48f4:	4604      	mov	r4, r0
   d48f6:	3504      	adds	r5, #4
                IPAddress addr,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        BlynkDelay(3000); // Give the board time to settle
   d48f8:	f640 30b8 	movw	r0, #3000	; 0xbb8
    void begin( const char* auth,
   d48fc:	460f      	mov	r7, r1
   d48fe:	4698      	mov	r8, r3
        BlynkDelay(3000); // Give the board time to settle
   d4900:	f001 f8ec 	bl	d5adc <_Z10BlynkDelaym>
   d4904:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4906:	ae01      	add	r6, sp, #4
   d4908:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d490a:	682b      	ldr	r3, [r5, #0]
   d490c:	7033      	strb	r3, [r6, #0]
        this->authkey = auth;
   d490e:	6067      	str	r7, [r4, #4]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   d4910:	f001 f8e6 	bl	d5ae0 <_Z11BlynkMillisv>
   d4914:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   d4918:	3808      	subs	r0, #8
   d491a:	af01      	add	r7, sp, #4
   d491c:	e9c4 0003 	strd	r0, r0, [r4, #12]
   d4920:	6160      	str	r0, [r4, #20]
   d4922:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   d4924:	ae07      	add	r6, sp, #28
   d4926:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d4928:	683b      	ldr	r3, [r7, #0]
   d492a:	7033      	strb	r3, [r6, #0]
   d492c:	af07      	add	r7, sp, #28
   d492e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
        this->conn.begin(addr, port);
   d4930:	6825      	ldr	r5, [r4, #0]
        domain = NULL;
   d4932:	f04f 0c00 	mov.w	ip, #0
   d4936:	f8c5 c034 	str.w	ip, [r5, #52]	; 0x34
        port = p;
   d493a:	f8a5 8038 	strh.w	r8, [r5, #56]	; 0x38
   d493e:	3520      	adds	r5, #32
   d4940:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4942:	6833      	ldr	r3, [r6, #0]
   d4944:	702b      	strb	r3, [r5, #0]
        state = CONNECTING;
   d4946:	4666      	mov	r6, ip
        while ((state != CONNECTED) &&
   d4948:	f244 674f 	movw	r7, #17999	; 0x464f
    void disconnect() { client.stop(); }
   d494c:	6820      	ldr	r0, [r4, #0]
   d494e:	f002 ffc1 	bl	d78d4 <_ZN9TCPClient4stopEv>
        state = CONNECTING;
   d4952:	7766      	strb	r6, [r4, #29]
        millis_time_t started = BlynkMillis();
   d4954:	f001 f8c4 	bl	d5ae0 <_Z11BlynkMillisv>
   d4958:	4605      	mov	r5, r0
        while ((state != CONNECTED) &&
   d495a:	7f63      	ldrb	r3, [r4, #29]
   d495c:	2b01      	cmp	r3, #1
   d495e:	d00c      	beq.n	d497a <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x8e>
               (BlynkMillis() - started < timeout))
   d4960:	f001 f8be 	bl	d5ae0 <_Z11BlynkMillisv>
   d4964:	1b40      	subs	r0, r0, r5
        while ((state != CONNECTED) &&
   d4966:	42b8      	cmp	r0, r7
   d4968:	d804      	bhi.n	d4974 <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x88>
            run();
   d496a:	2100      	movs	r1, #0
   d496c:	4620      	mov	r0, r4
   d496e:	f7ff ff05 	bl	d477c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
        while ((state != CONNECTED) &&
   d4972:	e7f2      	b.n	d495a <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x6e>
        config(auth, addr, port);
        while(this->connect() != true) {}
   d4974:	7f63      	ldrb	r3, [r4, #29]
   d4976:	2b01      	cmp	r3, #1
   d4978:	d1e8      	bne.n	d494c <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x60>
    }
   d497a:	b00c      	add	sp, #48	; 0x30
   d497c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4980 <setup>:
    // }
  }
}

void setup()
{
   d4980:	b530      	push	{r4, r5, lr}
   d4982:	b097      	sub	sp, #92	; 0x5c
  Serial.begin(9600);
   d4984:	f002 fc7e 	bl	d7284 <_Z16_fetch_usbserialv>
   d4988:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d498c:	f002 fc6e 	bl	d726c <_ZN9USBSerial5beginEl>
  Blynk.begin("W0CPcWAtiUAoJquOpPU_hkXKvNsr3xAQ", IPAddress(167, 172, 234, 162), 9090);
   d4990:	23a2      	movs	r3, #162	; 0xa2
   d4992:	9300      	str	r3, [sp, #0]
   d4994:	22ac      	movs	r2, #172	; 0xac
   d4996:	23ea      	movs	r3, #234	; 0xea
   d4998:	21a7      	movs	r1, #167	; 0xa7
   d499a:	a80d      	add	r0, sp, #52	; 0x34
   d499c:	f002 fbfa 	bl	d7194 <_ZN9IPAddressC1Ehhhh>
   d49a0:	f242 3382 	movw	r3, #9090	; 0x2382
   d49a4:	aa0d      	add	r2, sp, #52	; 0x34
   d49a6:	4938      	ldr	r1, [pc, #224]	; (d4a88 <setup+0x108>)
   d49a8:	4838      	ldr	r0, [pc, #224]	; (d4a8c <setup+0x10c>)
   d49aa:	f7ff ff9f 	bl	d48ec <_ZN13BlynkParticle5beginEPKc9IPAddresst>
  pinMode(D7, OUTPUT); //LED for interupts
   d49ae:	2101      	movs	r1, #1
   d49b0:	2007      	movs	r0, #7
   d49b2:	f003 f997 	bl	d7ce4 <pinMode>
  pinMode(A5, INPUT);  // TMP36

  os_thread_create(&thread1, "thread1", OS_THREAD_PRIORITY_DEFAULT, myThread1, NULL, 1024);
   d49b6:	2400      	movs	r4, #0
   d49b8:	f44f 6580 	mov.w	r5, #1024	; 0x400
  pinMode(A5, INPUT);  // TMP36
   d49bc:	2100      	movs	r1, #0
   d49be:	200e      	movs	r0, #14
   d49c0:	f003 f990 	bl	d7ce4 <pinMode>
  os_thread_create(&thread1, "thread1", OS_THREAD_PRIORITY_DEFAULT, myThread1, NULL, 1024);
   d49c4:	4b32      	ldr	r3, [pc, #200]	; (d4a90 <setup+0x110>)
   d49c6:	4933      	ldr	r1, [pc, #204]	; (d4a94 <setup+0x114>)
   d49c8:	4833      	ldr	r0, [pc, #204]	; (d4a98 <setup+0x118>)
   d49ca:	2202      	movs	r2, #2
   d49cc:	e9cd 4500 	strd	r4, r5, [sp]
   d49d0:	f001 f944 	bl	d5c5c <os_thread_create>
  os_thread_create(&thread1, "thread2", OS_THREAD_PRIORITY_DEFAULT, myThread2, NULL, 1024);
   d49d4:	4b31      	ldr	r3, [pc, #196]	; (d4a9c <setup+0x11c>)
   d49d6:	4932      	ldr	r1, [pc, #200]	; (d4aa0 <setup+0x120>)
   d49d8:	482f      	ldr	r0, [pc, #188]	; (d4a98 <setup+0x118>)
   d49da:	2202      	movs	r2, #2
   d49dc:	e9cd 4500 	strd	r4, r5, [sp]
   d49e0:	f001 f93c 	bl	d5c5c <os_thread_create>
  os_thread_create(&thread1, "thread3", OS_THREAD_PRIORITY_DEFAULT, myThread3, NULL, 1024);
   d49e4:	4b2f      	ldr	r3, [pc, #188]	; (d4aa4 <setup+0x124>)
   d49e6:	4930      	ldr	r1, [pc, #192]	; (d4aa8 <setup+0x128>)
   d49e8:	482b      	ldr	r0, [pc, #172]	; (d4a98 <setup+0x118>)
   d49ea:	2202      	movs	r2, #2
   d49ec:	e9cd 4500 	strd	r4, r5, [sp]
   d49f0:	f001 f934 	bl	d5c5c <os_thread_create>

  proximitySensor.begin();
   d49f4:	f003 fa08 	bl	d7e08 <_Z19__fetch_global_Wirev>
   d49f8:	4601      	mov	r1, r0
   d49fa:	482c      	ldr	r0, [pc, #176]	; (d4aac <setup+0x12c>)
   d49fc:	f000 fbaa 	bl	d5154 <_ZN8VCNL40405beginER7TwoWire>
  proximitySensor.powerOnProximity();
   d4a00:	482a      	ldr	r0, [pc, #168]	; (d4aac <setup+0x12c>)
   d4a02:	f000 fb5d 	bl	d50c0 <_ZN8VCNL404016powerOnProximityEv>
  proximitySensor.powerOnAmbient();
   d4a06:	4829      	ldr	r0, [pc, #164]	; (d4aac <setup+0x12c>)
   d4a08:	f000 fb37 	bl	d507a <_ZN8VCNL404014powerOnAmbientEv>

  if (proximitySensor.begin() == false)
   d4a0c:	f003 f9fc 	bl	d7e08 <_Z19__fetch_global_Wirev>
   d4a10:	4601      	mov	r1, r0
   d4a12:	4826      	ldr	r0, [pc, #152]	; (d4aac <setup+0x12c>)
   d4a14:	f000 fb9e 	bl	d5154 <_ZN8VCNL40405beginER7TwoWire>
   d4a18:	b928      	cbnz	r0, d4a26 <setup+0xa6>
  {
    Serial.println("Device not found. Please check wiring.");
   d4a1a:	f002 fc33 	bl	d7284 <_Z16_fetch_usbserialv>
   d4a1e:	4924      	ldr	r1, [pc, #144]	; (d4ab0 <setup+0x130>)
   d4a20:	f002 fa29 	bl	d6e76 <_ZN5Print7printlnEPKc>
    while (1); //Freeze!
   d4a24:	e7fe      	b.n	d4a24 <setup+0xa4>
  }

  BLE.on();
   d4a26:	f001 ff9f 	bl	d6968 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4a2a:	f001 ffbd 	bl	d69a8 <_ZNK8particle14BleLocalDevice2onEv>

  BleAdvertisingData data;
   d4a2e:	a80d      	add	r0, sp, #52	; 0x34
   d4a30:	f001 fecf 	bl	d67d2 <_ZN8particle18BleAdvertisingDataC1Ev>
  data.appendServiceUUID(serviceUuid);
   d4a34:	491f      	ldr	r1, [pc, #124]	; (d4ab4 <setup+0x134>)
   d4a36:	a803      	add	r0, sp, #12
   d4a38:	f001 fe32 	bl	d66a0 <_ZN8particle7BleUuidC1ERKS0_>
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   d4a3c:	a903      	add	r1, sp, #12
   d4a3e:	a808      	add	r0, sp, #32
   d4a40:	f001 fe2e 	bl	d66a0 <_ZN8particle7BleUuidC1ERKS0_>
        if (tempUUID.type() == BleUuidType::SHORT) {
   d4a44:	a808      	add	r0, sp, #32
   d4a46:	f001 fe38 	bl	d66ba <_ZNK8particle7BleUuid4typeEv>
   d4a4a:	4605      	mov	r5, r0
            uint16_t uuid16 = tempUUID.shorted();
   d4a4c:	a808      	add	r0, sp, #32
        if (tempUUID.type() == BleUuidType::SHORT) {
   d4a4e:	b99d      	cbnz	r5, d4a78 <setup+0xf8>
            uint16_t uuid16 = tempUUID.shorted();
   d4a50:	f001 fe35 	bl	d66be <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d4a54:	9500      	str	r5, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   d4a56:	f8ad 000a 	strh.w	r0, [sp, #10]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d4a5a:	2302      	movs	r3, #2
   d4a5c:	f10d 020a 	add.w	r2, sp, #10
   d4a60:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   d4a62:	a80d      	add	r0, sp, #52	; 0x34
   d4a64:	f001 feaa 	bl	d67bc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
  BLE.advertise(&data);
   d4a68:	f001 ff7e 	bl	d6968 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4a6c:	2200      	movs	r2, #0
   d4a6e:	a90d      	add	r1, sp, #52	; 0x34
   d4a70:	f001 ffba 	bl	d69e8 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
}
   d4a74:	b017      	add	sp, #92	; 0x5c
   d4a76:	bd30      	pop	{r4, r5, pc}
   d4a78:	f001 fe26 	bl	d66c8 <_ZNK8particle7BleUuid8rawBytesEv>
   d4a7c:	9400      	str	r4, [sp, #0]
   d4a7e:	4602      	mov	r2, r0
   d4a80:	2310      	movs	r3, #16
   d4a82:	2107      	movs	r1, #7
   d4a84:	e7ed      	b.n	d4a62 <setup+0xe2>
   d4a86:	bf00      	nop
   d4a88:	000d8f3c 	.word	0x000d8f3c
   d4a8c:	2003e51c 	.word	0x2003e51c
   d4a90:	000d40b9 	.word	0x000d40b9
   d4a94:	000d8f5d 	.word	0x000d8f5d
   d4a98:	2003e630 	.word	0x2003e630
   d4a9c:	000d4161 	.word	0x000d4161
   d4aa0:	000d8f65 	.word	0x000d8f65
   d4aa4:	000d4181 	.word	0x000d4181
   d4aa8:	000d8f6d 	.word	0x000d8f6d
   d4aac:	2003e61c 	.word	0x2003e61c
   d4ab0:	000d8f75 	.word	0x000d8f75
   d4ab4:	2003e53c 	.word	0x2003e53c

000d4ab8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>:
#ifndef BLYNK_SEND_CHUNK
#define BLYNK_SEND_CHUNK 1024 // Just a big number
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
   d4ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4abc:	b083      	sub	sp, #12
   d4abe:	af00      	add	r7, sp, #0
   d4ac0:	4604      	mov	r4, r0
    bool connected() { return client.connected(); }
   d4ac2:	6800      	ldr	r0, [r0, #0]
   d4ac4:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   d4ac6:	4688      	mov	r8, r1
   d4ac8:	4616      	mov	r6, r2
   d4aca:	4699      	mov	r9, r3
#endif
        internalReconnect();
        return;
    }

    lastActivityOut = BlynkMillis();
   d4acc:	46eb      	mov	fp, sp
   d4ace:	f002 fd1f 	bl	d7510 <_ZN9TCPClient9connectedEv>
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && cmd != BLYNK_CMD_HW_LOGIN && state != CONNECTED) ) {
   d4ad2:	2800      	cmp	r0, #0
   d4ad4:	d07f      	beq.n	d4bd6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
   d4ad6:	f1b8 0f1d 	cmp.w	r8, #29
   d4ada:	d804      	bhi.n	d4ae6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x2e>
   d4adc:	4b4c      	ldr	r3, [pc, #304]	; (d4c10 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x158>)
   d4ade:	fa23 f308 	lsr.w	r3, r3, r8
   d4ae2:	07db      	lsls	r3, r3, #31
   d4ae4:	d402      	bmi.n	d4aec <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x34>
   d4ae6:	7f63      	ldrb	r3, [r4, #29]
   d4ae8:	2b01      	cmp	r3, #1
   d4aea:	d174      	bne.n	d4bd6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
    if (0 == id) {
   d4aec:	b946      	cbnz	r6, d4b00 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x48>
}

template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
   d4aee:	8b66      	ldrh	r6, [r4, #26]
   d4af0:	b936      	cbnz	r6, d4b00 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x48>
        return msgIdOutOverride;
    if (++msgIdOut == 0)
   d4af2:	8b23      	ldrh	r3, [r4, #24]
   d4af4:	3301      	adds	r3, #1
   d4af6:	b29b      	uxth	r3, r3
   d4af8:	2b00      	cmp	r3, #0
   d4afa:	d071      	beq.n	d4be0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x128>
        msgIdOut = 1;
   d4afc:	8323      	strh	r3, [r4, #24]
    return msgIdOut;
   d4afe:	8b26      	ldrh	r6, [r4, #24]
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
   d4b00:	f1a8 030c 	sub.w	r3, r8, #12
   d4b04:	2b08      	cmp	r3, #8
   d4b06:	d816      	bhi.n	d4b36 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
        const millis_time_t allowed_time = BlynkMax(lastActivityOut, lastActivityIn) + 1000/BLYNK_MSG_LIMIT;
   d4b08:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   d4b0c:	4293      	cmp	r3, r2
   d4b0e:	bf38      	it	cc
   d4b10:	4613      	movcc	r3, r2
   d4b12:	f103 0a42 	add.w	sl, r3, #66	; 0x42
        int32_t wait_time = allowed_time - BlynkMillis();
   d4b16:	f000 ffe3 	bl	d5ae0 <_Z11BlynkMillisv>
   d4b1a:	ebaa 0000 	sub.w	r0, sl, r0
        if (wait_time >= 0) {
   d4b1e:	2800      	cmp	r0, #0
   d4b20:	db60      	blt.n	d4be4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x12c>
                run();
   d4b22:	2100      	movs	r1, #0
   d4b24:	4620      	mov	r0, r4
   d4b26:	f7ff fe29 	bl	d477c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
                wait_time = allowed_time - BlynkMillis();
   d4b2a:	f000 ffd9 	bl	d5ae0 <_Z11BlynkMillisv>
   d4b2e:	ebaa 0000 	sub.w	r0, sl, r0
            while (wait_time >= 0) {
   d4b32:	2800      	cmp	r0, #0
   d4b34:	daf5      	bge.n	d4b22 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x6a>
    const size_t full_length = (sizeof(BlynkHeader)) +
   d4b36:	f1b9 0f00 	cmp.w	r9, #0
   d4b3a:	d05a      	beq.n	d4bf2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13a>
   d4b3c:	1d6b      	adds	r3, r5, #5
                               (data  ? length  : 0) +
   d4b3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   d4b40:	2a00      	cmp	r2, #0
   d4b42:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d4b44:	bf08      	it	eq
   d4b46:	2200      	moveq	r2, #0
    const size_t full_length = (sizeof(BlynkHeader)) +
   d4b48:	eb03 0a02 	add.w	sl, r3, r2
    uint8_t buff[full_length];
   d4b4c:	f10a 0307 	add.w	r3, sl, #7
   d4b50:	f023 0307 	bic.w	r3, r3, #7
   d4b54:	ebad 0d03 	sub.w	sp, sp, r3
    hdr->length = htons(length+length2);
   d4b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    uint8_t buff[full_length];
   d4b5a:	f8c7 d004 	str.w	sp, [r7, #4]
    hdr->length = htons(length+length2);
   d4b5e:	18ea      	adds	r2, r5, r3
   d4b60:	f3c2 2307 	ubfx	r3, r2, #8, #8
    hdr->msg_id = htons(id);
   d4b64:	ba76      	rev16	r6, r6
    hdr->length = htons(length+length2);
   d4b66:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hdr->type = cmd;
   d4b6a:	f88d 8000 	strb.w	r8, [sp]
    hdr->msg_id = htons(id);
   d4b6e:	f8ad 6001 	strh.w	r6, [sp, #1]
    hdr->length = htons(length+length2);
   d4b72:	f8ad 3003 	strh.w	r3, [sp, #3]
    if (data && length) {
   d4b76:	f1b9 0f00 	cmp.w	r9, #0
   d4b7a:	d03c      	beq.n	d4bf6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
   d4b7c:	2d00      	cmp	r5, #0
   d4b7e:	d03a      	beq.n	d4bf6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
        memcpy(buff + pos, data, length);
   d4b80:	462a      	mov	r2, r5
   d4b82:	4649      	mov	r1, r9
   d4b84:	f10d 0005 	add.w	r0, sp, #5
   d4b88:	f004 f8b8 	bl	d8cfc <memcpy>
        pos += length;
   d4b8c:	1d68      	adds	r0, r5, #5
    if (data2 && length2) {
   d4b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   d4b90:	b13b      	cbz	r3, d4ba2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xea>
   d4b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   d4b94:	b12b      	cbz	r3, d4ba2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xea>
        memcpy(buff + pos, data2, length2);
   d4b96:	461a      	mov	r2, r3
   d4b98:	687b      	ldr	r3, [r7, #4]
   d4b9a:	6b79      	ldr	r1, [r7, #52]	; 0x34
   d4b9c:	4418      	add	r0, r3
   d4b9e:	f004 f8ad 	bl	d8cfc <memcpy>
    size_t pos = sizeof(BlynkHeader);
   d4ba2:	2500      	movs	r5, #0
    while (wlen < full_length) {
   d4ba4:	4555      	cmp	r5, sl
   d4ba6:	d22a      	bcs.n	d4bfe <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x146>
        const size_t chunk = BlynkMin(size_t(BLYNK_SEND_CHUNK), full_length - wlen);
   d4ba8:	ebaa 0205 	sub.w	r2, sl, r5
        return client.write((const uint8_t*)buf, len);
   d4bac:	687b      	ldr	r3, [r7, #4]
   d4bae:	6820      	ldr	r0, [r4, #0]
   d4bb0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   d4bb4:	bf28      	it	cs
   d4bb6:	f44f 6280 	movcs.w	r2, #1024	; 0x400
   d4bba:	1959      	adds	r1, r3, r5
   d4bbc:	f002 fc92 	bl	d74e4 <_ZN9TCPClient5writeEPKhj>
   d4bc0:	4606      	mov	r6, r0
        BlynkDelay(BLYNK_SEND_THROTTLE);
   d4bc2:	2000      	movs	r0, #0
   d4bc4:	f000 ff8a 	bl	d5adc <_Z10BlynkDelaym>
        if (w == 0) {
   d4bc8:	b9be      	cbnz	r6, d4bfa <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x142>
    void disconnect() { client.stop(); }
   d4bca:	6820      	ldr	r0, [r4, #0]
   d4bcc:	f002 fe82 	bl	d78d4 <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   d4bd0:	7766      	strb	r6, [r4, #29]
            BlynkOnDisconnected();
   d4bd2:	f000 ff89 	bl	d5ae8 <BlynkNoOpCbk>
}
   d4bd6:	370c      	adds	r7, #12
   d4bd8:	46dd      	mov	sp, fp
   d4bda:	46bd      	mov	sp, r7
   d4bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        msgIdOut = 1;
   d4be0:	2301      	movs	r3, #1
   d4be2:	e78b      	b.n	d4afc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
        } else if (nesting == 0) {
   d4be4:	7f21      	ldrb	r1, [r4, #28]
   d4be6:	2900      	cmp	r1, #0
   d4be8:	d1a5      	bne.n	d4b36 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
            run();
   d4bea:	4620      	mov	r0, r4
   d4bec:	f7ff fdc6 	bl	d477c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
   d4bf0:	e7a1      	b.n	d4b36 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
    const size_t full_length = (sizeof(BlynkHeader)) +
   d4bf2:	2305      	movs	r3, #5
   d4bf4:	e7a3      	b.n	d4b3e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x86>
    size_t pos = sizeof(BlynkHeader);
   d4bf6:	2005      	movs	r0, #5
   d4bf8:	e7c9      	b.n	d4b8e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xd6>
        wlen += w;
   d4bfa:	4435      	add	r5, r6
    while (wlen < full_length) {
   d4bfc:	e7d2      	b.n	d4ba4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xec>
    if (wlen != full_length) {
   d4bfe:	d003      	beq.n	d4c08 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x150>
        internalReconnect();
   d4c00:	4620      	mov	r0, r4
   d4c02:	f7ff fb49 	bl	d4298 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
        return;
   d4c06:	e7e6      	b.n	d4bd6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
    lastActivityOut = BlynkMillis();
   d4c08:	f000 ff6a 	bl	d5ae0 <_Z11BlynkMillisv>
   d4c0c:	6120      	str	r0, [r4, #16]
   d4c0e:	e7e2      	b.n	d4bd6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
   d4c10:	20000045 	.word	0x20000045

000d4c14 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>:
void BlynkApi<Proto>::sendInfo()
   d4c14:	b500      	push	{lr}
   d4c16:	b095      	sub	sp, #84	; 0x54
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, profile+8, profile_len, profile_dyn.getBuffer(), profile_dyn.getLength());
   d4c18:	ab04      	add	r3, sp, #16
   d4c1a:	2200      	movs	r2, #0
   d4c1c:	9301      	str	r3, [sp, #4]
   d4c1e:	2349      	movs	r3, #73	; 0x49
   d4c20:	9300      	str	r3, [sp, #0]
   d4c22:	9202      	str	r2, [sp, #8]
   d4c24:	4b03      	ldr	r3, [pc, #12]	; (d4c34 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x20>)
   d4c26:	2111      	movs	r1, #17
   d4c28:	f7ff ff46 	bl	d4ab8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
}
   d4c2c:	b015      	add	sp, #84	; 0x54
   d4c2e:	f85d fb04 	ldr.w	pc, [sp], #4
   d4c32:	bf00      	nop
   d4c34:	000d9098 	.word	0x000d9098

000d4c38 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJdEEEviDpT_>:
    void virtualWrite(int pin, Args... values) {
   d4c38:	b570      	push	{r4, r5, r6, lr}
   d4c3a:	ed2d 8b02 	vpush	{d8}
   d4c3e:	eeb0 8a40 	vmov.f32	s16, s0
   d4c42:	eef0 8a60 	vmov.f32	s17, s1
   d4c46:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
        : buff((char*)addr), len(length), buff_size(buffsize)
   d4c4a:	ab08      	add	r3, sp, #32
   d4c4c:	2400      	movs	r4, #0
   d4c4e:	4605      	mov	r5, r0
   d4c50:	460e      	mov	r6, r1
   d4c52:	9305      	str	r3, [sp, #20]
   d4c54:	a805      	add	r0, sp, #20
   d4c56:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d4c5a:	4913      	ldr	r1, [pc, #76]	; (d4ca8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJdEEEviDpT_+0x70>)
   d4c5c:	e9cd 4306 	strd	r4, r3, [sp, #24]
    if (str == NULL) {
   d4c60:	f7ff fa9e 	bl	d41a0 <_ZN10BlynkParam3addEPKc.part.0.constprop.0>
        cmd.add(pin);
   d4c64:	4631      	mov	r1, r6
   d4c66:	a805      	add	r0, sp, #20
   d4c68:	f7ff faf2 	bl	d4250 <_ZN10BlynkParam3addEi>
    }

    inline
    void BlynkParam::add(double value)
    {
        len += snprintf(buff+len, buff_size-len, "%2.7f", value)+1;
   d4c6c:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
   d4c70:	9805      	ldr	r0, [sp, #20]
   d4c72:	4a0e      	ldr	r2, [pc, #56]	; (d4cac <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJdEEEviDpT_+0x74>)
   d4c74:	1ac9      	subs	r1, r1, r3
   d4c76:	ed8d 8b00 	vstr	d8, [sp]
   d4c7a:	4418      	add	r0, r3
   d4c7c:	f001 fa22 	bl	d60c4 <snprintf>
   d4c80:	1c43      	adds	r3, r0, #1
   d4c82:	9806      	ldr	r0, [sp, #24]
   d4c84:	4403      	add	r3, r0
   d4c86:	9306      	str	r3, [sp, #24]
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   d4c88:	3b01      	subs	r3, #1
   d4c8a:	9300      	str	r3, [sp, #0]
   d4c8c:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d4c90:	9b05      	ldr	r3, [sp, #20]
   d4c92:	4622      	mov	r2, r4
   d4c94:	2114      	movs	r1, #20
   d4c96:	4628      	mov	r0, r5
   d4c98:	f7ff ff0e 	bl	d4ab8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d4c9c:	f50d 6d84 	add.w	sp, sp, #1056	; 0x420
   d4ca0:	ecbd 8b02 	vpop	{d8}
   d4ca4:	bd70      	pop	{r4, r5, r6, pc}
   d4ca6:	bf00      	nop
   d4ca8:	000d8f9c 	.word	0x000d8f9c
   d4cac:	000d8f9f 	.word	0x000d8f9f

000d4cb0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJjEEEviDpT_>:
    void virtualWrite(int pin, Args... values) {
   d4cb0:	b570      	push	{r4, r5, r6, lr}
   d4cb2:	f5ad 6d85 	sub.w	sp, sp, #1064	; 0x428
        : buff((char*)addr), len(length), buff_size(buffsize)
   d4cb6:	2400      	movs	r4, #0
   d4cb8:	9205      	str	r2, [sp, #20]
   d4cba:	aa0a      	add	r2, sp, #40	; 0x28
   d4cbc:	4605      	mov	r5, r0
   d4cbe:	460e      	mov	r6, r1
   d4cc0:	9207      	str	r2, [sp, #28]
   d4cc2:	a807      	add	r0, sp, #28
   d4cc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d4cc8:	4911      	ldr	r1, [pc, #68]	; (d4d10 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJjEEEviDpT_+0x60>)
   d4cca:	e9cd 4208 	strd	r4, r2, [sp, #32]
    if (str == NULL) {
   d4cce:	f7ff fa67 	bl	d41a0 <_ZN10BlynkParam3addEPKc.part.0.constprop.0>
        cmd.add(pin);
   d4cd2:	4631      	mov	r1, r6
   d4cd4:	a807      	add	r0, sp, #28
   d4cd6:	f7ff fabb 	bl	d4250 <_ZN10BlynkParam3addEi>
        len += snprintf(buff+len, buff_size-len, "%u", value)+1;
   d4cda:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   d4cde:	9e07      	ldr	r6, [sp, #28]
   d4ce0:	9b05      	ldr	r3, [sp, #20]
   d4ce2:	4a0c      	ldr	r2, [pc, #48]	; (d4d14 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJjEEEviDpT_+0x64>)
   d4ce4:	1a09      	subs	r1, r1, r0
   d4ce6:	4430      	add	r0, r6
   d4ce8:	f001 f9ec 	bl	d60c4 <snprintf>
   d4cec:	1c43      	adds	r3, r0, #1
   d4cee:	9808      	ldr	r0, [sp, #32]
   d4cf0:	4403      	add	r3, r0
   d4cf2:	9308      	str	r3, [sp, #32]
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   d4cf4:	3b01      	subs	r3, #1
   d4cf6:	9300      	str	r3, [sp, #0]
   d4cf8:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d4cfc:	9b07      	ldr	r3, [sp, #28]
   d4cfe:	4622      	mov	r2, r4
   d4d00:	2114      	movs	r1, #20
   d4d02:	4628      	mov	r0, r5
   d4d04:	f7ff fed8 	bl	d4ab8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d4d08:	f50d 6d85 	add.w	sp, sp, #1064	; 0x428
   d4d0c:	bd70      	pop	{r4, r5, r6, pc}
   d4d0e:	bf00      	nop
   d4d10:	000d8f9c 	.word	0x000d8f9c
   d4d14:	000d8fa5 	.word	0x000d8fa5

000d4d18 <loop>:

void loop()
{
   d4d18:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  Blynk.run();
   d4d1a:	2100      	movs	r1, #0
   d4d1c:	483f      	ldr	r0, [pc, #252]	; (d4e1c <loop+0x104>)
   d4d1e:	f7ff fd2d 	bl	d477c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
  client.loop();
   d4d22:	483f      	ldr	r0, [pc, #252]	; (d4e20 <loop+0x108>)
   d4d24:	f000 fd67 	bl	d57f6 <_ZN4MQTT4loopEv>
  // if(interruptOccured == false){

    if (client.isConnected() && BLE.connected())
   d4d28:	483d      	ldr	r0, [pc, #244]	; (d4e20 <loop+0x108>)
   d4d2a:	f000 fb8c 	bl	d5446 <_ZN4MQTT11isConnectedEv>
   d4d2e:	2800      	cmp	r0, #0
   d4d30:	d045      	beq.n	d4dbe <loop+0xa6>
   d4d32:	f001 fe19 	bl	d6968 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4d36:	f001 fe6a 	bl	d6a0e <_ZNK8particle14BleLocalDevice9connectedEv>
   d4d3a:	2800      	cmp	r0, #0
   d4d3c:	d03f      	beq.n	d4dbe <loop+0xa6>
    {

      Blynk.virtualWrite(V0, temperature);  //update temp gauge on blynk
   d4d3e:	4e39      	ldr	r6, [pc, #228]	; (d4e24 <loop+0x10c>)
      Blynk.virtualWrite(V1, proxValue);    //update prox gauge on blynk
   d4d40:	4d39      	ldr	r5, [pc, #228]	; (d4e28 <loop+0x110>)
      Blynk.virtualWrite(V0, temperature);  //update temp gauge on blynk
   d4d42:	4836      	ldr	r0, [pc, #216]	; (d4e1c <loop+0x104>)
      Blynk.virtualWrite(V2, ambientValue); //update light gauge on blynk
   d4d44:	4c39      	ldr	r4, [pc, #228]	; (d4e2c <loop+0x114>)
      Blynk.virtualWrite(V0, temperature);  //update temp gauge on blynk
   d4d46:	ed96 0b00 	vldr	d0, [r6]
   d4d4a:	2100      	movs	r1, #0
   d4d4c:	f7ff ff74 	bl	d4c38 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJdEEEviDpT_>
      Blynk.virtualWrite(V1, proxValue);    //update prox gauge on blynk
   d4d50:	682a      	ldr	r2, [r5, #0]
   d4d52:	4832      	ldr	r0, [pc, #200]	; (d4e1c <loop+0x104>)
   d4d54:	2101      	movs	r1, #1
   d4d56:	f7ff ffab 	bl	d4cb0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJjEEEviDpT_>
      Blynk.virtualWrite(V2, ambientValue); //update light gauge on blynk
   d4d5a:	6822      	ldr	r2, [r4, #0]
   d4d5c:	482f      	ldr	r0, [pc, #188]	; (d4e1c <loop+0x104>)
   d4d5e:	2102      	movs	r1, #2
   d4d60:	f7ff ffa6 	bl	d4cb0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJjEEEviDpT_>

      client.publish("groupB/vishalTemp", (String)temperature);
   d4d64:	ed96 0b00 	vldr	d0, [r6]
   d4d68:	2106      	movs	r1, #6
   d4d6a:	4668      	mov	r0, sp
   d4d6c:	f001 fb72 	bl	d6454 <_ZN6StringC1Edi>
   d4d70:	9a00      	ldr	r2, [sp, #0]
   d4d72:	492f      	ldr	r1, [pc, #188]	; (d4e30 <loop+0x118>)
   d4d74:	482a      	ldr	r0, [pc, #168]	; (d4e20 <loop+0x108>)
   d4d76:	f000 fce2 	bl	d573e <_ZN4MQTT7publishEPKcS1_>
   d4d7a:	4668      	mov	r0, sp
   d4d7c:	f001 fae6 	bl	d634c <_ZN6StringD1Ev>
      client.publish("groupB/vishalProx", (String)proxValue);
   d4d80:	6829      	ldr	r1, [r5, #0]
   d4d82:	220a      	movs	r2, #10
   d4d84:	4668      	mov	r0, sp
   d4d86:	f001 fb52 	bl	d642e <_ZN6StringC1Ejh>
   d4d8a:	9a00      	ldr	r2, [sp, #0]
   d4d8c:	4929      	ldr	r1, [pc, #164]	; (d4e34 <loop+0x11c>)
   d4d8e:	4824      	ldr	r0, [pc, #144]	; (d4e20 <loop+0x108>)
   d4d90:	f000 fcd5 	bl	d573e <_ZN4MQTT7publishEPKcS1_>
   d4d94:	4668      	mov	r0, sp
   d4d96:	f001 fad9 	bl	d634c <_ZN6StringD1Ev>
      client.publish("groupB/vishalLux", (String)ambientValue);
   d4d9a:	6821      	ldr	r1, [r4, #0]
   d4d9c:	220a      	movs	r2, #10
   d4d9e:	4668      	mov	r0, sp
   d4da0:	f001 fb45 	bl	d642e <_ZN6StringC1Ejh>
   d4da4:	9a00      	ldr	r2, [sp, #0]
   d4da6:	4924      	ldr	r1, [pc, #144]	; (d4e38 <loop+0x120>)
   d4da8:	481d      	ldr	r0, [pc, #116]	; (d4e20 <loop+0x108>)
   d4daa:	f000 fcc8 	bl	d573e <_ZN4MQTT7publishEPKcS1_>
   d4dae:	4668      	mov	r0, sp
   d4db0:	f001 facc 	bl	d634c <_ZN6StringD1Ev>

      delay(1000);
   d4db4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
      client.subscribe("groupB/vishalLux");
    }

    else if(!BLE.connected()){
        client.publish("groupB/triggerInterrupt", "Vishal's BLE is disconnected");
        delay(2000);
   d4db8:	f002 f8c4 	bl	d6f44 <delay>
    }
  // }
   d4dbc:	e01d      	b.n	d4dfa <loop+0xe2>
    else if(!client.isConnected())
   d4dbe:	4818      	ldr	r0, [pc, #96]	; (d4e20 <loop+0x108>)
   d4dc0:	f000 fb41 	bl	d5446 <_ZN4MQTT11isConnectedEv>
   d4dc4:	b9d8      	cbnz	r0, d4dfe <loop+0xe6>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   d4dc6:	4668      	mov	r0, sp
   d4dc8:	f001 f954 	bl	d6074 <spark_deviceID>
      client.connect(System.deviceID());
   d4dcc:	9900      	ldr	r1, [sp, #0]
   d4dce:	4814      	ldr	r0, [pc, #80]	; (d4e20 <loop+0x108>)
   d4dd0:	f000 fc2a 	bl	d5628 <_ZN4MQTT7connectEPKc>
   d4dd4:	4668      	mov	r0, sp
   d4dd6:	f001 fab9 	bl	d634c <_ZN6StringD1Ev>
      client.subscribe("groupB/triggerInterrupt");
   d4dda:	4918      	ldr	r1, [pc, #96]	; (d4e3c <loop+0x124>)
   d4ddc:	4810      	ldr	r0, [pc, #64]	; (d4e20 <loop+0x108>)
   d4dde:	f000 fe52 	bl	d5a86 <_ZN4MQTT9subscribeEPKc>
      client.subscribe("groupB/vishalTemp");
   d4de2:	4913      	ldr	r1, [pc, #76]	; (d4e30 <loop+0x118>)
   d4de4:	480e      	ldr	r0, [pc, #56]	; (d4e20 <loop+0x108>)
   d4de6:	f000 fe4e 	bl	d5a86 <_ZN4MQTT9subscribeEPKc>
      client.subscribe("groupB/vishalProx");
   d4dea:	4912      	ldr	r1, [pc, #72]	; (d4e34 <loop+0x11c>)
   d4dec:	480c      	ldr	r0, [pc, #48]	; (d4e20 <loop+0x108>)
   d4dee:	f000 fe4a 	bl	d5a86 <_ZN4MQTT9subscribeEPKc>
      client.subscribe("groupB/vishalLux");
   d4df2:	4911      	ldr	r1, [pc, #68]	; (d4e38 <loop+0x120>)
   d4df4:	480a      	ldr	r0, [pc, #40]	; (d4e20 <loop+0x108>)
   d4df6:	f000 fe46 	bl	d5a86 <_ZN4MQTT9subscribeEPKc>
   d4dfa:	b004      	add	sp, #16
   d4dfc:	bd70      	pop	{r4, r5, r6, pc}
    else if(!BLE.connected()){
   d4dfe:	f001 fdb3 	bl	d6968 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4e02:	f001 fe04 	bl	d6a0e <_ZNK8particle14BleLocalDevice9connectedEv>
   d4e06:	2800      	cmp	r0, #0
   d4e08:	d1f7      	bne.n	d4dfa <loop+0xe2>
        client.publish("groupB/triggerInterrupt", "Vishal's BLE is disconnected");
   d4e0a:	4a0d      	ldr	r2, [pc, #52]	; (d4e40 <loop+0x128>)
   d4e0c:	490b      	ldr	r1, [pc, #44]	; (d4e3c <loop+0x124>)
   d4e0e:	4804      	ldr	r0, [pc, #16]	; (d4e20 <loop+0x108>)
   d4e10:	f000 fc95 	bl	d573e <_ZN4MQTT7publishEPKcS1_>
        delay(2000);
   d4e14:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4e18:	e7ce      	b.n	d4db8 <loop+0xa0>
   d4e1a:	bf00      	nop
   d4e1c:	2003e51c 	.word	0x2003e51c
   d4e20:	2003e5b8 	.word	0x2003e5b8
   d4e24:	2003e628 	.word	0x2003e628
   d4e28:	2003e618 	.word	0x2003e618
   d4e2c:	2003e5b4 	.word	0x2003e5b4
   d4e30:	000d8fa8 	.word	0x000d8fa8
   d4e34:	000d8fba 	.word	0x000d8fba
   d4e38:	000d8fcc 	.word	0x000d8fcc
   d4e3c:	000d8fdd 	.word	0x000d8fdd
   d4e40:	000d8ff5 	.word	0x000d8ff5

000d4e44 <_GLOBAL__sub_I_Blynk>:
   d4e44:	b573      	push	{r0, r1, r4, r5, r6, lr}
        : domain(NULL), port(0)
   d4e46:	4d1f      	ldr	r5, [pc, #124]	; (d4ec4 <_GLOBAL__sub_I_Blynk+0x80>)
#ifndef BlynkSimpleParticle_h
#define BlynkSimpleParticle_h

#include "BlynkParticle.h"

static BlynkTransportParticle _blynkTransport;
   d4e48:	4e1f      	ldr	r6, [pc, #124]	; (d4ec8 <_GLOBAL__sub_I_Blynk+0x84>)
SYSTEM_THREAD(ENABLED);
   d4e4a:	2100      	movs	r1, #0
   d4e4c:	2001      	movs	r0, #1
   d4e4e:	f001 f88d 	bl	d5f6c <system_thread_set_state>
   d4e52:	4628      	mov	r0, r5
   d4e54:	2400      	movs	r4, #0
   d4e56:	f002 fd87 	bl	d7968 <_ZN9TCPClientC1Ev>
   d4e5a:	f105 001c 	add.w	r0, r5, #28
   d4e5e:	f002 f955 	bl	d710c <_ZN9IPAddressC1Ev>
   d4e62:	636c      	str	r4, [r5, #52]	; 0x34
   d4e64:	872c      	strh	r4, [r5, #56]	; 0x38
   d4e66:	4632      	mov	r2, r6
   d4e68:	4918      	ldr	r1, [pc, #96]	; (d4ecc <_GLOBAL__sub_I_Blynk+0x88>)
   d4e6a:	4628      	mov	r0, r5
   d4e6c:	f002 fff4 	bl	d7e58 <__aeabi_atexit>
        , state(CONNECTING)
   d4e70:	4b17      	ldr	r3, [pc, #92]	; (d4ed0 <_GLOBAL__sub_I_Blynk+0x8c>)
MQTT client("lab.thewcl.com", 1883, callback);
   d4e72:	4918      	ldr	r1, [pc, #96]	; (d4ed4 <_GLOBAL__sub_I_Blynk+0x90>)
   d4e74:	619c      	str	r4, [r3, #24]
   d4e76:	e9c3 5400 	strd	r5, r4, [r3]
   d4e7a:	4d17      	ldr	r5, [pc, #92]	; (d4ed8 <_GLOBAL__sub_I_Blynk+0x94>)
   d4e7c:	839c      	strh	r4, [r3, #28]
   d4e7e:	e9c3 4402 	strd	r4, r4, [r3, #8]
   d4e82:	e9c3 4404 	strd	r4, r4, [r3, #16]
   d4e86:	f240 725b 	movw	r2, #1883	; 0x75b
   d4e8a:	4b14      	ldr	r3, [pc, #80]	; (d4edc <_GLOBAL__sub_I_Blynk+0x98>)
   d4e8c:	9400      	str	r4, [sp, #0]
   d4e8e:	4628      	mov	r0, r5
   d4e90:	f000 f9d0 	bl	d5234 <_ZN4MQTTC1EPctPFvS0_PhjEb>
   d4e94:	4632      	mov	r2, r6
   d4e96:	4912      	ldr	r1, [pc, #72]	; (d4ee0 <_GLOBAL__sub_I_Blynk+0x9c>)
   d4e98:	4628      	mov	r0, r5
   d4e9a:	f002 ffdd 	bl	d7e58 <__aeabi_atexit>
VCNL4040 proximitySensor;
   d4e9e:	4811      	ldr	r0, [pc, #68]	; (d4ee4 <_GLOBAL__sub_I_Blynk+0xa0>)
   d4ea0:	f000 f832 	bl	d4f08 <_ZN8VCNL4040C1Ev>
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   d4ea4:	4910      	ldr	r1, [pc, #64]	; (d4ee8 <_GLOBAL__sub_I_Blynk+0xa4>)
   d4ea6:	4811      	ldr	r0, [pc, #68]	; (d4eec <_GLOBAL__sub_I_Blynk+0xa8>)
   d4ea8:	f001 fc7c 	bl	d67a4 <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   d4eac:	4910      	ldr	r1, [pc, #64]	; (d4ef0 <_GLOBAL__sub_I_Blynk+0xac>)
   d4eae:	4811      	ldr	r0, [pc, #68]	; (d4ef4 <_GLOBAL__sub_I_Blynk+0xb0>)
   d4eb0:	f001 fc78 	bl	d67a4 <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   d4eb4:	4910      	ldr	r1, [pc, #64]	; (d4ef8 <_GLOBAL__sub_I_Blynk+0xb4>)
   d4eb6:	4811      	ldr	r0, [pc, #68]	; (d4efc <_GLOBAL__sub_I_Blynk+0xb8>)
   d4eb8:	b002      	add	sp, #8
   d4eba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   d4ebe:	f001 bc71 	b.w	d67a4 <_ZN8particle7BleUuidC1EPKc>
   d4ec2:	bf00      	nop
   d4ec4:	2003e550 	.word	0x2003e550
   d4ec8:	2003e518 	.word	0x2003e518
   d4ecc:	000d41d1 	.word	0x000d41d1
   d4ed0:	2003e51c 	.word	0x2003e51c
   d4ed4:	000d9012 	.word	0x000d9012
   d4ed8:	2003e5b8 	.word	0x2003e5b8
   d4edc:	000d40b7 	.word	0x000d40b7
   d4ee0:	000d5a8d 	.word	0x000d5a8d
   d4ee4:	2003e61c 	.word	0x2003e61c
   d4ee8:	000d9021 	.word	0x000d9021
   d4eec:	2003e53c 	.word	0x2003e53c
   d4ef0:	000d9046 	.word	0x000d9046
   d4ef4:	2003e58c 	.word	0x2003e58c
   d4ef8:	000d906b 	.word	0x000d906b
   d4efc:	2003e5a0 	.word	0x2003e5a0

000d4f00 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d4f00:	6803      	ldr	r3, [r0, #0]
   d4f02:	b2c9      	uxtb	r1, r1
   d4f04:	689b      	ldr	r3, [r3, #8]
   d4f06:	4718      	bx	r3

000d4f08 <_ZN8VCNL4040C1Ev>:
#define VCNL4040_WHITE_DATA 0x0A
#define VCNL4040_INT_FLAG 0x0B //Upper
#define VCNL4040_ID 0x0C

//Class constructor
VCNL4040::VCNL4040(void) {}
   d4f08:	4770      	bx	lr

000d4f0a <_ZN8VCNL404011isConnectedEv>:

  return (true);
}

//Test to see if the device is responding
boolean VCNL4040::isConnected(void) {
   d4f0a:	b510      	push	{r4, lr}
   d4f0c:	4604      	mov	r4, r0
  _i2cPort->beginTransmission((uint8_t)VCNL4040_ADDR);
   d4f0e:	2160      	movs	r1, #96	; 0x60
   d4f10:	6800      	ldr	r0, [r0, #0]
   d4f12:	f002 facf 	bl	d74b4 <_ZN7TwoWire17beginTransmissionEh>
  return (_i2cPort->endTransmission() == 0);
   d4f16:	6820      	ldr	r0, [r4, #0]
   d4f18:	f002 fad4 	bl	d74c4 <_ZN7TwoWire15endTransmissionEv>
}
   d4f1c:	fab0 f080 	clz	r0, r0
   d4f20:	0940      	lsrs	r0, r0, #5
   d4f22:	bd10      	pop	{r4, pc}

000d4f24 <_ZN8VCNL404011readCommandEh>:
  return (interruptFlags & VCNL4040_INT_FLAG_ALS_LOW);
}

//Reads two consecutive bytes from a given 'command code' location
uint16_t VCNL4040::readCommand(uint8_t commandCode)
{
   d4f24:	b538      	push	{r3, r4, r5, lr}
   d4f26:	4605      	mov	r5, r0
   d4f28:	460c      	mov	r4, r1
  _i2cPort->beginTransmission(VCNL4040_ADDR);
   d4f2a:	6800      	ldr	r0, [r0, #0]
   d4f2c:	2160      	movs	r1, #96	; 0x60
   d4f2e:	f002 fac1 	bl	d74b4 <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(commandCode);
   d4f32:	6828      	ldr	r0, [r5, #0]
   d4f34:	6803      	ldr	r3, [r0, #0]
   d4f36:	4621      	mov	r1, r4
   d4f38:	689b      	ldr	r3, [r3, #8]
   d4f3a:	4798      	blx	r3
  if (_i2cPort->endTransmission(false) != 0) //Send a restart command. Do not release bus.
   d4f3c:	6828      	ldr	r0, [r5, #0]
   d4f3e:	2100      	movs	r1, #0
   d4f40:	f002 fabc 	bl	d74bc <_ZN7TwoWire15endTransmissionEh>
   d4f44:	b108      	cbz	r0, d4f4a <_ZN8VCNL404011readCommandEh+0x26>
  {
    return (0); //Sensor did not ACK
   d4f46:	2000      	movs	r0, #0
    uint8_t msb = _i2cPort->read();
    return ((uint16_t)msb << 8 | lsb);
  }

  return (0); //Sensor did not respond
}
   d4f48:	bd38      	pop	{r3, r4, r5, pc}
  _i2cPort->requestFrom((uint8_t)VCNL4040_ADDR, (uint8_t)2);
   d4f4a:	6828      	ldr	r0, [r5, #0]
   d4f4c:	2202      	movs	r2, #2
   d4f4e:	2160      	movs	r1, #96	; 0x60
   d4f50:	f002 faad 	bl	d74ae <_ZN7TwoWire11requestFromEhj>
  if (_i2cPort->available())
   d4f54:	6828      	ldr	r0, [r5, #0]
   d4f56:	6803      	ldr	r3, [r0, #0]
   d4f58:	691b      	ldr	r3, [r3, #16]
   d4f5a:	4798      	blx	r3
   d4f5c:	2800      	cmp	r0, #0
   d4f5e:	d0f2      	beq.n	d4f46 <_ZN8VCNL404011readCommandEh+0x22>
    uint8_t lsb = _i2cPort->read();
   d4f60:	6828      	ldr	r0, [r5, #0]
   d4f62:	6803      	ldr	r3, [r0, #0]
   d4f64:	695b      	ldr	r3, [r3, #20]
   d4f66:	4798      	blx	r3
   d4f68:	4604      	mov	r4, r0
    uint8_t msb = _i2cPort->read();
   d4f6a:	6828      	ldr	r0, [r5, #0]
   d4f6c:	6803      	ldr	r3, [r0, #0]
   d4f6e:	695b      	ldr	r3, [r3, #20]
   d4f70:	4798      	blx	r3
    return ((uint16_t)msb << 8 | lsb);
   d4f72:	b2e4      	uxtb	r4, r4
   d4f74:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
   d4f78:	b280      	uxth	r0, r0
   d4f7a:	e7e5      	b.n	d4f48 <_ZN8VCNL404011readCommandEh+0x24>

000d4f7c <_ZN8VCNL404012getProximityEv>:
  return (readCommand(VCNL4040_PS_DATA));
   d4f7c:	2108      	movs	r1, #8
   d4f7e:	f7ff bfd1 	b.w	d4f24 <_ZN8VCNL404011readCommandEh>

000d4f82 <_ZN8VCNL404010getAmbientEv>:
  return (readCommand(VCNL4040_ALS_DATA));
   d4f82:	2109      	movs	r1, #9
   d4f84:	f7ff bfce 	b.w	d4f24 <_ZN8VCNL404011readCommandEh>

000d4f88 <_ZN8VCNL40405getIDEv>:
  return (readCommand(VCNL4040_ID));
   d4f88:	210c      	movs	r1, #12
   d4f8a:	f7ff bfcb 	b.w	d4f24 <_ZN8VCNL404011readCommandEh>

000d4f8e <_ZN8VCNL404012writeCommandEht>:

//Write two bytes to a given command code location (8 bits)
boolean VCNL4040::writeCommand(uint8_t commandCode, uint16_t value)
{
   d4f8e:	b570      	push	{r4, r5, r6, lr}
   d4f90:	4604      	mov	r4, r0
   d4f92:	460e      	mov	r6, r1
  _i2cPort->beginTransmission(VCNL4040_ADDR);
   d4f94:	6800      	ldr	r0, [r0, #0]
   d4f96:	2160      	movs	r1, #96	; 0x60
{
   d4f98:	4615      	mov	r5, r2
  _i2cPort->beginTransmission(VCNL4040_ADDR);
   d4f9a:	f002 fa8b 	bl	d74b4 <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(commandCode);
   d4f9e:	6820      	ldr	r0, [r4, #0]
   d4fa0:	6803      	ldr	r3, [r0, #0]
   d4fa2:	4631      	mov	r1, r6
   d4fa4:	689b      	ldr	r3, [r3, #8]
   d4fa6:	4798      	blx	r3
  _i2cPort->write(value & 0xFF); //LSB
   d4fa8:	b2e9      	uxtb	r1, r5
   d4faa:	6820      	ldr	r0, [r4, #0]
   d4fac:	f7ff ffa8 	bl	d4f00 <_ZN7TwoWire5writeEi>
  _i2cPort->write(value >> 8); //MSB
   d4fb0:	0a29      	lsrs	r1, r5, #8
   d4fb2:	6820      	ldr	r0, [r4, #0]
   d4fb4:	f7ff ffa4 	bl	d4f00 <_ZN7TwoWire5writeEi>
  if (_i2cPort->endTransmission() != 0)
   d4fb8:	6820      	ldr	r0, [r4, #0]
   d4fba:	f002 fa83 	bl	d74c4 <_ZN7TwoWire15endTransmissionEv>
  {
    return (false); //Sensor did not ACK
  }

  return (true);
}
   d4fbe:	fab0 f080 	clz	r0, r0
   d4fc2:	0940      	lsrs	r0, r0, #5
   d4fc4:	bd70      	pop	{r4, r5, r6, pc}

000d4fc6 <_ZN8VCNL404017writeCommandLowerEhh>:

//Given a command code (address) write to the lower byte without affecting the upper byte
boolean VCNL4040::writeCommandLower(uint8_t commandCode, uint8_t newValue)
{
   d4fc6:	b570      	push	{r4, r5, r6, lr}
   d4fc8:	4604      	mov	r4, r0
   d4fca:	460d      	mov	r5, r1
   d4fcc:	4616      	mov	r6, r2
  uint16_t commandValue = readCommand(commandCode);
   d4fce:	f7ff ffa9 	bl	d4f24 <_ZN8VCNL404011readCommandEh>
  commandValue &= 0xFF00; //Remove lower 8 bits
   d4fd2:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
  commandValue |= (uint16_t)newValue; //Mask in
  return (writeCommand(commandCode, commandValue));
   d4fd6:	ea40 0206 	orr.w	r2, r0, r6
   d4fda:	4629      	mov	r1, r5
   d4fdc:	4620      	mov	r0, r4
}
   d4fde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return (writeCommand(commandCode, commandValue));
   d4fe2:	f7ff bfd4 	b.w	d4f8e <_ZN8VCNL404012writeCommandEht>

000d4fe6 <_ZN8VCNL404017writeCommandUpperEhh>:

//Given a command code (address) write to the upper byte without affecting the lower byte
boolean VCNL4040::writeCommandUpper(uint8_t commandCode, uint8_t newValue)
{
   d4fe6:	b570      	push	{r4, r5, r6, lr}
   d4fe8:	4604      	mov	r4, r0
   d4fea:	460d      	mov	r5, r1
   d4fec:	4616      	mov	r6, r2
  uint16_t commandValue = readCommand(commandCode);
   d4fee:	f7ff ff99 	bl	d4f24 <_ZN8VCNL404011readCommandEh>
  commandValue &= 0x00FF; //Remove upper 8 bits
   d4ff2:	b2c0      	uxtb	r0, r0
  commandValue |= (uint16_t)newValue << 8; //Mask in
  return (writeCommand(commandCode, commandValue));
   d4ff4:	ea40 2206 	orr.w	r2, r0, r6, lsl #8
   d4ff8:	4629      	mov	r1, r5
   d4ffa:	4620      	mov	r0, r4
}
   d4ffc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return (writeCommand(commandCode, commandValue));
   d5000:	f7ff bfc5 	b.w	d4f8e <_ZN8VCNL404012writeCommandEht>

000d5004 <_ZN8VCNL404016readCommandUpperEh>:
  return (commandValue & 0xFF);
}

//Given a command code (address) read the upper byte
uint8_t VCNL4040::readCommandUpper(uint8_t commandCode)
{
   d5004:	b508      	push	{r3, lr}
  uint16_t commandValue = readCommand(commandCode);
   d5006:	f7ff ff8d 	bl	d4f24 <_ZN8VCNL404011readCommandEh>
  return (commandValue >> 8);
}
   d500a:	f3c0 2007 	ubfx	r0, r0, #8, #8
   d500e:	bd08      	pop	{r3, pc}

000d5010 <_ZN8VCNL40407bitMaskEhbhh>:
//commandHeight is used to select between the upper or lower byte of command register
//Example:
//Write dutyValue into PS_CONF1, lower byte, using the Duty_Mask
//bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_DUTY_MASK, dutyValue);
void VCNL4040::bitMask(uint8_t commandAddress, boolean commandHeight, uint8_t mask, uint8_t thing)
{
   d5010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5014:	4604      	mov	r4, r0
   d5016:	f89d 7018 	ldrb.w	r7, [sp, #24]
   d501a:	460d      	mov	r5, r1
   d501c:	4698      	mov	r8, r3
  // Grab current register context
  uint8_t registerContents;
  if (commandHeight == LOWER) registerContents = readCommandLower(commandAddress);
   d501e:	4616      	mov	r6, r2
   d5020:	b16a      	cbz	r2, d503e <_ZN8VCNL40407bitMaskEhbhh+0x2e>
  uint16_t commandValue = readCommand(commandCode);
   d5022:	f7ff ff7f 	bl	d4f24 <_ZN8VCNL404011readCommandEh>
  return (commandValue & 0xFF);
   d5026:	b2c0      	uxtb	r0, r0
  else registerContents = readCommandUpper(commandAddress);

  // Zero-out the portions of the register we're interested in
  registerContents &= mask;
   d5028:	ea00 0308 	and.w	r3, r0, r8

  // Mask in new thing
  registerContents |= thing;
   d502c:	ea43 0207 	orr.w	r2, r3, r7

  // Change contents
  if (commandHeight == LOWER) writeCommandLower(commandAddress, registerContents);
   d5030:	4629      	mov	r1, r5
   d5032:	4620      	mov	r0, r4
   d5034:	b136      	cbz	r6, d5044 <_ZN8VCNL40407bitMaskEhbhh+0x34>
  else writeCommandUpper(commandAddress, registerContents);
}
   d5036:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  if (commandHeight == LOWER) writeCommandLower(commandAddress, registerContents);
   d503a:	f7ff bfc4 	b.w	d4fc6 <_ZN8VCNL404017writeCommandLowerEhh>
  else registerContents = readCommandUpper(commandAddress);
   d503e:	f7ff ffe1 	bl	d5004 <_ZN8VCNL404016readCommandUpperEh>
   d5042:	e7f1      	b.n	d5028 <_ZN8VCNL40407bitMaskEhbhh+0x18>
}
   d5044:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  else writeCommandUpper(commandAddress, registerContents);
   d5048:	f7ff bfcd 	b.w	d4fe6 <_ZN8VCNL404017writeCommandUpperEhh>

000d504c <_ZN8VCNL404014setIRDutyCycleEt>:
  if(dutyValue > 320 - 1) dutyValue = VCNL4040_PS_DUTY_320;
   d504c:	f5b1 7fa0 	cmp.w	r1, #320	; 0x140
{
   d5050:	b507      	push	{r0, r1, r2, lr}
  if(dutyValue > 320 - 1) dutyValue = VCNL4040_PS_DUTY_320;
   d5052:	d20e      	bcs.n	d5072 <_ZN8VCNL404014setIRDutyCycleEt+0x26>
  else if(dutyValue > 160 - 1) dutyValue = VCNL4040_PS_DUTY_160;
   d5054:	299f      	cmp	r1, #159	; 0x9f
   d5056:	d80e      	bhi.n	d5076 <_ZN8VCNL404014setIRDutyCycleEt+0x2a>
  else if(dutyValue > 80 - 1) dutyValue = VCNL4040_PS_DUTY_80;
   d5058:	294f      	cmp	r1, #79	; 0x4f
  else dutyValue = VCNL4040_PS_DUTY_40;
   d505a:	bf8c      	ite	hi
   d505c:	2340      	movhi	r3, #64	; 0x40
   d505e:	2300      	movls	r3, #0
  bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_DUTY_MASK, dutyValue);
   d5060:	9300      	str	r3, [sp, #0]
   d5062:	2201      	movs	r2, #1
   d5064:	233f      	movs	r3, #63	; 0x3f
   d5066:	2103      	movs	r1, #3
   d5068:	f7ff ffd2 	bl	d5010 <_ZN8VCNL40407bitMaskEhbhh>
}
   d506c:	b003      	add	sp, #12
   d506e:	f85d fb04 	ldr.w	pc, [sp], #4
  if(dutyValue > 320 - 1) dutyValue = VCNL4040_PS_DUTY_320;
   d5072:	23c0      	movs	r3, #192	; 0xc0
   d5074:	e7f4      	b.n	d5060 <_ZN8VCNL404014setIRDutyCycleEt+0x14>
  else if(dutyValue > 160 - 1) dutyValue = VCNL4040_PS_DUTY_160;
   d5076:	2380      	movs	r3, #128	; 0x80
   d5078:	e7f2      	b.n	d5060 <_ZN8VCNL404014setIRDutyCycleEt+0x14>

000d507a <_ZN8VCNL404014powerOnAmbientEv>:
{
   d507a:	b507      	push	{r0, r1, r2, lr}
  bitMask(VCNL4040_ALS_CONF, LOWER, VCNL4040_ALS_SD_MASK, VCNL4040_ALS_SD_POWER_ON);
   d507c:	2100      	movs	r1, #0
   d507e:	9100      	str	r1, [sp, #0]
   d5080:	23fe      	movs	r3, #254	; 0xfe
   d5082:	2201      	movs	r2, #1
   d5084:	f7ff ffc4 	bl	d5010 <_ZN8VCNL40407bitMaskEhbhh>
}
   d5088:	b003      	add	sp, #12
   d508a:	f85d fb04 	ldr.w	pc, [sp], #4

000d508e <_ZN8VCNL404022setProxIntegrationTimeEh>:
  if(timeValue > 8 - 1) timeValue = VCNL4040_PS_IT_8T;
   d508e:	2907      	cmp	r1, #7
{
   d5090:	b507      	push	{r0, r1, r2, lr}
  if(timeValue > 8 - 1) timeValue = VCNL4040_PS_IT_8T;
   d5092:	d80f      	bhi.n	d50b4 <_ZN8VCNL404022setProxIntegrationTimeEh+0x26>
  else if(timeValue > 4 - 1) timeValue = VCNL4040_PS_IT_4T;
   d5094:	2903      	cmp	r1, #3
   d5096:	d80f      	bhi.n	d50b8 <_ZN8VCNL404022setProxIntegrationTimeEh+0x2a>
  else if(timeValue > 3 - 1) timeValue = VCNL4040_PS_IT_3T;
   d5098:	d010      	beq.n	d50bc <_ZN8VCNL404022setProxIntegrationTimeEh+0x2e>
  else if(timeValue > 2 - 1) timeValue = VCNL4040_PS_IT_2T;
   d509a:	2902      	cmp	r1, #2
  else timeValue = VCNL4040_PS_IT_1T;
   d509c:	bf0c      	ite	eq
   d509e:	2304      	moveq	r3, #4
   d50a0:	2300      	movne	r3, #0
  bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_IT_MASK, timeValue);
   d50a2:	9300      	str	r3, [sp, #0]
   d50a4:	2201      	movs	r2, #1
   d50a6:	23f1      	movs	r3, #241	; 0xf1
   d50a8:	2103      	movs	r1, #3
   d50aa:	f7ff ffb1 	bl	d5010 <_ZN8VCNL40407bitMaskEhbhh>
}
   d50ae:	b003      	add	sp, #12
   d50b0:	f85d fb04 	ldr.w	pc, [sp], #4
  if(timeValue > 8 - 1) timeValue = VCNL4040_PS_IT_8T;
   d50b4:	230e      	movs	r3, #14
   d50b6:	e7f4      	b.n	d50a2 <_ZN8VCNL404022setProxIntegrationTimeEh+0x14>
  else if(timeValue > 4 - 1) timeValue = VCNL4040_PS_IT_4T;
   d50b8:	230c      	movs	r3, #12
   d50ba:	e7f2      	b.n	d50a2 <_ZN8VCNL404022setProxIntegrationTimeEh+0x14>
  else if(timeValue > 3 - 1) timeValue = VCNL4040_PS_IT_3T;
   d50bc:	2308      	movs	r3, #8
   d50be:	e7f0      	b.n	d50a2 <_ZN8VCNL404022setProxIntegrationTimeEh+0x14>

000d50c0 <_ZN8VCNL404016powerOnProximityEv>:
{
   d50c0:	b507      	push	{r0, r1, r2, lr}
  bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_SD_MASK, VCNL4040_PS_SD_POWER_ON);
   d50c2:	2300      	movs	r3, #0
   d50c4:	9300      	str	r3, [sp, #0]
   d50c6:	2201      	movs	r2, #1
   d50c8:	23fe      	movs	r3, #254	; 0xfe
   d50ca:	2103      	movs	r1, #3
   d50cc:	f7ff ffa0 	bl	d5010 <_ZN8VCNL40407bitMaskEhbhh>
}
   d50d0:	b003      	add	sp, #12
   d50d2:	f85d fb04 	ldr.w	pc, [sp], #4

000d50d6 <_ZN8VCNL404017setProxResolutionEh>:
{
   d50d6:	b507      	push	{r0, r1, r2, lr}
	if(resolutionValue > 16 - 1) resolutionValue = VCNL4040_PS_HD_16_BIT;
   d50d8:	290f      	cmp	r1, #15
	else resolutionValue = VCNL4040_PS_HD_12_BIT;
   d50da:	bf8c      	ite	hi
   d50dc:	2308      	movhi	r3, #8
   d50de:	2300      	movls	r3, #0
  bitMask(VCNL4040_PS_CONF2, UPPER, VCNL4040_PS_HD_MASK, resolutionValue);
   d50e0:	9300      	str	r3, [sp, #0]
   d50e2:	2200      	movs	r2, #0
   d50e4:	23f7      	movs	r3, #247	; 0xf7
   d50e6:	2103      	movs	r1, #3
   d50e8:	f7ff ff92 	bl	d5010 <_ZN8VCNL40407bitMaskEhbhh>
}
   d50ec:	b003      	add	sp, #12
   d50ee:	f85d fb04 	ldr.w	pc, [sp], #4

000d50f2 <_ZN8VCNL404022enableSmartPersistanceEv>:
{
   d50f2:	b507      	push	{r0, r1, r2, lr}
  bitMask(VCNL4040_PS_CONF3, LOWER, VCNL4040_PS_SMART_PERS_MASK, VCNL4040_PS_SMART_PERS_ENABLE);
   d50f4:	2302      	movs	r3, #2
   d50f6:	9300      	str	r3, [sp, #0]
   d50f8:	2201      	movs	r2, #1
   d50fa:	23ef      	movs	r3, #239	; 0xef
   d50fc:	2104      	movs	r1, #4
   d50fe:	f7ff ff87 	bl	d5010 <_ZN8VCNL40407bitMaskEhbhh>
}
   d5102:	b003      	add	sp, #12
   d5104:	f85d fb04 	ldr.w	pc, [sp], #4

000d5108 <_ZN8VCNL404013setLEDCurrentEh>:
	if(currentValue > 200 - 1) currentValue = VCNL4040_LED_200MA;
   d5108:	29c7      	cmp	r1, #199	; 0xc7
{
   d510a:	b507      	push	{r0, r1, r2, lr}
	if(currentValue > 200 - 1) currentValue = VCNL4040_LED_200MA;
   d510c:	d816      	bhi.n	d513c <_ZN8VCNL404013setLEDCurrentEh+0x34>
	else if(currentValue > 180 - 1) currentValue = VCNL4040_LED_180MA;
   d510e:	29b3      	cmp	r1, #179	; 0xb3
   d5110:	d816      	bhi.n	d5140 <_ZN8VCNL404013setLEDCurrentEh+0x38>
	else if(currentValue > 160 - 1) currentValue = VCNL4040_LED_160MA;
   d5112:	299f      	cmp	r1, #159	; 0x9f
   d5114:	d816      	bhi.n	d5144 <_ZN8VCNL404013setLEDCurrentEh+0x3c>
	else if(currentValue > 140 - 1) currentValue = VCNL4040_LED_140MA;
   d5116:	298b      	cmp	r1, #139	; 0x8b
   d5118:	d816      	bhi.n	d5148 <_ZN8VCNL404013setLEDCurrentEh+0x40>
	else if(currentValue > 120 - 1) currentValue = VCNL4040_LED_120MA;
   d511a:	2977      	cmp	r1, #119	; 0x77
   d511c:	d816      	bhi.n	d514c <_ZN8VCNL404013setLEDCurrentEh+0x44>
	else if(currentValue > 100 - 1) currentValue = VCNL4040_LED_100MA;
   d511e:	2963      	cmp	r1, #99	; 0x63
   d5120:	d816      	bhi.n	d5150 <_ZN8VCNL404013setLEDCurrentEh+0x48>
	if(currentValue > 200 - 1) currentValue = VCNL4040_LED_200MA;
   d5122:	294a      	cmp	r1, #74	; 0x4a
   d5124:	bf94      	ite	ls
   d5126:	2100      	movls	r1, #0
   d5128:	2101      	movhi	r1, #1
	bitMask(VCNL4040_PS_MS, UPPER, VCNL4040_LED_I_MASK, currentValue);
   d512a:	9100      	str	r1, [sp, #0]
   d512c:	23f8      	movs	r3, #248	; 0xf8
   d512e:	2200      	movs	r2, #0
   d5130:	2104      	movs	r1, #4
   d5132:	f7ff ff6d 	bl	d5010 <_ZN8VCNL40407bitMaskEhbhh>
}
   d5136:	b003      	add	sp, #12
   d5138:	f85d fb04 	ldr.w	pc, [sp], #4
	if(currentValue > 200 - 1) currentValue = VCNL4040_LED_200MA;
   d513c:	2107      	movs	r1, #7
   d513e:	e7f4      	b.n	d512a <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 180 - 1) currentValue = VCNL4040_LED_180MA;
   d5140:	2106      	movs	r1, #6
   d5142:	e7f2      	b.n	d512a <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 160 - 1) currentValue = VCNL4040_LED_160MA;
   d5144:	2105      	movs	r1, #5
   d5146:	e7f0      	b.n	d512a <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 140 - 1) currentValue = VCNL4040_LED_140MA;
   d5148:	2104      	movs	r1, #4
   d514a:	e7ee      	b.n	d512a <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 120 - 1) currentValue = VCNL4040_LED_120MA;
   d514c:	2103      	movs	r1, #3
   d514e:	e7ec      	b.n	d512a <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 100 - 1) currentValue = VCNL4040_LED_100MA;
   d5150:	2102      	movs	r1, #2
   d5152:	e7ea      	b.n	d512a <_ZN8VCNL404013setLEDCurrentEh+0x22>

000d5154 <_ZN8VCNL40405beginER7TwoWire>:
boolean VCNL4040::begin(TwoWire &wirePort) {
   d5154:	b538      	push	{r3, r4, r5, lr}
   d5156:	4604      	mov	r4, r0
   d5158:	4608      	mov	r0, r1
  _i2cPort = &wirePort; //Grab which port the user wants us to use
   d515a:	6021      	str	r1, [r4, #0]
  _i2cPort->begin();
   d515c:	f002 f978 	bl	d7450 <_ZN7TwoWire5beginEv>
  if (isConnected() == false) return (false); //I2C comm failure
   d5160:	4620      	mov	r0, r4
   d5162:	f7ff fed2 	bl	d4f0a <_ZN8VCNL404011isConnectedEv>
   d5166:	4605      	mov	r5, r0
   d5168:	b910      	cbnz	r0, d5170 <_ZN8VCNL40405beginER7TwoWire+0x1c>
   d516a:	2500      	movs	r5, #0
}
   d516c:	4628      	mov	r0, r5
   d516e:	bd38      	pop	{r3, r4, r5, pc}
  if (getID() != 0x0186) return (false); //Check default ID value
   d5170:	4620      	mov	r0, r4
   d5172:	f7ff ff09 	bl	d4f88 <_ZN8VCNL40405getIDEv>
   d5176:	f5b0 7fc3 	cmp.w	r0, #390	; 0x186
   d517a:	d1f6      	bne.n	d516a <_ZN8VCNL40405beginER7TwoWire+0x16>
  setLEDCurrent(200); //Max IR LED current
   d517c:	4620      	mov	r0, r4
   d517e:	21c8      	movs	r1, #200	; 0xc8
   d5180:	f7ff ffc2 	bl	d5108 <_ZN8VCNL404013setLEDCurrentEh>
  setIRDutyCycle(40); //Set to highest duty cycle
   d5184:	4620      	mov	r0, r4
   d5186:	2128      	movs	r1, #40	; 0x28
   d5188:	f7ff ff60 	bl	d504c <_ZN8VCNL404014setIRDutyCycleEt>
  setProxIntegrationTime(8); //Set to max integration
   d518c:	4620      	mov	r0, r4
   d518e:	2108      	movs	r1, #8
   d5190:	f7ff ff7d 	bl	d508e <_ZN8VCNL404022setProxIntegrationTimeEh>
  setProxResolution(16); //Set to 16-bit output
   d5194:	2110      	movs	r1, #16
   d5196:	4620      	mov	r0, r4
   d5198:	f7ff ff9d 	bl	d50d6 <_ZN8VCNL404017setProxResolutionEh>
  enableSmartPersistance(); //Turn on smart presistance
   d519c:	4620      	mov	r0, r4
   d519e:	f7ff ffa8 	bl	d50f2 <_ZN8VCNL404022enableSmartPersistanceEv>
  powerOnProximity(); //Turn on prox sensing
   d51a2:	4620      	mov	r0, r4
   d51a4:	f7ff ff8c 	bl	d50c0 <_ZN8VCNL404016powerOnProximityEv>
  return (true);
   d51a8:	e7e0      	b.n	d516c <_ZN8VCNL40405beginER7TwoWire+0x18>

000d51aa <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
   d51aa:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
   d51ae:	b510      	push	{r4, lr}
   d51b0:	4604      	mov	r4, r0
            this->mqtt = mqtt;
   d51b2:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
   d51b4:	b113      	cbz	r3, d51bc <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
   d51b6:	6d88      	ldr	r0, [r1, #88]	; 0x58
   d51b8:	f000 fd60 	bl	d5c7c <os_mutex_lock>
#endif
#endif
#endif
        }
   d51bc:	4620      	mov	r0, r4
   d51be:	bd10      	pop	{r4, pc}

000d51c0 <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
   d51c0:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
   d51c2:	6803      	ldr	r3, [r0, #0]
   d51c4:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
        ~MutexLocker() {
   d51c8:	4604      	mov	r4, r0
            if (mqtt->thread)
   d51ca:	b112      	cbz	r2, d51d2 <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
   d51cc:	6d98      	ldr	r0, [r3, #88]	; 0x58
   d51ce:	f000 fd5d 	bl	d5c8c <os_mutex_unlock>
#endif
#endif
#endif
        }
   d51d2:	4620      	mov	r0, r4
   d51d4:	bd10      	pop	{r4, pc}

000d51d6 <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
   d51d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d51d8:	461f      	mov	r7, r3
   d51da:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   d51de:	4604      	mov	r4, r0
   d51e0:	460d      	mov	r5, r1
   d51e2:	4616      	mov	r6, r2
    if (thread) {
   d51e4:	b12b      	cbz	r3, d51f2 <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb+0x1c>
        this->thread = true;
   d51e6:	2301      	movs	r3, #1
   d51e8:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        os_mutex_create(&mutex_lock);
   d51ec:	3058      	adds	r0, #88	; 0x58
   d51ee:	f000 fd3d 	bl	d5c6c <os_mutex_create>
    }
    this->callback = callback;
   d51f2:	9b08      	ldr	r3, [sp, #32]
   d51f4:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
   d51f6:	2300      	movs	r3, #0
   d51f8:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
   d51fa:	b106      	cbz	r6, d51fe <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb+0x28>
        this->ip = ip;
   d51fc:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
   d51fe:	b125      	cbz	r5, d520a <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb+0x34>
        this->domain = domain;
   d5200:	4629      	mov	r1, r5
   d5202:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d5206:	f001 f900 	bl	d640a <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   d520a:	9b06      	ldr	r3, [sp, #24]
   d520c:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   d520e:	9b07      	ldr	r3, [sp, #28]
    if (buffer != NULL)
   d5210:	69e0      	ldr	r0, [r4, #28]
    this->port = port;
   d5212:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   d5216:	2bff      	cmp	r3, #255	; 0xff
   d5218:	bfb8      	it	lt
   d521a:	23ff      	movlt	r3, #255	; 0xff
   d521c:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   d5220:	b108      	cbz	r0, d5226 <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb+0x50>
      delete[] buffer;
   d5222:	f7fe ff3e 	bl	d40a2 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   d5226:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   d522a:	f7fe ff36 	bl	d409a <_Znaj>
   d522e:	61e0      	str	r0, [r4, #28]
}
   d5230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d5234 <_ZN4MQTTC1EPctPFvS0_PhjEb>:
MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   d5234:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d5238:	4604      	mov	r4, r0
            bool thread) {
   d523a:	2500      	movs	r5, #0
MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   d523c:	4617      	mov	r7, r2
   d523e:	4698      	mov	r8, r3
   d5240:	460e      	mov	r6, r1
            bool thread) {
   d5242:	f002 fb91 	bl	d7968 <_ZN9TCPClientC1Ev>
   d5246:	490d      	ldr	r1, [pc, #52]	; (d527c <_ZN4MQTTC1EPctPFvS0_PhjEb+0x48>)
   d5248:	61e5      	str	r5, [r4, #28]
   d524a:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d524e:	f001 f8c8 	bl	d63e2 <_ZN6StringC1EPKc>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   d5252:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
            bool thread) {
   d5256:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   d5258:	e9cd 8302 	strd	r8, r3, [sp, #8]
   d525c:	22ff      	movs	r2, #255	; 0xff
   d525e:	230f      	movs	r3, #15
   d5260:	e9cd 3200 	strd	r3, r2, [sp]
   d5264:	4620      	mov	r0, r4
            bool thread) {
   d5266:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   d526a:	463b      	mov	r3, r7
   d526c:	462a      	mov	r2, r5
   d526e:	4631      	mov	r1, r6
   d5270:	f7ff ffb1 	bl	d51d6 <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb>
}
   d5274:	4620      	mov	r0, r4
   d5276:	b004      	add	sp, #16
   d5278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d527c:	000d95b8 	.word	0x000d95b8

000d5280 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   d5280:	b510      	push	{r4, lr}
   d5282:	4604      	mov	r4, r0
    while(!_client.available()) {}
   d5284:	4620      	mov	r0, r4
   d5286:	f002 facb 	bl	d7820 <_ZN9TCPClient9availableEv>
   d528a:	2800      	cmp	r0, #0
   d528c:	d0fa      	beq.n	d5284 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   d528e:	4620      	mov	r0, r4
   d5290:	f002 f9ff 	bl	d7692 <_ZN9TCPClient4readEv>
}
   d5294:	b2c0      	uxtb	r0, r0
   d5296:	bd10      	pop	{r4, pc}

000d5298 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   d5298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d529c:	4605      	mov	r5, r0
    uint16_t len = 0;
    buffer[len++] = readByte();
   d529e:	69c4      	ldr	r4, [r0, #28]
uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   d52a0:	460f      	mov	r7, r1
    buffer[len++] = readByte();
   d52a2:	f7ff ffed 	bl	d5280 <_ZN4MQTT8readByteEv>
   d52a6:	7020      	strb	r0, [r4, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   d52a8:	69eb      	ldr	r3, [r5, #28]
   d52aa:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   d52ae:	f04f 0901 	mov.w	r9, #1
   d52b2:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   d52b6:	f04f 0800 	mov.w	r8, #0
    buffer[len++] = readByte();
   d52ba:	464c      	mov	r4, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   d52bc:	4628      	mov	r0, r5
   d52be:	f7ff ffdf 	bl	d5280 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   d52c2:	4626      	mov	r6, r4
   d52c4:	69eb      	ldr	r3, [r5, #28]
   d52c6:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   d52c8:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   d52cc:	fb13 f309 	smulbb	r3, r3, r9
   d52d0:	4498      	add	r8, r3
        buffer[len++] = digit;
   d52d2:	3401      	adds	r4, #1
        multiplier *= 128;
    } while ((digit & 128) != 0);
   d52d4:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
   d52d6:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   d52d8:	fa1f f888 	uxth.w	r8, r8
        multiplier *= 128;
   d52dc:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   d52e0:	d4ec      	bmi.n	d52bc <_ZN4MQTT10readPacketEPh+0x24>
    *lengthLength = len-1;
   d52e2:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   d52e4:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
   d52e8:	703b      	strb	r3, [r7, #0]
    if (isPublish) {
   d52ea:	d124      	bne.n	d5336 <_ZN4MQTT10readPacketEPh+0x9e>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   d52ec:	4628      	mov	r0, r5
   d52ee:	69ef      	ldr	r7, [r5, #28]
   d52f0:	f7ff ffc6 	bl	d5280 <_ZN4MQTT8readByteEv>
   d52f4:	5538      	strb	r0, [r7, r4]
        buffer[len++] = readByte();
   d52f6:	4628      	mov	r0, r5
   d52f8:	69ef      	ldr	r7, [r5, #28]
   d52fa:	1cf4      	adds	r4, r6, #3
   d52fc:	f7ff ffc0 	bl	d5280 <_ZN4MQTT8readByteEv>
        buffer[len++] = readByte();
   d5300:	3602      	adds	r6, #2
        buffer[len++] = readByte();
   d5302:	b2b6      	uxth	r6, r6
   d5304:	b2a4      	uxth	r4, r4
   d5306:	55b8      	strb	r0, [r7, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   d5308:	2602      	movs	r6, #2
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   d530a:	b2b6      	uxth	r6, r6
   d530c:	46b1      	mov	r9, r6
   d530e:	4627      	mov	r7, r4
   d5310:	45c1      	cmp	r9, r8
   d5312:	d212      	bcs.n	d533a <_ZN4MQTT10readPacketEPh+0xa2>
        digit = readByte();
   d5314:	4628      	mov	r0, r5
   d5316:	f7ff ffb3 	bl	d5280 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   d531a:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   d531e:	42bb      	cmp	r3, r7
            buffer[len] = digit;
   d5320:	bf88      	it	hi
   d5322:	69eb      	ldrhi	r3, [r5, #28]
    for (uint16_t i = start;i<length;i++) {
   d5324:	f109 0901 	add.w	r9, r9, #1
            buffer[len] = digit;
   d5328:	bf88      	it	hi
   d532a:	55d8      	strbhi	r0, [r3, r7]
        }
        len++;
   d532c:	3701      	adds	r7, #1
   d532e:	b2bf      	uxth	r7, r7
    for (uint16_t i = start;i<length;i++) {
   d5330:	fa1f f989 	uxth.w	r9, r9
   d5334:	e7ec      	b.n	d5310 <_ZN4MQTT10readPacketEPh+0x78>
    uint8_t start = 0;
   d5336:	2600      	movs	r6, #0
   d5338:	e7e7      	b.n	d530a <_ZN4MQTT10readPacketEPh+0x72>
   d533a:	eba8 0006 	sub.w	r0, r8, r6
   d533e:	45b0      	cmp	r8, r6
   d5340:	bf2c      	ite	cs
   d5342:	4606      	movcs	r6, r0
   d5344:	2600      	movcc	r6, #0
   d5346:	4434      	add	r4, r6
    }

    if (len > this->maxpacketsize) {
   d5348:	f8b5 0054 	ldrh.w	r0, [r5, #84]	; 0x54
   d534c:	b2a4      	uxth	r4, r4
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   d534e:	42a0      	cmp	r0, r4
   d5350:	bf2c      	ite	cs
   d5352:	4620      	movcs	r0, r4
   d5354:	2000      	movcc	r0, #0
   d5356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d535a <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   d535a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d535c:	468c      	mov	ip, r1
   d535e:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   d5360:	461d      	mov	r5, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   d5362:	4607      	mov	r7, r0
    uint8_t llen = 0;
   d5364:	2300      	movs	r3, #0
    do {
        digit = len % 128;
   d5366:	46ae      	mov	lr, r5
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d5368:	a802      	add	r0, sp, #8
        digit = len % 128;
   d536a:	f005 017f 	and.w	r1, r5, #127	; 0x7f
        if (len > 0) {
   d536e:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   d5372:	f103 0401 	add.w	r4, r3, #1
   d5376:	4403      	add	r3, r0
            digit |= 0x80;
   d5378:	bf88      	it	hi
   d537a:	f041 0180 	orrhi.w	r1, r1, #128	; 0x80
        llen++;
    } while(len > 0);
   d537e:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   d5382:	ea4f 15d5 	mov.w	r5, r5, lsr #7
        lenBuf[pos++] = digit;
   d5386:	b2e4      	uxtb	r4, r4
   d5388:	f803 1c04 	strb.w	r1, [r3, #-4]
    } while(len > 0);
   d538c:	d810      	bhi.n	d53b0 <_ZN4MQTT5writeEhPht+0x56>

    buf[4-llen] = header;
   d538e:	f1c4 0304 	rsb	r3, r4, #4
   d5392:	18d1      	adds	r1, r2, r3
   d5394:	f802 c003 	strb.w	ip, [r2, r3]
    for (int i = 0; i < llen; i++) {
   d5398:	f1c4 0305 	rsb	r3, r4, #5
   d539c:	4413      	add	r3, r2
   d539e:	a801      	add	r0, sp, #4
   d53a0:	3205      	adds	r2, #5
   d53a2:	4293      	cmp	r3, r2
   d53a4:	d006      	beq.n	d53b4 <_ZN4MQTT5writeEhPht+0x5a>
        buf[5-llen+i] = lenBuf[i];
   d53a6:	f810 5b01 	ldrb.w	r5, [r0], #1
   d53aa:	f803 5b01 	strb.w	r5, [r3], #1
    for (int i = 0; i < llen; i++) {
   d53ae:	e7f8      	b.n	d53a2 <_ZN4MQTT5writeEhPht+0x48>
        lenBuf[pos++] = digit;
   d53b0:	4623      	mov	r3, r4
   d53b2:	e7d8      	b.n	d5366 <_ZN4MQTT5writeEhPht+0xc>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   d53b4:	1c72      	adds	r2, r6, #1
   d53b6:	4422      	add	r2, r4
   d53b8:	4638      	mov	r0, r7
   d53ba:	f002 f893 	bl	d74e4 <_ZN9TCPClient5writeEPKhj>
   d53be:	4605      	mov	r5, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d53c0:	f000 fc10 	bl	d5be4 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   d53c4:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   d53c6:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   d53c8:	4432      	add	r2, r6
   d53ca:	b2a8      	uxth	r0, r5
}
   d53cc:	1a13      	subs	r3, r2, r0
   d53ce:	4258      	negs	r0, r3
   d53d0:	4158      	adcs	r0, r3
   d53d2:	b003      	add	sp, #12
   d53d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d53d6 <_ZN4MQTT10disconnectEv>:
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
   d53d6:	b513      	push	{r0, r1, r4, lr}
   d53d8:	4604      	mov	r4, r0
    MutexLocker lock(this);
   d53da:	4601      	mov	r1, r0
   d53dc:	a801      	add	r0, sp, #4
   d53de:	f7ff fee4 	bl	d51aa <_ZN4MQTT11MutexLockerC1EPS_>
    buffer[0] = MQTTDISCONNECT;
   d53e2:	69e3      	ldr	r3, [r4, #28]
   d53e4:	22e0      	movs	r2, #224	; 0xe0
   d53e6:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
   d53e8:	69e3      	ldr	r3, [r4, #28]
   d53ea:	2200      	movs	r2, #0
   d53ec:	705a      	strb	r2, [r3, #1]
    _client.write(buffer,2);
   d53ee:	69e1      	ldr	r1, [r4, #28]
   d53f0:	2202      	movs	r2, #2
   d53f2:	4620      	mov	r0, r4
   d53f4:	f002 f876 	bl	d74e4 <_ZN9TCPClient5writeEPKhj>
    _client.stop();
   d53f8:	4620      	mov	r0, r4
   d53fa:	f002 fa6b 	bl	d78d4 <_ZN9TCPClient4stopEv>
   d53fe:	f000 fbf1 	bl	d5be4 <HAL_Timer_Get_Milli_Seconds>
    lastInActivity = lastOutActivity = millis();
   d5402:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
    MutexLocker lock(this);
   d5406:	a801      	add	r0, sp, #4
   d5408:	f7ff feda 	bl	d51c0 <_ZN4MQTT11MutexLockerD1Ev>
}
   d540c:	b002      	add	sp, #8
   d540e:	bd10      	pop	{r4, pc}

000d5410 <_ZN4MQTT11writeStringEPKcPht>:

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   d5410:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   d5412:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5414:	4604      	mov	r4, r0
    pos += 2;
   d5416:	b298      	uxth	r0, r3
   d5418:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
   d541a:	5ccd      	ldrb	r5, [r1, r3]
   d541c:	b155      	cbz	r5, d5434 <_ZN4MQTT11writeStringEPKcPht+0x24>
   d541e:	f8b4 6054 	ldrh.w	r6, [r4, #84]	; 0x54
   d5422:	4286      	cmp	r6, r0
   d5424:	f103 0701 	add.w	r7, r3, #1
   d5428:	d904      	bls.n	d5434 <_ZN4MQTT11writeStringEPKcPht+0x24>
        buf[pos++] = *idp++;
   d542a:	1c46      	adds	r6, r0, #1
   d542c:	5415      	strb	r5, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
   d542e:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
   d5430:	b2b0      	uxth	r0, r6
    while (*idp && pos < this->maxpacketsize) {
   d5432:	e7f2      	b.n	d541a <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   d5434:	b299      	uxth	r1, r3
   d5436:	1a44      	subs	r4, r0, r1
   d5438:	4422      	add	r2, r4
   d543a:	1209      	asrs	r1, r1, #8
   d543c:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   d5440:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
   d5444:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5446 <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   d5446:	b538      	push	{r3, r4, r5, lr}
   d5448:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
   d544a:	f002 f861 	bl	d7510 <_ZN9TCPClient9connectedEv>
   d544e:	2800      	cmp	r0, #0
   d5450:	bf14      	ite	ne
   d5452:	2501      	movne	r5, #1
   d5454:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
   d5456:	d102      	bne.n	d545e <_ZN4MQTT11isConnectedEv+0x18>
   d5458:	4620      	mov	r0, r4
   d545a:	f002 fa3b 	bl	d78d4 <_ZN9TCPClient4stopEv>
    return rc;
}
   d545e:	4628      	mov	r0, r5
   d5460:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5464 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   d5464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5468:	b088      	sub	sp, #32
   d546a:	4604      	mov	r4, r0
   d546c:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   d5470:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   d5474:	4689      	mov	r9, r1
   d5476:	4617      	mov	r7, r2
   d5478:	461e      	mov	r6, r3
    if (!isConnected()) {
   d547a:	f7ff ffe4 	bl	d5446 <_ZN4MQTT11isConnectedEv>
   d547e:	4605      	mov	r5, r0
   d5480:	2800      	cmp	r0, #0
   d5482:	f040 80cb 	bne.w	d561c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b8>
        MutexLocker lock(this);
   d5486:	4621      	mov	r1, r4
   d5488:	a801      	add	r0, sp, #4
   d548a:	f7ff fe8e 	bl	d51aa <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
   d548e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d5490:	2900      	cmp	r1, #0
   d5492:	f040 8087 	bne.w	d55a4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x140>
            result = _client.connect(this->domain.c_str(), this->port);
   d5496:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   d549a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d549c:	462b      	mov	r3, r5
   d549e:	4620      	mov	r0, r4
   d54a0:	f002 fa76 	bl	d7990 <_ZN9TCPClient7connectEPKctm>
        if (result) {
   d54a4:	2800      	cmp	r0, #0
   d54a6:	d079      	beq.n	d559c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x138>
            nextMsgId = 1;
   d54a8:	2301      	movs	r3, #1
   d54aa:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
   d54ac:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
   d54b0:	69e2      	ldr	r2, [r4, #28]
   d54b2:	2b04      	cmp	r3, #4
   d54b4:	f040 8081 	bne.w	d55ba <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x156>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d54b8:	4b59      	ldr	r3, [pc, #356]	; (d5620 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>)
   d54ba:	6818      	ldr	r0, [r3, #0]
   d54bc:	8899      	ldrh	r1, [r3, #4]
   d54be:	799b      	ldrb	r3, [r3, #6]
   d54c0:	f8ad 100c 	strh.w	r1, [sp, #12]
   d54c4:	f88d 300e 	strb.w	r3, [sp, #14]
   d54c8:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   d54ca:	f8c2 0005 	str.w	r0, [r2, #5]
   d54ce:	f89d 300e 	ldrb.w	r3, [sp, #14]
   d54d2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   d54d6:	f8a2 1009 	strh.w	r1, [r2, #9]
   d54da:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
   d54dc:	230c      	movs	r3, #12
            if (willTopic) {
   d54de:	f1b8 0f00 	cmp.w	r8, #0
   d54e2:	d07f      	beq.n	d55e4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x180>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   d54e4:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   d54e8:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   d54ec:	0140      	lsls	r0, r0, #5
   d54ee:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
   d54f2:	f040 0006 	orr.w	r0, r0, #6
   d54f6:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
   d54f8:	f1ba 0f00 	cmp.w	sl, #0
   d54fc:	d101      	bne.n	d5502 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x9e>
              v = v&0xfd;
   d54fe:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
   d5502:	b11f      	cbz	r7, d550c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa8>
                if(pass != NULL) {
   d5504:	2e00      	cmp	r6, #0
   d5506:	d16f      	bne.n	d55e8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = v|0x80;
   d5508:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
   d550c:	69e2      	ldr	r2, [r4, #28]
   d550e:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
   d5510:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d5512:	69e1      	ldr	r1, [r4, #28]
   d5514:	1c58      	adds	r0, r3, #1
   d5516:	1212      	asrs	r2, r2, #8
   d5518:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   d551a:	1c9a      	adds	r2, r3, #2
   d551c:	69e1      	ldr	r1, [r4, #28]
   d551e:	6d20      	ldr	r0, [r4, #80]	; 0x50
   d5520:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   d5522:	3303      	adds	r3, #3
   d5524:	69e2      	ldr	r2, [r4, #28]
   d5526:	4649      	mov	r1, r9
   d5528:	4620      	mov	r0, r4
   d552a:	f7ff ff71 	bl	d5410 <_ZN4MQTT11writeStringEPKcPht>
   d552e:	4603      	mov	r3, r0
            if (willTopic) {
   d5530:	f1b8 0f00 	cmp.w	r8, #0
   d5534:	d00b      	beq.n	d554e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xea>
                length = writeString(willTopic, buffer, length);
   d5536:	69e2      	ldr	r2, [r4, #28]
   d5538:	4641      	mov	r1, r8
   d553a:	4620      	mov	r0, r4
   d553c:	f7ff ff68 	bl	d5410 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   d5540:	69e2      	ldr	r2, [r4, #28]
   d5542:	9913      	ldr	r1, [sp, #76]	; 0x4c
                length = writeString(willTopic, buffer, length);
   d5544:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
   d5546:	4620      	mov	r0, r4
   d5548:	f7ff ff62 	bl	d5410 <_ZN4MQTT11writeStringEPKcPht>
   d554c:	4603      	mov	r3, r0
            if(user != NULL) {
   d554e:	b167      	cbz	r7, d556a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x106>
                length = writeString(user,buffer,length);
   d5550:	69e2      	ldr	r2, [r4, #28]
   d5552:	4639      	mov	r1, r7
   d5554:	4620      	mov	r0, r4
   d5556:	f7ff ff5b 	bl	d5410 <_ZN4MQTT11writeStringEPKcPht>
   d555a:	4603      	mov	r3, r0
                if(pass != NULL) {
   d555c:	b12e      	cbz	r6, d556a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x106>
                    length = writeString(pass,buffer,length);
   d555e:	69e2      	ldr	r2, [r4, #28]
   d5560:	4631      	mov	r1, r6
   d5562:	4620      	mov	r0, r4
   d5564:	f7ff ff54 	bl	d5410 <_ZN4MQTT11writeStringEPKcPht>
   d5568:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
   d556a:	3b05      	subs	r3, #5
   d556c:	69e2      	ldr	r2, [r4, #28]
   d556e:	b29b      	uxth	r3, r3
   d5570:	2110      	movs	r1, #16
   d5572:	4620      	mov	r0, r4
   d5574:	f7ff fef1 	bl	d535a <_ZN4MQTT5writeEhPht>
   d5578:	f000 fb34 	bl	d5be4 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   d557c:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
                if (t-lastInActivity > this->keepalive*1000UL) {
   d5580:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            while (!_client.available()) {
   d5584:	4620      	mov	r0, r4
   d5586:	f002 f94b 	bl	d7820 <_ZN9TCPClient9availableEv>
   d558a:	bb80      	cbnz	r0, d55ee <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18a>
   d558c:	f000 fb2a 	bl	d5be4 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
   d5590:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d5592:	1ac0      	subs	r0, r0, r3
   d5594:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d5596:	4373      	muls	r3, r6
   d5598:	4298      	cmp	r0, r3
   d559a:	d9f3      	bls.n	d5584 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x120>
        _client.stop();
   d559c:	4620      	mov	r0, r4
   d559e:	f002 f999 	bl	d78d4 <_ZN9TCPClient4stopEv>
   d55a2:	e034      	b.n	d560e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1aa>
            result = _client.connect(this->ip, this->port);
   d55a4:	a802      	add	r0, sp, #8
   d55a6:	f001 fe01 	bl	d71ac <_ZN9IPAddressC1EPKh>
   d55aa:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   d55ae:	462b      	mov	r3, r5
   d55b0:	a902      	add	r1, sp, #8
   d55b2:	4620      	mov	r0, r4
   d55b4:	f002 f8b9 	bl	d772a <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d55b8:	e774      	b.n	d54a4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   d55ba:	4b1a      	ldr	r3, [pc, #104]	; (d5624 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
   d55bc:	6818      	ldr	r0, [r3, #0]
   d55be:	6859      	ldr	r1, [r3, #4]
   d55c0:	7a1b      	ldrb	r3, [r3, #8]
   d55c2:	f10d 0c08 	add.w	ip, sp, #8
   d55c6:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   d55ca:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   d55ce:	ab02      	add	r3, sp, #8
   d55d0:	cb03      	ldmia	r3!, {r0, r1}
   d55d2:	f8c2 0005 	str.w	r0, [r2, #5]
   d55d6:	f8c2 1009 	str.w	r1, [r2, #9]
   d55da:	f89c 3000 	ldrb.w	r3, [ip]
   d55de:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
   d55e0:	230e      	movs	r3, #14
   d55e2:	e77c      	b.n	d54de <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
   d55e4:	2002      	movs	r0, #2
   d55e6:	e787      	b.n	d54f8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x94>
                    v = v|(0x80>>1);
   d55e8:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   d55ec:	e78e      	b.n	d550c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa8>
            uint16_t len = readPacket(&llen);
   d55ee:	a902      	add	r1, sp, #8
   d55f0:	4620      	mov	r0, r4
   d55f2:	f7ff fe51 	bl	d5298 <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
   d55f6:	2804      	cmp	r0, #4
   d55f8:	d1d0      	bne.n	d559c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x138>
                if (buffer[3] == CONN_ACCEPT) {
   d55fa:	69e3      	ldr	r3, [r4, #28]
   d55fc:	78de      	ldrb	r6, [r3, #3]
   d55fe:	2e00      	cmp	r6, #0
   d5600:	d1cc      	bne.n	d559c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x138>
   d5602:	f000 faef 	bl	d5be4 <HAL_Timer_Get_Milli_Seconds>
                    return true;
   d5606:	2501      	movs	r5, #1
                    lastInActivity = millis();
   d5608:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   d560a:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
   d560e:	a801      	add	r0, sp, #4
   d5610:	f7ff fdd6 	bl	d51c0 <_ZN4MQTT11MutexLockerD1Ev>
}
   d5614:	4628      	mov	r0, r5
   d5616:	b008      	add	sp, #32
   d5618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
   d561c:	2500      	movs	r5, #0
   d561e:	e7f9      	b.n	d5614 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b0>
   d5620:	000d90e3 	.word	0x000d90e3
   d5624:	000d90ea 	.word	0x000d90ea

000d5628 <_ZN4MQTT7connectEPKc>:
bool MQTT::connect(const char *id) {
   d5628:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
   d562a:	2301      	movs	r3, #1
   d562c:	2204      	movs	r2, #4
   d562e:	e9cd 3204 	strd	r3, r2, [sp, #16]
   d5632:	2300      	movs	r3, #0
   d5634:	e9cd 3302 	strd	r3, r3, [sp, #8]
   d5638:	e9cd 3300 	strd	r3, r3, [sp]
   d563c:	461a      	mov	r2, r3
   d563e:	f7ff ff11 	bl	d5464 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   d5642:	b007      	add	sp, #28
   d5644:	f85d fb04 	ldr.w	pc, [sp], #4

000d5648 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   d5648:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d564c:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   d5650:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
   d5654:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
   d5658:	4604      	mov	r4, r0
   d565a:	468b      	mov	fp, r1
   d565c:	4616      	mov	r6, r2
   d565e:	461f      	mov	r7, r3
    if (isConnected()) {
   d5660:	f7ff fef1 	bl	d5446 <_ZN4MQTT11isConnectedEv>
   d5664:	4682      	mov	sl, r0
   d5666:	2800      	cmp	r0, #0
   d5668:	d051      	beq.n	d570e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xc6>
        MutexLocker lock(this);
   d566a:	4621      	mov	r1, r4
   d566c:	a801      	add	r0, sp, #4
   d566e:	f7ff fd9c 	bl	d51aa <_ZN4MQTT11MutexLockerC1EPS_>
        memset(buffer, 0, this->maxpacketsize);
   d5672:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   d5676:	69e0      	ldr	r0, [r4, #28]
   d5678:	2100      	movs	r1, #0
   d567a:	f003 fb67 	bl	d8d4c <memset>
        length = writeString(topic, buffer, length);
   d567e:	2305      	movs	r3, #5
   d5680:	69e2      	ldr	r2, [r4, #28]
   d5682:	4659      	mov	r1, fp
   d5684:	4620      	mov	r0, r4
   d5686:	f7ff fec3 	bl	d5410 <_ZN4MQTT11writeStringEPKcPht>
        if (qos == QOS2 || qos == QOS1) {
   d568a:	1e6b      	subs	r3, r5, #1
   d568c:	2b01      	cmp	r3, #1
   d568e:	d815      	bhi.n	d56bc <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
            nextMsgId += 1;
   d5690:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   d5692:	69e3      	ldr	r3, [r4, #28]
            nextMsgId += 1;
   d5694:	3101      	adds	r1, #1
   d5696:	b289      	uxth	r1, r1
   d5698:	8421      	strh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   d569a:	1209      	asrs	r1, r1, #8
   d569c:	5419      	strb	r1, [r3, r0]
   d569e:	1c42      	adds	r2, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
   d56a0:	69e3      	ldr	r3, [r4, #28]
   d56a2:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   d56a4:	b292      	uxth	r2, r2
            buffer[length++] = (nextMsgId & 0xFF);
   d56a6:	3002      	adds	r0, #2
   d56a8:	5499      	strb	r1, [r3, r2]
   d56aa:	b280      	uxth	r0, r0
            if (messageid != NULL)
   d56ac:	f1b8 0f00 	cmp.w	r8, #0
   d56b0:	d004      	beq.n	d56bc <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
                *messageid = nextMsgId++;
   d56b2:	8c23      	ldrh	r3, [r4, #32]
   d56b4:	1c5a      	adds	r2, r3, #1
   d56b6:	8422      	strh	r2, [r4, #32]
   d56b8:	f8a8 3000 	strh.w	r3, [r8]
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   d56bc:	2100      	movs	r1, #0
   d56be:	180b      	adds	r3, r1, r0
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   d56c0:	428f      	cmp	r7, r1
   d56c2:	69e2      	ldr	r2, [r4, #28]
   d56c4:	b29b      	uxth	r3, r3
   d56c6:	d90a      	bls.n	d56de <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
   d56c8:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
   d56cc:	459c      	cmp	ip, r3
   d56ce:	d906      	bls.n	d56de <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            buffer[length++] = payload[i];
   d56d0:	f816 c001 	ldrb.w	ip, [r6, r1]
   d56d4:	f802 c003 	strb.w	ip, [r2, r3]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   d56d8:	3101      	adds	r1, #1
   d56da:	b289      	uxth	r1, r1
   d56dc:	e7ef      	b.n	d56be <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x76>
            header |= 1;
   d56de:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   d56e2:	2900      	cmp	r1, #0
   d56e4:	bf0c      	ite	eq
   d56e6:	2130      	moveq	r1, #48	; 0x30
   d56e8:	2131      	movne	r1, #49	; 0x31
        if (dup) {
   d56ea:	f1b9 0f00 	cmp.w	r9, #0
   d56ee:	d001      	beq.n	d56f4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xac>
            header |= DUP_FLAG_ON_MASK;
   d56f0:	f041 0108 	orr.w	r1, r1, #8
        if (qos == QOS2)
   d56f4:	2d02      	cmp	r5, #2
   d56f6:	d10e      	bne.n	d5716 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xce>
            header |= MQTTQOS2_HEADER_MASK;
   d56f8:	f041 0104 	orr.w	r1, r1, #4
        return write(header, buffer, length-5);
   d56fc:	3b05      	subs	r3, #5
   d56fe:	b29b      	uxth	r3, r3
   d5700:	4620      	mov	r0, r4
   d5702:	f7ff fe2a 	bl	d535a <_ZN4MQTT5writeEhPht>
   d5706:	4682      	mov	sl, r0
        MutexLocker lock(this);
   d5708:	a801      	add	r0, sp, #4
   d570a:	f7ff fd59 	bl	d51c0 <_ZN4MQTT11MutexLockerD1Ev>
}
   d570e:	4650      	mov	r0, sl
   d5710:	b003      	add	sp, #12
   d5712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (qos == QOS1)
   d5716:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   d5718:	bf08      	it	eq
   d571a:	f041 0102 	orreq.w	r1, r1, #2
   d571e:	e7ed      	b.n	d56fc <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xb4>

000d5720 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   d5720:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   d5722:	9c08      	ldr	r4, [sp, #32]
   d5724:	9403      	str	r4, [sp, #12]
   d5726:	2400      	movs	r4, #0
   d5728:	9402      	str	r4, [sp, #8]
   d572a:	f89d 401c 	ldrb.w	r4, [sp, #28]
   d572e:	9401      	str	r4, [sp, #4]
   d5730:	f89d 4018 	ldrb.w	r4, [sp, #24]
   d5734:	9400      	str	r4, [sp, #0]
   d5736:	f7ff ff87 	bl	d5648 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   d573a:	b004      	add	sp, #16
   d573c:	bd10      	pop	{r4, pc}

000d573e <_ZN4MQTT7publishEPKcS1_>:
bool MQTT::publish(const char* topic, const char* payload) {
   d573e:	b530      	push	{r4, r5, lr}
   d5740:	b087      	sub	sp, #28
   d5742:	4604      	mov	r4, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   d5744:	4610      	mov	r0, r2
bool MQTT::publish(const char* topic, const char* payload) {
   d5746:	9105      	str	r1, [sp, #20]
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   d5748:	9204      	str	r2, [sp, #16]
   d574a:	f003 fb35 	bl	d8db8 <strlen>
   d574e:	2500      	movs	r5, #0
   d5750:	4603      	mov	r3, r0
   d5752:	e9cd 5501 	strd	r5, r5, [sp, #4]
   d5756:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   d575a:	9500      	str	r5, [sp, #0]
   d575c:	4620      	mov	r0, r4
   d575e:	f7ff ffdf 	bl	d5720 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   d5762:	b007      	add	sp, #28
   d5764:	bd30      	pop	{r4, r5, pc}

000d5766 <_ZN4MQTT14publishReleaseEt>:
bool MQTT::publishRelease(uint16_t messageid) {
   d5766:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5768:	4604      	mov	r4, r0
   d576a:	460e      	mov	r6, r1
    if (isConnected()) {
   d576c:	f7ff fe6b 	bl	d5446 <_ZN4MQTT11isConnectedEv>
   d5770:	4605      	mov	r5, r0
   d5772:	b1c8      	cbz	r0, d57a8 <_ZN4MQTT14publishReleaseEt+0x42>
        MutexLocker lock(this);
   d5774:	4621      	mov	r1, r4
   d5776:	a801      	add	r0, sp, #4
   d5778:	f7ff fd17 	bl	d51aa <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   d577c:	69e3      	ldr	r3, [r4, #28]
   d577e:	2262      	movs	r2, #98	; 0x62
   d5780:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   d5782:	69e3      	ldr	r3, [r4, #28]
   d5784:	2202      	movs	r2, #2
   d5786:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   d5788:	69e3      	ldr	r3, [r4, #28]
   d578a:	1232      	asrs	r2, r6, #8
   d578c:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   d578e:	69e3      	ldr	r3, [r4, #28]
   d5790:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   d5792:	69e1      	ldr	r1, [r4, #28]
   d5794:	2204      	movs	r2, #4
   d5796:	4620      	mov	r0, r4
   d5798:	f001 fea4 	bl	d74e4 <_ZN9TCPClient5writeEPKhj>
   d579c:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   d579e:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   d57a0:	bf18      	it	ne
   d57a2:	2501      	movne	r5, #1
        MutexLocker lock(this);
   d57a4:	f7ff fd0c 	bl	d51c0 <_ZN4MQTT11MutexLockerD1Ev>
}
   d57a8:	4628      	mov	r0, r5
   d57aa:	b002      	add	sp, #8
   d57ac:	bd70      	pop	{r4, r5, r6, pc}

000d57ae <_ZN4MQTT15publishCompleteEt>:
bool MQTT::publishComplete(uint16_t messageid) {
   d57ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d57b0:	4604      	mov	r4, r0
   d57b2:	460e      	mov	r6, r1
    if (isConnected()) {
   d57b4:	f7ff fe47 	bl	d5446 <_ZN4MQTT11isConnectedEv>
   d57b8:	4605      	mov	r5, r0
   d57ba:	b1c8      	cbz	r0, d57f0 <_ZN4MQTT15publishCompleteEt+0x42>
        MutexLocker lock(this);
   d57bc:	4621      	mov	r1, r4
   d57be:	a801      	add	r0, sp, #4
   d57c0:	f7ff fcf3 	bl	d51aa <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   d57c4:	69e3      	ldr	r3, [r4, #28]
   d57c6:	2272      	movs	r2, #114	; 0x72
   d57c8:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   d57ca:	69e3      	ldr	r3, [r4, #28]
   d57cc:	2202      	movs	r2, #2
   d57ce:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   d57d0:	69e3      	ldr	r3, [r4, #28]
   d57d2:	1232      	asrs	r2, r6, #8
   d57d4:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   d57d6:	69e3      	ldr	r3, [r4, #28]
   d57d8:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   d57da:	69e1      	ldr	r1, [r4, #28]
   d57dc:	2204      	movs	r2, #4
   d57de:	4620      	mov	r0, r4
   d57e0:	f001 fe80 	bl	d74e4 <_ZN9TCPClient5writeEPKhj>
   d57e4:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   d57e6:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   d57e8:	bf18      	it	ne
   d57ea:	2501      	movne	r5, #1
        MutexLocker lock(this);
   d57ec:	f7ff fce8 	bl	d51c0 <_ZN4MQTT11MutexLockerD1Ev>
}
   d57f0:	4628      	mov	r0, r5
   d57f2:	b002      	add	sp, #8
   d57f4:	bd70      	pop	{r4, r5, r6, pc}

000d57f6 <_ZN4MQTT4loopEv>:
bool MQTT::loop() {
   d57f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d57fa:	ed2d 8b02 	vpush	{d8}
   d57fe:	b087      	sub	sp, #28
   d5800:	af00      	add	r7, sp, #0
   d5802:	4604      	mov	r4, r0
    if (isConnected()) {
   d5804:	f7ff fe1f 	bl	d5446 <_ZN4MQTT11isConnectedEv>
   d5808:	4681      	mov	r9, r0
   d580a:	b1f8      	cbz	r0, d584c <_ZN4MQTT4loopEv+0x56>
        MutexLocker lock(this);
   d580c:	4621      	mov	r1, r4
   d580e:	f107 0014 	add.w	r0, r7, #20
   d5812:	f7ff fcca 	bl	d51aa <_ZN4MQTT11MutexLockerC1EPS_>
   d5816:	f000 f9e5 	bl	d5be4 <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   d581a:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d581c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5820:	4353      	muls	r3, r2
   d5822:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   d5824:	1a82      	subs	r2, r0, r2
   d5826:	429a      	cmp	r2, r3
   d5828:	4606      	mov	r6, r0
   d582a:	d803      	bhi.n	d5834 <_ZN4MQTT4loopEv+0x3e>
   d582c:	6a62      	ldr	r2, [r4, #36]	; 0x24
   d582e:	1a82      	subs	r2, r0, r2
   d5830:	4293      	cmp	r3, r2
   d5832:	d221      	bcs.n	d5878 <_ZN4MQTT4loopEv+0x82>
            if (pingOutstanding) {
   d5834:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   d5838:	b17b      	cbz	r3, d585a <_ZN4MQTT4loopEv+0x64>
                _client.stop();
   d583a:	4620      	mov	r0, r4
   d583c:	f002 f84a 	bl	d78d4 <_ZN9TCPClient4stopEv>
                return false;
   d5840:	f04f 0900 	mov.w	r9, #0
        MutexLocker lock(this);
   d5844:	f107 0014 	add.w	r0, r7, #20
   d5848:	f7ff fcba 	bl	d51c0 <_ZN4MQTT11MutexLockerD1Ev>
}
   d584c:	4648      	mov	r0, r9
   d584e:	371c      	adds	r7, #28
   d5850:	46bd      	mov	sp, r7
   d5852:	ecbd 8b02 	vpop	{d8}
   d5856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
   d585a:	69e2      	ldr	r2, [r4, #28]
   d585c:	21c0      	movs	r1, #192	; 0xc0
   d585e:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   d5860:	69e2      	ldr	r2, [r4, #28]
   d5862:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   d5864:	69e1      	ldr	r1, [r4, #28]
   d5866:	2202      	movs	r2, #2
   d5868:	4620      	mov	r0, r4
   d586a:	f001 fe3b 	bl	d74e4 <_ZN9TCPClient5writeEPKhj>
                lastInActivity = t;
   d586e:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
                pingOutstanding = true;
   d5872:	2301      	movs	r3, #1
   d5874:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (_client.available()) {
   d5878:	4620      	mov	r0, r4
   d587a:	f001 ffd1 	bl	d7820 <_ZN9TCPClient9availableEv>
   d587e:	2800      	cmp	r0, #0
   d5880:	d0e0      	beq.n	d5844 <_ZN4MQTT4loopEv+0x4e>
            uint16_t len = readPacket(&llen);
   d5882:	f107 0113 	add.w	r1, r7, #19
   d5886:	4620      	mov	r0, r4
   d5888:	f7ff fd06 	bl	d5298 <_ZN4MQTT10readPacketEPh>
            if (len > 0) {
   d588c:	4683      	mov	fp, r0
   d588e:	2800      	cmp	r0, #0
   d5890:	d0d8      	beq.n	d5844 <_ZN4MQTT4loopEv+0x4e>
                uint8_t type = buffer[0]&0xF0;
   d5892:	69e3      	ldr	r3, [r4, #28]
                lastInActivity = t;
   d5894:	62a6      	str	r6, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   d5896:	7819      	ldrb	r1, [r3, #0]
   d5898:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   d589c:	2a30      	cmp	r2, #48	; 0x30
   d589e:	d17f      	bne.n	d59a0 <_ZN4MQTT4loopEv+0x1aa>
                    if (callback) {
   d58a0:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
   d58a4:	f1ba 0f00 	cmp.w	sl, #0
   d58a8:	d0cc      	beq.n	d5844 <_ZN4MQTT4loopEv+0x4e>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   d58aa:	f897 c013 	ldrb.w	ip, [r7, #19]
                        }
   d58ae:	466a      	mov	r2, sp
   d58b0:	ee08 2a10 	vmov	s16, r2
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   d58b4:	eb03 020c 	add.w	r2, r3, ip
   d58b8:	7855      	ldrb	r5, [r2, #1]
   d58ba:	7891      	ldrb	r1, [r2, #2]
   d58bc:	eb01 2105 	add.w	r1, r1, r5, lsl #8
   d58c0:	b28d      	uxth	r5, r1
                        char topic[tl+1];
   d58c2:	f105 0208 	add.w	r2, r5, #8
   d58c6:	4669      	mov	r1, sp
   d58c8:	08d2      	lsrs	r2, r2, #3
   d58ca:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
   d58ce:	4695      	mov	sp, r2
   d58d0:	f10c 0203 	add.w	r2, ip, #3
   d58d4:	60fa      	str	r2, [r7, #12]
   d58d6:	eb03 0e02 	add.w	lr, r3, r2
   d58da:	eb0d 0205 	add.w	r2, sp, r5
   d58de:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
   d58e0:	f8c7 d008 	str.w	sp, [r7, #8]
   d58e4:	607a      	str	r2, [r7, #4]
   d58e6:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
   d58ea:	428a      	cmp	r2, r1
   d58ec:	d006      	beq.n	d58fc <_ZN4MQTT4loopEv+0x106>
                            topic[i] = buffer[llen+3+i];
   d58ee:	460a      	mov	r2, r1
   d58f0:	f81e 8b01 	ldrb.w	r8, [lr], #1
   d58f4:	f802 8b01 	strb.w	r8, [r2], #1
   d58f8:	60ba      	str	r2, [r7, #8]
                        for (uint16_t i=0;i<tl;i++) {
   d58fa:	e7f4      	b.n	d58e6 <_ZN4MQTT4loopEv+0xf0>
                        topic[tl] = 0;
   d58fc:	2200      	movs	r2, #0
   d58fe:	5542      	strb	r2, [r0, r5]
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   d5900:	f893 8000 	ldrb.w	r8, [r3]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d5904:	68f9      	ldr	r1, [r7, #12]
   d5906:	f008 0806 	and.w	r8, r8, #6
   d590a:	ebab 020c 	sub.w	r2, fp, ip
   d590e:	3a03      	subs	r2, #3
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   d5910:	f1b8 0f02 	cmp.w	r8, #2
   d5914:	eba2 0205 	sub.w	r2, r2, r5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d5918:	4429      	add	r1, r5
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   d591a:	d125      	bne.n	d5968 <_ZN4MQTT4loopEv+0x172>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d591c:	f813 e001 	ldrb.w	lr, [r3, r1]
   d5920:	4419      	add	r1, r3
                            callback(topic,payload,len-llen-3-tl-2);
   d5922:	3a02      	subs	r2, #2
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d5924:	f891 b001 	ldrb.w	fp, [r1, #1]
                            payload = buffer+llen+3+tl+2;
   d5928:	f10c 0105 	add.w	r1, ip, #5
   d592c:	4429      	add	r1, r5
                            callback(topic,payload,len-llen-3-tl-2);
   d592e:	4419      	add	r1, r3
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d5930:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
   d5934:	47d0      	blx	sl
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   d5936:	69e3      	ldr	r3, [r4, #28]
   d5938:	2240      	movs	r2, #64	; 0x40
   d593a:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   d593c:	69e3      	ldr	r3, [r4, #28]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d593e:	fa1f fb8b 	uxth.w	fp, fp
                            buffer[1] = 2;
   d5942:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
   d5946:	69e3      	ldr	r3, [r4, #28]
   d5948:	ea4f 222b 	mov.w	r2, fp, asr #8
   d594c:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   d594e:	69e3      	ldr	r3, [r4, #28]
   d5950:	f883 b003 	strb.w	fp, [r3, #3]
                            _client.write(buffer,4);
   d5954:	69e1      	ldr	r1, [r4, #28]
   d5956:	2204      	movs	r2, #4
   d5958:	4620      	mov	r0, r4
   d595a:	f001 fdc3 	bl	d74e4 <_ZN9TCPClient5writeEPKhj>
                            lastOutActivity = t;
   d595e:	6266      	str	r6, [r4, #36]	; 0x24
   d5960:	ee18 3a10 	vmov	r3, s16
   d5964:	469d      	mov	sp, r3
   d5966:	e76d      	b.n	d5844 <_ZN4MQTT4loopEv+0x4e>
                                    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   d5968:	f1b8 0f04 	cmp.w	r8, #4
   d596c:	d115      	bne.n	d599a <_ZN4MQTT4loopEv+0x1a4>
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d596e:	f813 e001 	ldrb.w	lr, [r3, r1]
   d5972:	4419      	add	r1, r3
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   d5974:	3a02      	subs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d5976:	f891 b001 	ldrb.w	fp, [r1, #1]
                                        payload = buffer + llen + 3 + tl + 2;
   d597a:	f10c 0105 	add.w	r1, ip, #5
   d597e:	4429      	add	r1, r5
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   d5980:	4419      	add	r1, r3
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d5982:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   d5986:	47d0      	blx	sl
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
   d5988:	69e3      	ldr	r3, [r4, #28]
   d598a:	2250      	movs	r2, #80	; 0x50
   d598c:	701a      	strb	r2, [r3, #0]
                                        buffer[1] = 2;
   d598e:	69e3      	ldr	r3, [r4, #28]
   d5990:	2202      	movs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d5992:	fa1f fb8b 	uxth.w	fp, fp
                                        buffer[1] = 2;
   d5996:	705a      	strb	r2, [r3, #1]
                                        buffer[2] = (msgId >> 8);
   d5998:	e7d5      	b.n	d5946 <_ZN4MQTT4loopEv+0x150>
                            callback(topic,payload,len-llen-3-tl);
   d599a:	4419      	add	r1, r3
   d599c:	47d0      	blx	sl
   d599e:	e7df      	b.n	d5960 <_ZN4MQTT4loopEv+0x16a>
                } else if (type == MQTTPUBREC) {
   d59a0:	2a50      	cmp	r2, #80	; 0x50
   d59a2:	d108      	bne.n	d59b6 <_ZN4MQTT4loopEv+0x1c0>
                    msgId = (buffer[2] << 8) + buffer[3];
   d59a4:	789a      	ldrb	r2, [r3, #2]
   d59a6:	78d9      	ldrb	r1, [r3, #3]
   d59a8:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                    this->publishRelease(msgId);
   d59ac:	b289      	uxth	r1, r1
   d59ae:	4620      	mov	r0, r4
   d59b0:	f7ff fed9 	bl	d5766 <_ZN4MQTT14publishReleaseEt>
   d59b4:	e746      	b.n	d5844 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBACK) {
   d59b6:	2a40      	cmp	r2, #64	; 0x40
   d59b8:	d112      	bne.n	d59e0 <_ZN4MQTT4loopEv+0x1ea>
                if (qoscallback) {
   d59ba:	6b62      	ldr	r2, [r4, #52]	; 0x34
   d59bc:	2a00      	cmp	r2, #0
   d59be:	f43f af41 	beq.w	d5844 <_ZN4MQTT4loopEv+0x4e>
                    if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   d59c2:	f1bb 0f04 	cmp.w	fp, #4
   d59c6:	f47f af3d 	bne.w	d5844 <_ZN4MQTT4loopEv+0x4e>
   d59ca:	f011 0f06 	tst.w	r1, #6
   d59ce:	f47f af39 	bne.w	d5844 <_ZN4MQTT4loopEv+0x4e>
                        msgId = (buffer[2]<<8)+buffer[3];
   d59d2:	7899      	ldrb	r1, [r3, #2]
   d59d4:	78d8      	ldrb	r0, [r3, #3]
   d59d6:	eb00 2001 	add.w	r0, r0, r1, lsl #8
                        this->qoscallback(msgId);
   d59da:	b280      	uxth	r0, r0
   d59dc:	4790      	blx	r2
   d59de:	e731      	b.n	d5844 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBREL) {
   d59e0:	2a60      	cmp	r2, #96	; 0x60
   d59e2:	d108      	bne.n	d59f6 <_ZN4MQTT4loopEv+0x200>
                msgId = (buffer[2] << 8) + buffer[3];
   d59e4:	789a      	ldrb	r2, [r3, #2]
   d59e6:	78d9      	ldrb	r1, [r3, #3]
   d59e8:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                this->publishComplete(msgId);
   d59ec:	b289      	uxth	r1, r1
   d59ee:	4620      	mov	r0, r4
   d59f0:	f7ff fedd 	bl	d57ae <_ZN4MQTT15publishCompleteEt>
   d59f4:	e726      	b.n	d5844 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBCOMP) {
   d59f6:	2a70      	cmp	r2, #112	; 0x70
   d59f8:	d0df      	beq.n	d59ba <_ZN4MQTT4loopEv+0x1c4>
                } else if (type == MQTTSUBACK) {
   d59fa:	2a90      	cmp	r2, #144	; 0x90
   d59fc:	f43f af22 	beq.w	d5844 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGREQ) {
   d5a00:	2ac0      	cmp	r2, #192	; 0xc0
   d5a02:	d10a      	bne.n	d5a1a <_ZN4MQTT4loopEv+0x224>
                    buffer[0] = MQTTPINGRESP;
   d5a04:	22d0      	movs	r2, #208	; 0xd0
   d5a06:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   d5a08:	69e3      	ldr	r3, [r4, #28]
   d5a0a:	2200      	movs	r2, #0
   d5a0c:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   d5a0e:	69e1      	ldr	r1, [r4, #28]
   d5a10:	2202      	movs	r2, #2
   d5a12:	4620      	mov	r0, r4
   d5a14:	f001 fd66 	bl	d74e4 <_ZN9TCPClient5writeEPKhj>
   d5a18:	e714      	b.n	d5844 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGRESP) {
   d5a1a:	2ad0      	cmp	r2, #208	; 0xd0
                    pingOutstanding = false;
   d5a1c:	bf04      	itt	eq
   d5a1e:	2300      	moveq	r3, #0
   d5a20:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
   d5a24:	e70e      	b.n	d5844 <_ZN4MQTT4loopEv+0x4e>

000d5a26 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:
bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
   d5a26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d5a28:	4604      	mov	r4, r0
   d5a2a:	460f      	mov	r7, r1
   d5a2c:	4616      	mov	r6, r2
    if (isConnected()) {
   d5a2e:	f7ff fd0a 	bl	d5446 <_ZN4MQTT11isConnectedEv>
   d5a32:	4605      	mov	r5, r0
   d5a34:	b310      	cbz	r0, d5a7c <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x56>
        MutexLocker lock(this);
   d5a36:	4621      	mov	r1, r4
   d5a38:	a801      	add	r0, sp, #4
   d5a3a:	f7ff fbb6 	bl	d51aa <_ZN4MQTT11MutexLockerC1EPS_>
        nextMsgId++;
   d5a3e:	8c23      	ldrh	r3, [r4, #32]
   d5a40:	3301      	adds	r3, #1
   d5a42:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
   d5a44:	b1eb      	cbz	r3, d5a82 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x5c>
            nextMsgId = 1;
   d5a46:	8423      	strh	r3, [r4, #32]
        buffer[length++] = (nextMsgId >> 8);
   d5a48:	8c23      	ldrh	r3, [r4, #32]
   d5a4a:	69e2      	ldr	r2, [r4, #28]
   d5a4c:	121b      	asrs	r3, r3, #8
   d5a4e:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
   d5a50:	69e3      	ldr	r3, [r4, #28]
   d5a52:	8c22      	ldrh	r2, [r4, #32]
   d5a54:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
   d5a56:	69e2      	ldr	r2, [r4, #28]
   d5a58:	2307      	movs	r3, #7
   d5a5a:	4639      	mov	r1, r7
   d5a5c:	4620      	mov	r0, r4
   d5a5e:	f7ff fcd7 	bl	d5410 <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
   d5a62:	69e3      	ldr	r3, [r4, #28]
   d5a64:	541e      	strb	r6, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   d5a66:	3804      	subs	r0, #4
   d5a68:	b283      	uxth	r3, r0
   d5a6a:	69e2      	ldr	r2, [r4, #28]
   d5a6c:	2182      	movs	r1, #130	; 0x82
   d5a6e:	4620      	mov	r0, r4
   d5a70:	f7ff fc73 	bl	d535a <_ZN4MQTT5writeEhPht>
   d5a74:	4605      	mov	r5, r0
        MutexLocker lock(this);
   d5a76:	a801      	add	r0, sp, #4
   d5a78:	f7ff fba2 	bl	d51c0 <_ZN4MQTT11MutexLockerD1Ev>
}
   d5a7c:	4628      	mov	r0, r5
   d5a7e:	b003      	add	sp, #12
   d5a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
            nextMsgId = 1;
   d5a82:	2301      	movs	r3, #1
   d5a84:	e7df      	b.n	d5a46 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x20>

000d5a86 <_ZN4MQTT9subscribeEPKc>:
    return subscribe(topic, QOS0);
   d5a86:	2200      	movs	r2, #0
   d5a88:	f7ff bfcd 	b.w	d5a26 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

000d5a8c <_ZN4MQTTD1Ev>:
MQTT::~MQTT() {
   d5a8c:	b538      	push	{r3, r4, r5, lr}
   d5a8e:	4605      	mov	r5, r0
    if (isConnected()) {
   d5a90:	f7ff fcd9 	bl	d5446 <_ZN4MQTT11isConnectedEv>
   d5a94:	b110      	cbz	r0, d5a9c <_ZN4MQTTD1Ev+0x10>
        disconnect();
   d5a96:	4628      	mov	r0, r5
   d5a98:	f7ff fc9d 	bl	d53d6 <_ZN4MQTT10disconnectEv>
    if (buffer != NULL)
   d5a9c:	69e8      	ldr	r0, [r5, #28]
   d5a9e:	b108      	cbz	r0, d5aa4 <_ZN4MQTTD1Ev+0x18>
      delete[] buffer;
   d5aa0:	f7fe faff 	bl	d40a2 <_ZdaPv>
MQTT::~MQTT() {
   d5aa4:	f105 0038 	add.w	r0, r5, #56	; 0x38
   d5aa8:	f000 fc50 	bl	d634c <_ZN6StringD1Ev>
	if (_M_pi != nullptr)
   d5aac:	69ac      	ldr	r4, [r5, #24]
   d5aae:	4b0a      	ldr	r3, [pc, #40]	; (d5ad8 <_ZN4MQTTD1Ev+0x4c>)
   d5ab0:	602b      	str	r3, [r5, #0]
   d5ab2:	b17c      	cbz	r4, d5ad4 <_ZN4MQTTD1Ev+0x48>
      if (--_M_use_count == 0)
   d5ab4:	6863      	ldr	r3, [r4, #4]
   d5ab6:	3b01      	subs	r3, #1
   d5ab8:	6063      	str	r3, [r4, #4]
   d5aba:	b95b      	cbnz	r3, d5ad4 <_ZN4MQTTD1Ev+0x48>
          _M_dispose();
   d5abc:	6823      	ldr	r3, [r4, #0]
   d5abe:	4620      	mov	r0, r4
   d5ac0:	689b      	ldr	r3, [r3, #8]
   d5ac2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5ac4:	68a3      	ldr	r3, [r4, #8]
   d5ac6:	3b01      	subs	r3, #1
   d5ac8:	60a3      	str	r3, [r4, #8]
   d5aca:	b91b      	cbnz	r3, d5ad4 <_ZN4MQTTD1Ev+0x48>
            _M_destroy();
   d5acc:	6823      	ldr	r3, [r4, #0]
   d5ace:	4620      	mov	r0, r4
   d5ad0:	68db      	ldr	r3, [r3, #12]
   d5ad2:	4798      	blx	r3
}
   d5ad4:	4628      	mov	r0, r5
   d5ad6:	bd38      	pop	{r3, r4, r5, pc}
   d5ad8:	000d96e8 	.word	0x000d96e8

000d5adc <_Z10BlynkDelaym>:
#endif

#ifdef _BLYNK_USE_DEFAULT_DELAY
    void BlynkDelay(millis_time_t ms)
    {
        return delay(ms);
   d5adc:	f001 ba32 	b.w	d6f44 <delay>

000d5ae0 <_Z11BlynkMillisv>:
   d5ae0:	f000 b880 	b.w	d5be4 <HAL_Timer_Get_Milli_Seconds>

000d5ae4 <BlynkWidgetRead>:
{}

void BlynkWidgetRead(BlynkReq BLYNK_UNUSED &request)
{
    BLYNK_LOG2(BLYNK_F("No handler for reading from pin "), request.pin);
}
   d5ae4:	4770      	bx	lr

000d5ae6 <BlynkWidgetWrite>:

void BlynkWidgetWrite(BlynkReq BLYNK_UNUSED &request, const BlynkParam BLYNK_UNUSED &param)
{
    BLYNK_LOG2(BLYNK_F("No handler for writing to pin "), request.pin);
}
   d5ae6:	4770      	bx	lr

000d5ae8 <BlynkNoOpCbk>:
{}
   d5ae8:	4770      	bx	lr
	...

000d5aec <GetReadHandler>:
#endif
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
   d5aec:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
   d5aee:	bf5a      	itte	pl
   d5af0:	4b02      	ldrpl	r3, [pc, #8]	; (d5afc <GetReadHandler+0x10>)
   d5af2:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   d5af6:	2000      	movmi	r0, #0
#endif
}
   d5af8:	4770      	bx	lr
   d5afa:	bf00      	nop
   d5afc:	000d90f4 	.word	0x000d90f4

000d5b00 <GetWriteHandler>:

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
   d5b00:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
   d5b02:	bf5a      	itte	pl
   d5b04:	4b02      	ldrpl	r3, [pc, #8]	; (d5b10 <GetWriteHandler+0x10>)
   d5b06:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   d5b0a:	2000      	movmi	r0, #0
#endif
}
   d5b0c:	4770      	bx	lr
   d5b0e:	bf00      	nop
   d5b10:	000d92f4 	.word	0x000d92f4

000d5b14 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5b14:	b508      	push	{r3, lr}
   d5b16:	4b02      	ldr	r3, [pc, #8]	; (d5b20 <netdb_freeaddrinfo+0xc>)
   d5b18:	681b      	ldr	r3, [r3, #0]
   d5b1a:	689b      	ldr	r3, [r3, #8]
   d5b1c:	9301      	str	r3, [sp, #4]
   d5b1e:	bd08      	pop	{r3, pc}
   d5b20:	00030268 	.word	0x00030268

000d5b24 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5b24:	b508      	push	{r3, lr}
   d5b26:	4b02      	ldr	r3, [pc, #8]	; (d5b30 <netdb_getaddrinfo+0xc>)
   d5b28:	681b      	ldr	r3, [r3, #0]
   d5b2a:	68db      	ldr	r3, [r3, #12]
   d5b2c:	9301      	str	r3, [sp, #4]
   d5b2e:	bd08      	pop	{r3, pc}
   d5b30:	00030268 	.word	0x00030268

000d5b34 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d5b34:	b508      	push	{r3, lr}
   d5b36:	4b02      	ldr	r3, [pc, #8]	; (d5b40 <HAL_Validate_Pin_Function+0xc>)
   d5b38:	681b      	ldr	r3, [r3, #0]
   d5b3a:	685b      	ldr	r3, [r3, #4]
   d5b3c:	9301      	str	r3, [sp, #4]
   d5b3e:	bd08      	pop	{r3, pc}
   d5b40:	0003022c 	.word	0x0003022c

000d5b44 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5b44:	b508      	push	{r3, lr}
   d5b46:	4b02      	ldr	r3, [pc, #8]	; (d5b50 <HAL_Pin_Mode+0xc>)
   d5b48:	681b      	ldr	r3, [r3, #0]
   d5b4a:	689b      	ldr	r3, [r3, #8]
   d5b4c:	9301      	str	r3, [sp, #4]
   d5b4e:	bd08      	pop	{r3, pc}
   d5b50:	0003022c 	.word	0x0003022c

000d5b54 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5b54:	b508      	push	{r3, lr}
   d5b56:	4b02      	ldr	r3, [pc, #8]	; (d5b60 <HAL_Get_Pin_Mode+0xc>)
   d5b58:	681b      	ldr	r3, [r3, #0]
   d5b5a:	68db      	ldr	r3, [r3, #12]
   d5b5c:	9301      	str	r3, [sp, #4]
   d5b5e:	bd08      	pop	{r3, pc}
   d5b60:	0003022c 	.word	0x0003022c

000d5b64 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5b64:	b508      	push	{r3, lr}
   d5b66:	4b02      	ldr	r3, [pc, #8]	; (d5b70 <HAL_GPIO_Write+0xc>)
   d5b68:	681b      	ldr	r3, [r3, #0]
   d5b6a:	691b      	ldr	r3, [r3, #16]
   d5b6c:	9301      	str	r3, [sp, #4]
   d5b6e:	bd08      	pop	{r3, pc}
   d5b70:	0003022c 	.word	0x0003022c

000d5b74 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d5b74:	b508      	push	{r3, lr}
   d5b76:	4b02      	ldr	r3, [pc, #8]	; (d5b80 <HAL_GPIO_Read+0xc>)
   d5b78:	681b      	ldr	r3, [r3, #0]
   d5b7a:	695b      	ldr	r3, [r3, #20]
   d5b7c:	9301      	str	r3, [sp, #4]
   d5b7e:	bd08      	pop	{r3, pc}
   d5b80:	0003022c 	.word	0x0003022c

000d5b84 <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
   d5b84:	b508      	push	{r3, lr}
   d5b86:	4b02      	ldr	r3, [pc, #8]	; (d5b90 <HAL_DAC_Write+0xc>)
   d5b88:	681b      	ldr	r3, [r3, #0]
   d5b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5b8c:	9301      	str	r3, [sp, #4]
   d5b8e:	bd08      	pop	{r3, pc}
   d5b90:	0003022c 	.word	0x0003022c

000d5b94 <hal_adc_read>:
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d5b94:	b508      	push	{r3, lr}
   d5b96:	4b02      	ldr	r3, [pc, #8]	; (d5ba0 <hal_adc_read+0xc>)
   d5b98:	681b      	ldr	r3, [r3, #0]
   d5b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5b9c:	9301      	str	r3, [sp, #4]
   d5b9e:	bd08      	pop	{r3, pc}
   d5ba0:	0003022c 	.word	0x0003022c

000d5ba4 <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
   d5ba4:	b508      	push	{r3, lr}
   d5ba6:	4b02      	ldr	r3, [pc, #8]	; (d5bb0 <hal_pwm_write_ext+0xc>)
   d5ba8:	681b      	ldr	r3, [r3, #0]
   d5baa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d5bac:	9301      	str	r3, [sp, #4]
   d5bae:	bd08      	pop	{r3, pc}
   d5bb0:	0003022c 	.word	0x0003022c

000d5bb4 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d5bb4:	b508      	push	{r3, lr}
   d5bb6:	4b02      	ldr	r3, [pc, #8]	; (d5bc0 <if_index_to_name+0xc>)
   d5bb8:	681b      	ldr	r3, [r3, #0]
   d5bba:	695b      	ldr	r3, [r3, #20]
   d5bbc:	9301      	str	r3, [sp, #4]
   d5bbe:	bd08      	pop	{r3, pc}
   d5bc0:	0003026c 	.word	0x0003026c

000d5bc4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5bc4:	b508      	push	{r3, lr}
   d5bc6:	4b02      	ldr	r3, [pc, #8]	; (d5bd0 <HAL_RNG_GetRandomNumber+0xc>)
   d5bc8:	681b      	ldr	r3, [r3, #0]
   d5bca:	685b      	ldr	r3, [r3, #4]
   d5bcc:	9301      	str	r3, [sp, #4]
   d5bce:	bd08      	pop	{r3, pc}
   d5bd0:	00030218 	.word	0x00030218

000d5bd4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d5bd4:	b508      	push	{r3, lr}
   d5bd6:	4b02      	ldr	r3, [pc, #8]	; (d5be0 <HAL_Delay_Microseconds+0xc>)
   d5bd8:	681b      	ldr	r3, [r3, #0]
   d5bda:	68db      	ldr	r3, [r3, #12]
   d5bdc:	9301      	str	r3, [sp, #4]
   d5bde:	bd08      	pop	{r3, pc}
   d5be0:	00030218 	.word	0x00030218

000d5be4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5be4:	b508      	push	{r3, lr}
   d5be6:	4b02      	ldr	r3, [pc, #8]	; (d5bf0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5be8:	681b      	ldr	r3, [r3, #0]
   d5bea:	695b      	ldr	r3, [r3, #20]
   d5bec:	9301      	str	r3, [sp, #4]
   d5bee:	bd08      	pop	{r3, pc}
   d5bf0:	00030218 	.word	0x00030218

000d5bf4 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d5bf4:	b508      	push	{r3, lr}
   d5bf6:	4b02      	ldr	r3, [pc, #8]	; (d5c00 <hal_ble_stack_init+0xc>)
   d5bf8:	681b      	ldr	r3, [r3, #0]
   d5bfa:	689b      	ldr	r3, [r3, #8]
   d5bfc:	9301      	str	r3, [sp, #4]
   d5bfe:	bd08      	pop	{r3, pc}
   d5c00:	00030278 	.word	0x00030278

000d5c04 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   d5c04:	b508      	push	{r3, lr}
   d5c06:	4b02      	ldr	r3, [pc, #8]	; (d5c10 <hal_ble_gap_set_advertising_data+0xc>)
   d5c08:	681b      	ldr	r3, [r3, #0]
   d5c0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5c0c:	9301      	str	r3, [sp, #4]
   d5c0e:	bd08      	pop	{r3, pc}
   d5c10:	00030278 	.word	0x00030278

000d5c14 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   d5c14:	b508      	push	{r3, lr}
   d5c16:	4b02      	ldr	r3, [pc, #8]	; (d5c20 <hal_ble_gap_set_scan_response_data+0xc>)
   d5c18:	681b      	ldr	r3, [r3, #0]
   d5c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5c1c:	9301      	str	r3, [sp, #4]
   d5c1e:	bd08      	pop	{r3, pc}
   d5c20:	00030278 	.word	0x00030278

000d5c24 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   d5c24:	b508      	push	{r3, lr}
   d5c26:	4b02      	ldr	r3, [pc, #8]	; (d5c30 <hal_ble_gap_start_advertising+0xc>)
   d5c28:	681b      	ldr	r3, [r3, #0]
   d5c2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   d5c2c:	9301      	str	r3, [sp, #4]
   d5c2e:	bd08      	pop	{r3, pc}
   d5c30:	00030278 	.word	0x00030278

000d5c34 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d5c34:	b508      	push	{r3, lr}
   d5c36:	4b03      	ldr	r3, [pc, #12]	; (d5c44 <hal_ble_gap_disconnect+0x10>)
   d5c38:	681b      	ldr	r3, [r3, #0]
   d5c3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d5c3e:	9301      	str	r3, [sp, #4]
   d5c40:	bd08      	pop	{r3, pc}
   d5c42:	0000      	.short	0x0000
   d5c44:	00030278 	.word	0x00030278

000d5c48 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d5c48:	b508      	push	{r3, lr}
   d5c4a:	4b03      	ldr	r3, [pc, #12]	; (d5c58 <hal_ble_set_callback_on_periph_link_events+0x10>)
   d5c4c:	681b      	ldr	r3, [r3, #0]
   d5c4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d5c52:	9301      	str	r3, [sp, #4]
   d5c54:	bd08      	pop	{r3, pc}
   d5c56:	0000      	.short	0x0000
   d5c58:	00030278 	.word	0x00030278

000d5c5c <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d5c5c:	b508      	push	{r3, lr}
   d5c5e:	4b02      	ldr	r3, [pc, #8]	; (d5c68 <os_thread_create+0xc>)
   d5c60:	681b      	ldr	r3, [r3, #0]
   d5c62:	685b      	ldr	r3, [r3, #4]
   d5c64:	9301      	str	r3, [sp, #4]
   d5c66:	bd08      	pop	{r3, pc}
   d5c68:	00030248 	.word	0x00030248

000d5c6c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d5c6c:	b508      	push	{r3, lr}
   d5c6e:	4b02      	ldr	r3, [pc, #8]	; (d5c78 <os_mutex_create+0xc>)
   d5c70:	681b      	ldr	r3, [r3, #0]
   d5c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5c74:	9301      	str	r3, [sp, #4]
   d5c76:	bd08      	pop	{r3, pc}
   d5c78:	00030248 	.word	0x00030248

000d5c7c <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   d5c7c:	b508      	push	{r3, lr}
   d5c7e:	4b02      	ldr	r3, [pc, #8]	; (d5c88 <os_mutex_lock+0xc>)
   d5c80:	681b      	ldr	r3, [r3, #0]
   d5c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d5c84:	9301      	str	r3, [sp, #4]
   d5c86:	bd08      	pop	{r3, pc}
   d5c88:	00030248 	.word	0x00030248

000d5c8c <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   d5c8c:	b508      	push	{r3, lr}
   d5c8e:	4b02      	ldr	r3, [pc, #8]	; (d5c98 <os_mutex_unlock+0xc>)
   d5c90:	681b      	ldr	r3, [r3, #0]
   d5c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5c94:	9301      	str	r3, [sp, #4]
   d5c96:	bd08      	pop	{r3, pc}
   d5c98:	00030248 	.word	0x00030248

000d5c9c <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5c9c:	b508      	push	{r3, lr}
   d5c9e:	4b02      	ldr	r3, [pc, #8]	; (d5ca8 <os_mutex_recursive_create+0xc>)
   d5ca0:	681b      	ldr	r3, [r3, #0]
   d5ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5ca4:	9301      	str	r3, [sp, #4]
   d5ca6:	bd08      	pop	{r3, pc}
   d5ca8:	00030248 	.word	0x00030248

000d5cac <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5cac:	b508      	push	{r3, lr}
   d5cae:	4b02      	ldr	r3, [pc, #8]	; (d5cb8 <os_mutex_recursive_destroy+0xc>)
   d5cb0:	681b      	ldr	r3, [r3, #0]
   d5cb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5cb4:	9301      	str	r3, [sp, #4]
   d5cb6:	bd08      	pop	{r3, pc}
   d5cb8:	00030248 	.word	0x00030248

000d5cbc <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d5cbc:	b508      	push	{r3, lr}
   d5cbe:	4b02      	ldr	r3, [pc, #8]	; (d5cc8 <os_mutex_recursive_lock+0xc>)
   d5cc0:	681b      	ldr	r3, [r3, #0]
   d5cc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5cc4:	9301      	str	r3, [sp, #4]
   d5cc6:	bd08      	pop	{r3, pc}
   d5cc8:	00030248 	.word	0x00030248

000d5ccc <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d5ccc:	b508      	push	{r3, lr}
   d5cce:	4b02      	ldr	r3, [pc, #8]	; (d5cd8 <os_mutex_recursive_unlock+0xc>)
   d5cd0:	681b      	ldr	r3, [r3, #0]
   d5cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5cd4:	9301      	str	r3, [sp, #4]
   d5cd6:	bd08      	pop	{r3, pc}
   d5cd8:	00030248 	.word	0x00030248

000d5cdc <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5cdc:	b508      	push	{r3, lr}
   d5cde:	4b02      	ldr	r3, [pc, #8]	; (d5ce8 <inet_inet_ntop+0xc>)
   d5ce0:	681b      	ldr	r3, [r3, #0]
   d5ce2:	695b      	ldr	r3, [r3, #20]
   d5ce4:	9301      	str	r3, [sp, #4]
   d5ce6:	bd08      	pop	{r3, pc}
   d5ce8:	00030264 	.word	0x00030264

000d5cec <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d5cec:	b508      	push	{r3, lr}
   d5cee:	4b02      	ldr	r3, [pc, #8]	; (d5cf8 <inet_htonl+0xc>)
   d5cf0:	681b      	ldr	r3, [r3, #0]
   d5cf2:	6a1b      	ldr	r3, [r3, #32]
   d5cf4:	9301      	str	r3, [sp, #4]
   d5cf6:	bd08      	pop	{r3, pc}
   d5cf8:	00030264 	.word	0x00030264

000d5cfc <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d5cfc:	b508      	push	{r3, lr}
   d5cfe:	4b02      	ldr	r3, [pc, #8]	; (d5d08 <inet_htons+0xc>)
   d5d00:	681b      	ldr	r3, [r3, #0]
   d5d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5d04:	9301      	str	r3, [sp, #4]
   d5d06:	bd08      	pop	{r3, pc}
   d5d08:	00030264 	.word	0x00030264

000d5d0c <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d5d0c:	b508      	push	{r3, lr}
   d5d0e:	4b02      	ldr	r3, [pc, #8]	; (d5d18 <hal_usart_init+0xc>)
   d5d10:	681b      	ldr	r3, [r3, #0]
   d5d12:	681b      	ldr	r3, [r3, #0]
   d5d14:	9301      	str	r3, [sp, #4]
   d5d16:	bd08      	pop	{r3, pc}
   d5d18:	0003023c 	.word	0x0003023c

000d5d1c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d5d1c:	b508      	push	{r3, lr}
   d5d1e:	4b02      	ldr	r3, [pc, #8]	; (d5d28 <hal_usart_write+0xc>)
   d5d20:	681b      	ldr	r3, [r3, #0]
   d5d22:	68db      	ldr	r3, [r3, #12]
   d5d24:	9301      	str	r3, [sp, #4]
   d5d26:	bd08      	pop	{r3, pc}
   d5d28:	0003023c 	.word	0x0003023c

000d5d2c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d5d2c:	b508      	push	{r3, lr}
   d5d2e:	4b02      	ldr	r3, [pc, #8]	; (d5d38 <hal_usart_available+0xc>)
   d5d30:	681b      	ldr	r3, [r3, #0]
   d5d32:	691b      	ldr	r3, [r3, #16]
   d5d34:	9301      	str	r3, [sp, #4]
   d5d36:	bd08      	pop	{r3, pc}
   d5d38:	0003023c 	.word	0x0003023c

000d5d3c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d5d3c:	b508      	push	{r3, lr}
   d5d3e:	4b02      	ldr	r3, [pc, #8]	; (d5d48 <hal_usart_read+0xc>)
   d5d40:	681b      	ldr	r3, [r3, #0]
   d5d42:	695b      	ldr	r3, [r3, #20]
   d5d44:	9301      	str	r3, [sp, #4]
   d5d46:	bd08      	pop	{r3, pc}
   d5d48:	0003023c 	.word	0x0003023c

000d5d4c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d5d4c:	b508      	push	{r3, lr}
   d5d4e:	4b02      	ldr	r3, [pc, #8]	; (d5d58 <hal_usart_peek+0xc>)
   d5d50:	681b      	ldr	r3, [r3, #0]
   d5d52:	699b      	ldr	r3, [r3, #24]
   d5d54:	9301      	str	r3, [sp, #4]
   d5d56:	bd08      	pop	{r3, pc}
   d5d58:	0003023c 	.word	0x0003023c

000d5d5c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d5d5c:	b508      	push	{r3, lr}
   d5d5e:	4b02      	ldr	r3, [pc, #8]	; (d5d68 <hal_usart_flush+0xc>)
   d5d60:	681b      	ldr	r3, [r3, #0]
   d5d62:	69db      	ldr	r3, [r3, #28]
   d5d64:	9301      	str	r3, [sp, #4]
   d5d66:	bd08      	pop	{r3, pc}
   d5d68:	0003023c 	.word	0x0003023c

000d5d6c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d5d6c:	b508      	push	{r3, lr}
   d5d6e:	4b02      	ldr	r3, [pc, #8]	; (d5d78 <hal_usart_is_enabled+0xc>)
   d5d70:	681b      	ldr	r3, [r3, #0]
   d5d72:	6a1b      	ldr	r3, [r3, #32]
   d5d74:	9301      	str	r3, [sp, #4]
   d5d76:	bd08      	pop	{r3, pc}
   d5d78:	0003023c 	.word	0x0003023c

000d5d7c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d5d7c:	b508      	push	{r3, lr}
   d5d7e:	4b02      	ldr	r3, [pc, #8]	; (d5d88 <hal_usart_available_data_for_write+0xc>)
   d5d80:	681b      	ldr	r3, [r3, #0]
   d5d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5d84:	9301      	str	r3, [sp, #4]
   d5d86:	bd08      	pop	{r3, pc}
   d5d88:	0003023c 	.word	0x0003023c

000d5d8c <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d5d8c:	b508      	push	{r3, lr}
   d5d8e:	4b02      	ldr	r3, [pc, #8]	; (d5d98 <hal_i2c_begin+0xc>)
   d5d90:	681b      	ldr	r3, [r3, #0]
   d5d92:	68db      	ldr	r3, [r3, #12]
   d5d94:	9301      	str	r3, [sp, #4]
   d5d96:	bd08      	pop	{r3, pc}
   d5d98:	00030228 	.word	0x00030228

000d5d9c <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d5d9c:	b508      	push	{r3, lr}
   d5d9e:	4b02      	ldr	r3, [pc, #8]	; (d5da8 <hal_i2c_begin_transmission+0xc>)
   d5da0:	681b      	ldr	r3, [r3, #0]
   d5da2:	699b      	ldr	r3, [r3, #24]
   d5da4:	9301      	str	r3, [sp, #4]
   d5da6:	bd08      	pop	{r3, pc}
   d5da8:	00030228 	.word	0x00030228

000d5dac <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d5dac:	b508      	push	{r3, lr}
   d5dae:	4b02      	ldr	r3, [pc, #8]	; (d5db8 <hal_i2c_end_transmission+0xc>)
   d5db0:	681b      	ldr	r3, [r3, #0]
   d5db2:	69db      	ldr	r3, [r3, #28]
   d5db4:	9301      	str	r3, [sp, #4]
   d5db6:	bd08      	pop	{r3, pc}
   d5db8:	00030228 	.word	0x00030228

000d5dbc <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d5dbc:	b508      	push	{r3, lr}
   d5dbe:	4b02      	ldr	r3, [pc, #8]	; (d5dc8 <hal_i2c_write+0xc>)
   d5dc0:	681b      	ldr	r3, [r3, #0]
   d5dc2:	6a1b      	ldr	r3, [r3, #32]
   d5dc4:	9301      	str	r3, [sp, #4]
   d5dc6:	bd08      	pop	{r3, pc}
   d5dc8:	00030228 	.word	0x00030228

000d5dcc <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d5dcc:	b508      	push	{r3, lr}
   d5dce:	4b02      	ldr	r3, [pc, #8]	; (d5dd8 <hal_i2c_available+0xc>)
   d5dd0:	681b      	ldr	r3, [r3, #0]
   d5dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5dd4:	9301      	str	r3, [sp, #4]
   d5dd6:	bd08      	pop	{r3, pc}
   d5dd8:	00030228 	.word	0x00030228

000d5ddc <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d5ddc:	b508      	push	{r3, lr}
   d5dde:	4b02      	ldr	r3, [pc, #8]	; (d5de8 <hal_i2c_read+0xc>)
   d5de0:	681b      	ldr	r3, [r3, #0]
   d5de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5de4:	9301      	str	r3, [sp, #4]
   d5de6:	bd08      	pop	{r3, pc}
   d5de8:	00030228 	.word	0x00030228

000d5dec <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d5dec:	b508      	push	{r3, lr}
   d5dee:	4b02      	ldr	r3, [pc, #8]	; (d5df8 <hal_i2c_peek+0xc>)
   d5df0:	681b      	ldr	r3, [r3, #0]
   d5df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5df4:	9301      	str	r3, [sp, #4]
   d5df6:	bd08      	pop	{r3, pc}
   d5df8:	00030228 	.word	0x00030228

000d5dfc <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d5dfc:	b508      	push	{r3, lr}
   d5dfe:	4b02      	ldr	r3, [pc, #8]	; (d5e08 <hal_i2c_flush+0xc>)
   d5e00:	681b      	ldr	r3, [r3, #0]
   d5e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5e04:	9301      	str	r3, [sp, #4]
   d5e06:	bd08      	pop	{r3, pc}
   d5e08:	00030228 	.word	0x00030228

000d5e0c <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d5e0c:	b508      	push	{r3, lr}
   d5e0e:	4b02      	ldr	r3, [pc, #8]	; (d5e18 <hal_i2c_is_enabled+0xc>)
   d5e10:	681b      	ldr	r3, [r3, #0]
   d5e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5e14:	9301      	str	r3, [sp, #4]
   d5e16:	bd08      	pop	{r3, pc}
   d5e18:	00030228 	.word	0x00030228

000d5e1c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d5e1c:	b508      	push	{r3, lr}
   d5e1e:	4b02      	ldr	r3, [pc, #8]	; (d5e28 <hal_i2c_init+0xc>)
   d5e20:	681b      	ldr	r3, [r3, #0]
   d5e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5e24:	9301      	str	r3, [sp, #4]
   d5e26:	bd08      	pop	{r3, pc}
   d5e28:	00030228 	.word	0x00030228

000d5e2c <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d5e2c:	b508      	push	{r3, lr}
   d5e2e:	4b02      	ldr	r3, [pc, #8]	; (d5e38 <hal_i2c_request_ex+0xc>)
   d5e30:	681b      	ldr	r3, [r3, #0]
   d5e32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5e34:	9301      	str	r3, [sp, #4]
   d5e36:	bd08      	pop	{r3, pc}
   d5e38:	00030228 	.word	0x00030228

000d5e3c <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d5e3c:	b508      	push	{r3, lr}
   d5e3e:	4b02      	ldr	r3, [pc, #8]	; (d5e48 <sock_setsockopt+0xc>)
   d5e40:	681b      	ldr	r3, [r3, #0]
   d5e42:	699b      	ldr	r3, [r3, #24]
   d5e44:	9301      	str	r3, [sp, #4]
   d5e46:	bd08      	pop	{r3, pc}
   d5e48:	00030238 	.word	0x00030238

000d5e4c <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d5e4c:	b508      	push	{r3, lr}
   d5e4e:	4b02      	ldr	r3, [pc, #8]	; (d5e58 <sock_close+0xc>)
   d5e50:	681b      	ldr	r3, [r3, #0]
   d5e52:	69db      	ldr	r3, [r3, #28]
   d5e54:	9301      	str	r3, [sp, #4]
   d5e56:	bd08      	pop	{r3, pc}
   d5e58:	00030238 	.word	0x00030238

000d5e5c <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d5e5c:	b508      	push	{r3, lr}
   d5e5e:	4b02      	ldr	r3, [pc, #8]	; (d5e68 <sock_connect+0xc>)
   d5e60:	681b      	ldr	r3, [r3, #0]
   d5e62:	6a1b      	ldr	r3, [r3, #32]
   d5e64:	9301      	str	r3, [sp, #4]
   d5e66:	bd08      	pop	{r3, pc}
   d5e68:	00030238 	.word	0x00030238

000d5e6c <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d5e6c:	b508      	push	{r3, lr}
   d5e6e:	4b02      	ldr	r3, [pc, #8]	; (d5e78 <sock_recv+0xc>)
   d5e70:	681b      	ldr	r3, [r3, #0]
   d5e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5e74:	9301      	str	r3, [sp, #4]
   d5e76:	bd08      	pop	{r3, pc}
   d5e78:	00030238 	.word	0x00030238

000d5e7c <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d5e7c:	b508      	push	{r3, lr}
   d5e7e:	4b02      	ldr	r3, [pc, #8]	; (d5e88 <sock_send+0xc>)
   d5e80:	681b      	ldr	r3, [r3, #0]
   d5e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5e84:	9301      	str	r3, [sp, #4]
   d5e86:	bd08      	pop	{r3, pc}
   d5e88:	00030238 	.word	0x00030238

000d5e8c <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d5e8c:	b508      	push	{r3, lr}
   d5e8e:	4b02      	ldr	r3, [pc, #8]	; (d5e98 <sock_socket+0xc>)
   d5e90:	681b      	ldr	r3, [r3, #0]
   d5e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d5e94:	9301      	str	r3, [sp, #4]
   d5e96:	bd08      	pop	{r3, pc}
   d5e98:	00030238 	.word	0x00030238

000d5e9c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d5e9c:	b508      	push	{r3, lr}
   d5e9e:	4b02      	ldr	r3, [pc, #8]	; (d5ea8 <hal_spi_init+0xc>)
   d5ea0:	681b      	ldr	r3, [r3, #0]
   d5ea2:	69db      	ldr	r3, [r3, #28]
   d5ea4:	9301      	str	r3, [sp, #4]
   d5ea6:	bd08      	pop	{r3, pc}
   d5ea8:	00030230 	.word	0x00030230

000d5eac <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d5eac:	b508      	push	{r3, lr}
   d5eae:	4b02      	ldr	r3, [pc, #8]	; (d5eb8 <hal_spi_is_enabled+0xc>)
   d5eb0:	681b      	ldr	r3, [r3, #0]
   d5eb2:	6a1b      	ldr	r3, [r3, #32]
   d5eb4:	9301      	str	r3, [sp, #4]
   d5eb6:	bd08      	pop	{r3, pc}
   d5eb8:	00030230 	.word	0x00030230

000d5ebc <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5ebc:	b508      	push	{r3, lr}
   d5ebe:	4b02      	ldr	r3, [pc, #8]	; (d5ec8 <HAL_USB_USART_Init+0xc>)
   d5ec0:	681b      	ldr	r3, [r3, #0]
   d5ec2:	681b      	ldr	r3, [r3, #0]
   d5ec4:	9301      	str	r3, [sp, #4]
   d5ec6:	bd08      	pop	{r3, pc}
   d5ec8:	0003024c 	.word	0x0003024c

000d5ecc <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5ecc:	b508      	push	{r3, lr}
   d5ece:	4b02      	ldr	r3, [pc, #8]	; (d5ed8 <HAL_USB_USART_Begin+0xc>)
   d5ed0:	681b      	ldr	r3, [r3, #0]
   d5ed2:	685b      	ldr	r3, [r3, #4]
   d5ed4:	9301      	str	r3, [sp, #4]
   d5ed6:	bd08      	pop	{r3, pc}
   d5ed8:	0003024c 	.word	0x0003024c

000d5edc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5edc:	b508      	push	{r3, lr}
   d5ede:	4b02      	ldr	r3, [pc, #8]	; (d5ee8 <HAL_USB_USART_Available_Data+0xc>)
   d5ee0:	681b      	ldr	r3, [r3, #0]
   d5ee2:	691b      	ldr	r3, [r3, #16]
   d5ee4:	9301      	str	r3, [sp, #4]
   d5ee6:	bd08      	pop	{r3, pc}
   d5ee8:	0003024c 	.word	0x0003024c

000d5eec <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5eec:	b508      	push	{r3, lr}
   d5eee:	4b02      	ldr	r3, [pc, #8]	; (d5ef8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5ef0:	681b      	ldr	r3, [r3, #0]
   d5ef2:	695b      	ldr	r3, [r3, #20]
   d5ef4:	9301      	str	r3, [sp, #4]
   d5ef6:	bd08      	pop	{r3, pc}
   d5ef8:	0003024c 	.word	0x0003024c

000d5efc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5efc:	b508      	push	{r3, lr}
   d5efe:	4b02      	ldr	r3, [pc, #8]	; (d5f08 <HAL_USB_USART_Receive_Data+0xc>)
   d5f00:	681b      	ldr	r3, [r3, #0]
   d5f02:	699b      	ldr	r3, [r3, #24]
   d5f04:	9301      	str	r3, [sp, #4]
   d5f06:	bd08      	pop	{r3, pc}
   d5f08:	0003024c 	.word	0x0003024c

000d5f0c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5f0c:	b508      	push	{r3, lr}
   d5f0e:	4b02      	ldr	r3, [pc, #8]	; (d5f18 <HAL_USB_USART_Send_Data+0xc>)
   d5f10:	681b      	ldr	r3, [r3, #0]
   d5f12:	69db      	ldr	r3, [r3, #28]
   d5f14:	9301      	str	r3, [sp, #4]
   d5f16:	bd08      	pop	{r3, pc}
   d5f18:	0003024c 	.word	0x0003024c

000d5f1c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5f1c:	b508      	push	{r3, lr}
   d5f1e:	4b02      	ldr	r3, [pc, #8]	; (d5f28 <HAL_USB_USART_Flush_Data+0xc>)
   d5f20:	681b      	ldr	r3, [r3, #0]
   d5f22:	6a1b      	ldr	r3, [r3, #32]
   d5f24:	9301      	str	r3, [sp, #4]
   d5f26:	bd08      	pop	{r3, pc}
   d5f28:	0003024c 	.word	0x0003024c

000d5f2c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d5f2c:	b508      	push	{r3, lr}
   d5f2e:	4b02      	ldr	r3, [pc, #8]	; (d5f38 <panic_+0xc>)
   d5f30:	681b      	ldr	r3, [r3, #0]
   d5f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5f34:	9301      	str	r3, [sp, #4]
   d5f36:	bd08      	pop	{r3, pc}
   d5f38:	00030260 	.word	0x00030260

000d5f3c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d5f3c:	b508      	push	{r3, lr}
   d5f3e:	4b02      	ldr	r3, [pc, #8]	; (d5f48 <log_message+0xc>)
   d5f40:	681b      	ldr	r3, [r3, #0]
   d5f42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5f44:	9301      	str	r3, [sp, #4]
   d5f46:	bd08      	pop	{r3, pc}
   d5f48:	00030260 	.word	0x00030260

000d5f4c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5f4c:	b508      	push	{r3, lr}
   d5f4e:	4b02      	ldr	r3, [pc, #8]	; (d5f58 <set_system_mode+0xc>)
   d5f50:	681b      	ldr	r3, [r3, #0]
   d5f52:	685b      	ldr	r3, [r3, #4]
   d5f54:	9301      	str	r3, [sp, #4]
   d5f56:	bd08      	pop	{r3, pc}
   d5f58:	00030220 	.word	0x00030220

000d5f5c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5f5c:	b508      	push	{r3, lr}
   d5f5e:	4b02      	ldr	r3, [pc, #8]	; (d5f68 <system_delay_ms+0xc>)
   d5f60:	681b      	ldr	r3, [r3, #0]
   d5f62:	695b      	ldr	r3, [r3, #20]
   d5f64:	9301      	str	r3, [sp, #4]
   d5f66:	bd08      	pop	{r3, pc}
   d5f68:	00030220 	.word	0x00030220

000d5f6c <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d5f6c:	b508      	push	{r3, lr}
   d5f6e:	4b02      	ldr	r3, [pc, #8]	; (d5f78 <system_thread_set_state+0xc>)
   d5f70:	681b      	ldr	r3, [r3, #0]
   d5f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5f74:	9301      	str	r3, [sp, #4]
   d5f76:	bd08      	pop	{r3, pc}
   d5f78:	00030220 	.word	0x00030220

000d5f7c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5f7c:	b508      	push	{r3, lr}
   d5f7e:	4b03      	ldr	r3, [pc, #12]	; (d5f8c <system_ctrl_set_app_request_handler+0x10>)
   d5f80:	681b      	ldr	r3, [r3, #0]
   d5f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5f86:	9301      	str	r3, [sp, #4]
   d5f88:	bd08      	pop	{r3, pc}
   d5f8a:	0000      	.short	0x0000
   d5f8c:	00030220 	.word	0x00030220

000d5f90 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5f90:	b508      	push	{r3, lr}
   d5f92:	4b03      	ldr	r3, [pc, #12]	; (d5fa0 <system_ctrl_set_result+0x10>)
   d5f94:	681b      	ldr	r3, [r3, #0]
   d5f96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5f9a:	9301      	str	r3, [sp, #4]
   d5f9c:	bd08      	pop	{r3, pc}
   d5f9e:	0000      	.short	0x0000
   d5fa0:	00030220 	.word	0x00030220

000d5fa4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5fa4:	b508      	push	{r3, lr}
   d5fa6:	4b02      	ldr	r3, [pc, #8]	; (d5fb0 <network_connect+0xc>)
   d5fa8:	681b      	ldr	r3, [r3, #0]
   d5faa:	685b      	ldr	r3, [r3, #4]
   d5fac:	9301      	str	r3, [sp, #4]
   d5fae:	bd08      	pop	{r3, pc}
   d5fb0:	00030240 	.word	0x00030240

000d5fb4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5fb4:	b508      	push	{r3, lr}
   d5fb6:	4b02      	ldr	r3, [pc, #8]	; (d5fc0 <network_connecting+0xc>)
   d5fb8:	681b      	ldr	r3, [r3, #0]
   d5fba:	689b      	ldr	r3, [r3, #8]
   d5fbc:	9301      	str	r3, [sp, #4]
   d5fbe:	bd08      	pop	{r3, pc}
   d5fc0:	00030240 	.word	0x00030240

000d5fc4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5fc4:	b508      	push	{r3, lr}
   d5fc6:	4b02      	ldr	r3, [pc, #8]	; (d5fd0 <network_disconnect+0xc>)
   d5fc8:	681b      	ldr	r3, [r3, #0]
   d5fca:	68db      	ldr	r3, [r3, #12]
   d5fcc:	9301      	str	r3, [sp, #4]
   d5fce:	bd08      	pop	{r3, pc}
   d5fd0:	00030240 	.word	0x00030240

000d5fd4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5fd4:	b508      	push	{r3, lr}
   d5fd6:	4b02      	ldr	r3, [pc, #8]	; (d5fe0 <network_ready+0xc>)
   d5fd8:	681b      	ldr	r3, [r3, #0]
   d5fda:	691b      	ldr	r3, [r3, #16]
   d5fdc:	9301      	str	r3, [sp, #4]
   d5fde:	bd08      	pop	{r3, pc}
   d5fe0:	00030240 	.word	0x00030240

000d5fe4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5fe4:	b508      	push	{r3, lr}
   d5fe6:	4b02      	ldr	r3, [pc, #8]	; (d5ff0 <network_on+0xc>)
   d5fe8:	681b      	ldr	r3, [r3, #0]
   d5fea:	695b      	ldr	r3, [r3, #20]
   d5fec:	9301      	str	r3, [sp, #4]
   d5fee:	bd08      	pop	{r3, pc}
   d5ff0:	00030240 	.word	0x00030240

000d5ff4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5ff4:	b508      	push	{r3, lr}
   d5ff6:	4b02      	ldr	r3, [pc, #8]	; (d6000 <network_off+0xc>)
   d5ff8:	681b      	ldr	r3, [r3, #0]
   d5ffa:	699b      	ldr	r3, [r3, #24]
   d5ffc:	9301      	str	r3, [sp, #4]
   d5ffe:	bd08      	pop	{r3, pc}
   d6000:	00030240 	.word	0x00030240

000d6004 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d6004:	b508      	push	{r3, lr}
   d6006:	4b02      	ldr	r3, [pc, #8]	; (d6010 <network_listen+0xc>)
   d6008:	681b      	ldr	r3, [r3, #0]
   d600a:	69db      	ldr	r3, [r3, #28]
   d600c:	9301      	str	r3, [sp, #4]
   d600e:	bd08      	pop	{r3, pc}
   d6010:	00030240 	.word	0x00030240

000d6014 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d6014:	b508      	push	{r3, lr}
   d6016:	4b02      	ldr	r3, [pc, #8]	; (d6020 <network_listening+0xc>)
   d6018:	681b      	ldr	r3, [r3, #0]
   d601a:	6a1b      	ldr	r3, [r3, #32]
   d601c:	9301      	str	r3, [sp, #4]
   d601e:	bd08      	pop	{r3, pc}
   d6020:	00030240 	.word	0x00030240

000d6024 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d6024:	b508      	push	{r3, lr}
   d6026:	4b02      	ldr	r3, [pc, #8]	; (d6030 <network_set_listen_timeout+0xc>)
   d6028:	681b      	ldr	r3, [r3, #0]
   d602a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d602c:	9301      	str	r3, [sp, #4]
   d602e:	bd08      	pop	{r3, pc}
   d6030:	00030240 	.word	0x00030240

000d6034 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d6034:	b508      	push	{r3, lr}
   d6036:	4b02      	ldr	r3, [pc, #8]	; (d6040 <network_get_listen_timeout+0xc>)
   d6038:	681b      	ldr	r3, [r3, #0]
   d603a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d603c:	9301      	str	r3, [sp, #4]
   d603e:	bd08      	pop	{r3, pc}
   d6040:	00030240 	.word	0x00030240

000d6044 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d6044:	b508      	push	{r3, lr}
   d6046:	4b02      	ldr	r3, [pc, #8]	; (d6050 <network_is_on+0xc>)
   d6048:	681b      	ldr	r3, [r3, #0]
   d604a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d604c:	9301      	str	r3, [sp, #4]
   d604e:	bd08      	pop	{r3, pc}
   d6050:	00030240 	.word	0x00030240

000d6054 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d6054:	b508      	push	{r3, lr}
   d6056:	4b02      	ldr	r3, [pc, #8]	; (d6060 <network_is_off+0xc>)
   d6058:	681b      	ldr	r3, [r3, #0]
   d605a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d605c:	9301      	str	r3, [sp, #4]
   d605e:	bd08      	pop	{r3, pc}
   d6060:	00030240 	.word	0x00030240

000d6064 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d6064:	b508      	push	{r3, lr}
   d6066:	4b02      	ldr	r3, [pc, #8]	; (d6070 <spark_process+0xc>)
   d6068:	681b      	ldr	r3, [r3, #0]
   d606a:	689b      	ldr	r3, [r3, #8]
   d606c:	9301      	str	r3, [sp, #4]
   d606e:	bd08      	pop	{r3, pc}
   d6070:	00030244 	.word	0x00030244

000d6074 <spark_deviceID>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d6074:	b508      	push	{r3, lr}
   d6076:	4b02      	ldr	r3, [pc, #8]	; (d6080 <spark_deviceID+0xc>)
   d6078:	681b      	ldr	r3, [r3, #0]
   d607a:	69db      	ldr	r3, [r3, #28]
   d607c:	9301      	str	r3, [sp, #4]
   d607e:	bd08      	pop	{r3, pc}
   d6080:	00030244 	.word	0x00030244

000d6084 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d6084:	b508      	push	{r3, lr}
   d6086:	4b02      	ldr	r3, [pc, #8]	; (d6090 <spark_set_random_seed_from_cloud_handler+0xc>)
   d6088:	681b      	ldr	r3, [r3, #0]
   d608a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d608c:	9301      	str	r3, [sp, #4]
   d608e:	bd08      	pop	{r3, pc}
   d6090:	00030244 	.word	0x00030244

000d6094 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d6094:	b508      	push	{r3, lr}
   d6096:	4b02      	ldr	r3, [pc, #8]	; (d60a0 <malloc+0xc>)
   d6098:	681b      	ldr	r3, [r3, #0]
   d609a:	681b      	ldr	r3, [r3, #0]
   d609c:	9301      	str	r3, [sp, #4]
   d609e:	bd08      	pop	{r3, pc}
   d60a0:	0003021c 	.word	0x0003021c

000d60a4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d60a4:	b508      	push	{r3, lr}
   d60a6:	4b02      	ldr	r3, [pc, #8]	; (d60b0 <free+0xc>)
   d60a8:	681b      	ldr	r3, [r3, #0]
   d60aa:	685b      	ldr	r3, [r3, #4]
   d60ac:	9301      	str	r3, [sp, #4]
   d60ae:	bd08      	pop	{r3, pc}
   d60b0:	0003021c 	.word	0x0003021c

000d60b4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d60b4:	b508      	push	{r3, lr}
   d60b6:	4b02      	ldr	r3, [pc, #8]	; (d60c0 <realloc+0xc>)
   d60b8:	681b      	ldr	r3, [r3, #0]
   d60ba:	689b      	ldr	r3, [r3, #8]
   d60bc:	9301      	str	r3, [sp, #4]
   d60be:	bd08      	pop	{r3, pc}
   d60c0:	0003021c 	.word	0x0003021c

000d60c4 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d60c4:	b508      	push	{r3, lr}
   d60c6:	4b02      	ldr	r3, [pc, #8]	; (d60d0 <snprintf+0xc>)
   d60c8:	681b      	ldr	r3, [r3, #0]
   d60ca:	69db      	ldr	r3, [r3, #28]
   d60cc:	9301      	str	r3, [sp, #4]
   d60ce:	bd08      	pop	{r3, pc}
   d60d0:	0003021c 	.word	0x0003021c

000d60d4 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d60d4:	b508      	push	{r3, lr}
   d60d6:	4b02      	ldr	r3, [pc, #8]	; (d60e0 <abort+0xc>)
   d60d8:	681b      	ldr	r3, [r3, #0]
   d60da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d60dc:	9301      	str	r3, [sp, #4]
   d60de:	bd08      	pop	{r3, pc}
   d60e0:	0003021c 	.word	0x0003021c

000d60e4 <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d60e4:	b508      	push	{r3, lr}
   d60e6:	4b02      	ldr	r3, [pc, #8]	; (d60f0 <__errno+0xc>)
   d60e8:	681b      	ldr	r3, [r3, #0]
   d60ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d60ec:	9301      	str	r3, [sp, #4]
   d60ee:	bd08      	pop	{r3, pc}
   d60f0:	0003021c 	.word	0x0003021c

000d60f4 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d60f4:	b508      	push	{r3, lr}
   d60f6:	4b02      	ldr	r3, [pc, #8]	; (d6100 <newlib_impure_ptr_callback+0xc>)
   d60f8:	681b      	ldr	r3, [r3, #0]
   d60fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d60fc:	9301      	str	r3, [sp, #4]
   d60fe:	bd08      	pop	{r3, pc}
   d6100:	0003021c 	.word	0x0003021c

000d6104 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6104:	2200      	movs	r2, #0
   d6106:	6840      	ldr	r0, [r0, #4]
   d6108:	4611      	mov	r1, r2
   d610a:	f7ff bf83 	b.w	d6014 <network_listening>

000d610e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d610e:	2200      	movs	r2, #0
   d6110:	6840      	ldr	r0, [r0, #4]
   d6112:	4611      	mov	r1, r2
   d6114:	f7ff bf8e 	b.w	d6034 <network_get_listen_timeout>

000d6118 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d6118:	6840      	ldr	r0, [r0, #4]
   d611a:	2200      	movs	r2, #0
   d611c:	f7ff bf82 	b.w	d6024 <network_set_listen_timeout>

000d6120 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d6120:	6840      	ldr	r0, [r0, #4]
   d6122:	2200      	movs	r2, #0
   d6124:	f081 0101 	eor.w	r1, r1, #1
   d6128:	f7ff bf6c 	b.w	d6004 <network_listen>

000d612c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d612c:	2300      	movs	r3, #0
   d612e:	6840      	ldr	r0, [r0, #4]
   d6130:	461a      	mov	r2, r3
   d6132:	4619      	mov	r1, r3
   d6134:	f7ff bf5e 	b.w	d5ff4 <network_off>

000d6138 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d6138:	2300      	movs	r3, #0
   d613a:	6840      	ldr	r0, [r0, #4]
   d613c:	461a      	mov	r2, r3
   d613e:	4619      	mov	r1, r3
   d6140:	f7ff bf50 	b.w	d5fe4 <network_on>

000d6144 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6144:	2200      	movs	r2, #0
   d6146:	6840      	ldr	r0, [r0, #4]
   d6148:	4611      	mov	r1, r2
   d614a:	f7ff bf43 	b.w	d5fd4 <network_ready>

000d614e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d614e:	2200      	movs	r2, #0
   d6150:	6840      	ldr	r0, [r0, #4]
   d6152:	4611      	mov	r1, r2
   d6154:	f7ff bf2e 	b.w	d5fb4 <network_connecting>

000d6158 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6158:	6840      	ldr	r0, [r0, #4]
   d615a:	2200      	movs	r2, #0
   d615c:	2102      	movs	r1, #2
   d615e:	f7ff bf31 	b.w	d5fc4 <network_disconnect>

000d6162 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d6162:	2300      	movs	r3, #0
   d6164:	6840      	ldr	r0, [r0, #4]
   d6166:	461a      	mov	r2, r3
   d6168:	f7ff bf1c 	b.w	d5fa4 <network_connect>

000d616c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d616c:	4b02      	ldr	r3, [pc, #8]	; (d6178 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d616e:	2203      	movs	r2, #3
   d6170:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d6172:	4a02      	ldr	r2, [pc, #8]	; (d617c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d6174:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d6176:	4770      	bx	lr
   d6178:	2003e640 	.word	0x2003e640
   d617c:	000d94fc 	.word	0x000d94fc

000d6180 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d6180:	b510      	push	{r4, lr}
   d6182:	4604      	mov	r4, r0
   d6184:	4608      	mov	r0, r1
{
    _spi = spi;
   d6186:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d6188:	f7ff fe88 	bl	d5e9c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d618c:	2300      	movs	r3, #0
   d618e:	6063      	str	r3, [r4, #4]
}
   d6190:	4620      	mov	r0, r4
   d6192:	bd10      	pop	{r4, pc}

000d6194 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d6194:	b510      	push	{r4, lr}
   d6196:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d6198:	6800      	ldr	r0, [r0, #0]
   d619a:	b118      	cbz	r0, d61a4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d619c:	f7ff ff82 	bl	d60a4 <free>
            wakeupSource_ = nullptr;
   d61a0:	2300      	movs	r3, #0
   d61a2:	6023      	str	r3, [r4, #0]
        }
    }
   d61a4:	bd10      	pop	{r4, pc}

000d61a6 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d61a6:	b510      	push	{r4, lr}
   d61a8:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d61aa:	f7ff fff3 	bl	d6194 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d61ae:	4620      	mov	r0, r4
   d61b0:	bd10      	pop	{r4, pc}
	...

000d61b4 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d61b4:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d61b6:	4b09      	ldr	r3, [pc, #36]	; (d61dc <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d61b8:	4c09      	ldr	r4, [pc, #36]	; (d61e0 <_GLOBAL__sub_I_System+0x2c>)
   d61ba:	2202      	movs	r2, #2
   d61bc:	2000      	movs	r0, #0
   d61be:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d61c0:	4b08      	ldr	r3, [pc, #32]	; (d61e4 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d61c2:	6020      	str	r0, [r4, #0]
   d61c4:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d61c6:	71a0      	strb	r0, [r4, #6]
   d61c8:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d61ca:	f7ff febf 	bl	d5f4c <set_system_mode>
SystemClass System;
   d61ce:	4620      	mov	r0, r4
   d61d0:	4a05      	ldr	r2, [pc, #20]	; (d61e8 <_GLOBAL__sub_I_System+0x34>)
   d61d2:	4906      	ldr	r1, [pc, #24]	; (d61ec <_GLOBAL__sub_I_System+0x38>)
   d61d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d61d8:	f001 be3e 	b.w	d7e58 <__aeabi_atexit>
   d61dc:	2003e654 	.word	0x2003e654
   d61e0:	2003e648 	.word	0x2003e648
   d61e4:	ffff0000 	.word	0xffff0000
   d61e8:	2003e518 	.word	0x2003e518
   d61ec:	000d61a7 	.word	0x000d61a7

000d61f0 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d61f0:	b510      	push	{r4, lr}
   d61f2:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d61f4:	f002 fde0 	bl	d8db8 <strlen>
   d61f8:	3801      	subs	r0, #1
   d61fa:	1823      	adds	r3, r4, r0
   d61fc:	4620      	mov	r0, r4
	while(i<j){
   d61fe:	4283      	cmp	r3, r0
   d6200:	d906      	bls.n	d6210 <_Z11str_reversePc+0x20>
		c = *i;
   d6202:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d6204:	7819      	ldrb	r1, [r3, #0]
   d6206:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d620a:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d620e:	e7f6      	b.n	d61fe <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d6210:	bd10      	pop	{r4, pc}

000d6212 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d6212:	b570      	push	{r4, r5, r6, lr}
   d6214:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d6216:	1e91      	subs	r1, r2, #2
   d6218:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d621a:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d621c:	d822      	bhi.n	d6264 <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d621e:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d6220:	b16d      	cbz	r5, d623e <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d6222:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d6226:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d622a:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d622c:	2d09      	cmp	r5, #9
                *ptr += '0';
   d622e:	bf94      	ite	ls
   d6230:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d6232:	3157      	addhi	r1, #87	; 0x57
   d6234:	b2c9      	uxtb	r1, r1
   d6236:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d623a:	4635      	mov	r5, r6
	while(a){
   d623c:	e7f0      	b.n	d6220 <ultoa+0xe>
   d623e:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d6240:	4423      	add	r3, r4
            *ptr++ = '0';
   d6242:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d6244:	4293      	cmp	r3, r2
   d6246:	d902      	bls.n	d624e <ultoa+0x3c>
            *ptr++ = '0';
   d6248:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d624c:	e7fa      	b.n	d6244 <ultoa+0x32>
   d624e:	1a1a      	subs	r2, r3, r0
   d6250:	4283      	cmp	r3, r0
   d6252:	bf38      	it	cc
   d6254:	2200      	movcc	r2, #0

	*ptr = '\0';
   d6256:	2300      	movs	r3, #0
   d6258:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d625a:	4620      	mov	r0, r4
   d625c:	f7ff ffc8 	bl	d61f0 <_Z11str_reversePc>
	return buffer;
   d6260:	4620      	mov	r0, r4
}
   d6262:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d6264:	2000      	movs	r0, #0
   d6266:	e7fc      	b.n	d6262 <ultoa+0x50>

000d6268 <utoa>:
		ultoa(a, buffer, radix);
	}
	return buffer;
}

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
   d6268:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
   d626a:	2301      	movs	r3, #1
   d626c:	f7ff ffd1 	bl	d6212 <ultoa>
}
   d6270:	bd08      	pop	{r3, pc}

000d6272 <_ZN9IPAddressaSIPKhEERS_T_>:
    void set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3);


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
   d6272:	b570      	push	{r4, r5, r6, lr}
   d6274:	b086      	sub	sp, #24
   d6276:	4606      	mov	r6, r0
class IPAddress : public Printable {
   d6278:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   d627a:	4668      	mov	r0, sp
   d627c:	f000 ff96 	bl	d71ac <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d6280:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6282:	1d34      	adds	r4, r6, #4
   d6284:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6286:	682b      	ldr	r3, [r5, #0]
   d6288:	7023      	strb	r3, [r4, #0]
    }
   d628a:	4630      	mov	r0, r6
   d628c:	b006      	add	sp, #24
   d628e:	bd70      	pop	{r4, r5, r6, pc}

000d6290 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d6290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6294:	ec57 6b10 	vmov	r6, r7, d0
   d6298:	4680      	mov	r8, r0
   d629a:	460c      	mov	r4, r1
    bool negative = val<0;
    if (negative) {
   d629c:	ee10 0a10 	vmov	r0, s0
   d62a0:	2200      	movs	r2, #0
   d62a2:	2300      	movs	r3, #0
   d62a4:	4639      	mov	r1, r7
   d62a6:	f002 fb23 	bl	d88f0 <__aeabi_dcmplt>
   d62aa:	b128      	cbz	r0, d62b8 <_Z4dtoadhPc+0x28>
        val = -val;
   d62ac:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d62b0:	461f      	mov	r7, r3
        *sout++ = '-';
   d62b2:	232d      	movs	r3, #45	; 0x2d
   d62b4:	f804 3b01 	strb.w	r3, [r4], #1
   d62b8:	2300      	movs	r3, #0
    }
    long scale = 1;
   d62ba:	f04f 0901 	mov.w	r9, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d62be:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
   d62c0:	b2d9      	uxtb	r1, r3
   d62c2:	4588      	cmp	r8, r1
   d62c4:	d903      	bls.n	d62ce <_Z4dtoadhPc+0x3e>
        scale *= 10;
   d62c6:	fb02 f909 	mul.w	r9, r2, r9
    for (uint8_t i=0; i<prec; i++)
   d62ca:	3301      	adds	r3, #1
   d62cc:	e7f8      	b.n	d62c0 <_Z4dtoadhPc+0x30>
    val *= scale;   // capture all the significant digits
   d62ce:	4648      	mov	r0, r9
   d62d0:	f002 f832 	bl	d8338 <__aeabi_i2d>
   d62d4:	4632      	mov	r2, r6
   d62d6:	463b      	mov	r3, r7
   d62d8:	f002 f898 	bl	d840c <__aeabi_dmul>
   d62dc:	4606      	mov	r6, r0
   d62de:	460f      	mov	r7, r1
    uint64_t fixed = uint64_t(val);
   d62e0:	f002 fb66 	bl	d89b0 <__aeabi_d2ulz>
   d62e4:	4605      	mov	r5, r0
   d62e6:	468a      	mov	sl, r1
    if ((val-fixed)>=0.5)    // round last digit
   d62e8:	f002 f85a 	bl	d83a0 <__aeabi_ul2d>
   d62ec:	4602      	mov	r2, r0
   d62ee:	460b      	mov	r3, r1
   d62f0:	4630      	mov	r0, r6
   d62f2:	4639      	mov	r1, r7
   d62f4:	f001 fed2 	bl	d809c <__aeabi_dsub>
   d62f8:	4b13      	ldr	r3, [pc, #76]	; (d6348 <_Z4dtoadhPc+0xb8>)
   d62fa:	2200      	movs	r2, #0
   d62fc:	f002 fb0c 	bl	d8918 <__aeabi_dcmpge>
   d6300:	b110      	cbz	r0, d6308 <_Z4dtoadhPc+0x78>
        fixed++;
   d6302:	3501      	adds	r5, #1
   d6304:	f14a 0a00 	adc.w	sl, sl, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d6308:	464a      	mov	r2, r9
   d630a:	4628      	mov	r0, r5
   d630c:	17d3      	asrs	r3, r2, #31
   d630e:	4651      	mov	r1, sl
   d6310:	f002 fb36 	bl	d8980 <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d6314:	2301      	movs	r3, #1
   d6316:	4615      	mov	r5, r2
   d6318:	4621      	mov	r1, r4
   d631a:	220a      	movs	r2, #10
   d631c:	f7ff ff79 	bl	d6212 <ultoa>
    if (prec) {
   d6320:	f1b8 0f00 	cmp.w	r8, #0
   d6324:	d00d      	beq.n	d6342 <_Z4dtoadhPc+0xb2>
        sout += strlen(sout);
   d6326:	4620      	mov	r0, r4
   d6328:	f002 fd46 	bl	d8db8 <strlen>
        *sout++ = '.';
   d632c:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
   d632e:	1821      	adds	r1, r4, r0
        *sout++ = '.';
   d6330:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
   d6332:	220a      	movs	r2, #10
   d6334:	4643      	mov	r3, r8
   d6336:	4628      	mov	r0, r5
   d6338:	3101      	adds	r1, #1
    }
}
   d633a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ultoa(second, sout, 10, prec);
   d633e:	f7ff bf68 	b.w	d6212 <ultoa>
}
   d6342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6346:	bf00      	nop
   d6348:	3fe00000 	.word	0x3fe00000

000d634c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d634c:	b510      	push	{r4, lr}
   d634e:	4604      	mov	r4, r0
{
	free(buffer);
   d6350:	6800      	ldr	r0, [r0, #0]
   d6352:	f7ff fea7 	bl	d60a4 <free>
}
   d6356:	4620      	mov	r0, r4
   d6358:	bd10      	pop	{r4, pc}

000d635a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d635a:	b510      	push	{r4, lr}
   d635c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d635e:	6800      	ldr	r0, [r0, #0]
   d6360:	b108      	cbz	r0, d6366 <_ZN6String10invalidateEv+0xc>
   d6362:	f7ff fe9f 	bl	d60a4 <free>
	buffer = NULL;
   d6366:	2300      	movs	r3, #0
	capacity = len = 0;
   d6368:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d636c:	6023      	str	r3, [r4, #0]
}
   d636e:	bd10      	pop	{r4, pc}

000d6370 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d6370:	b538      	push	{r3, r4, r5, lr}
   d6372:	4604      	mov	r4, r0
   d6374:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d6376:	6800      	ldr	r0, [r0, #0]
   d6378:	3101      	adds	r1, #1
   d637a:	f7ff fe9b 	bl	d60b4 <realloc>
	if (newbuffer) {
   d637e:	b110      	cbz	r0, d6386 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d6380:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d6384:	2001      	movs	r0, #1
	}
	return 0;
}
   d6386:	bd38      	pop	{r3, r4, r5, pc}

000d6388 <_ZN6String7reserveEj>:
{
   d6388:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d638a:	6803      	ldr	r3, [r0, #0]
{
   d638c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d638e:	b123      	cbz	r3, d639a <_ZN6String7reserveEj+0x12>
   d6390:	6843      	ldr	r3, [r0, #4]
   d6392:	428b      	cmp	r3, r1
   d6394:	d301      	bcc.n	d639a <_ZN6String7reserveEj+0x12>
   d6396:	2001      	movs	r0, #1
}
   d6398:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d639a:	4620      	mov	r0, r4
   d639c:	f7ff ffe8 	bl	d6370 <_ZN6String12changeBufferEj>
   d63a0:	2800      	cmp	r0, #0
   d63a2:	d0f9      	beq.n	d6398 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d63a4:	68a3      	ldr	r3, [r4, #8]
   d63a6:	2b00      	cmp	r3, #0
   d63a8:	d1f5      	bne.n	d6396 <_ZN6String7reserveEj+0xe>
   d63aa:	6822      	ldr	r2, [r4, #0]
   d63ac:	7013      	strb	r3, [r2, #0]
   d63ae:	e7f2      	b.n	d6396 <_ZN6String7reserveEj+0xe>

000d63b0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d63b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d63b2:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d63b4:	4611      	mov	r1, r2
   d63b6:	9201      	str	r2, [sp, #4]
{
   d63b8:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d63ba:	f7ff ffe5 	bl	d6388 <_ZN6String7reserveEj>
   d63be:	9a01      	ldr	r2, [sp, #4]
   d63c0:	b928      	cbnz	r0, d63ce <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d63c2:	4620      	mov	r0, r4
   d63c4:	f7ff ffc9 	bl	d635a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d63c8:	4620      	mov	r0, r4
   d63ca:	b003      	add	sp, #12
   d63cc:	bd30      	pop	{r4, r5, pc}
	len = length;
   d63ce:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d63d0:	4629      	mov	r1, r5
   d63d2:	6820      	ldr	r0, [r4, #0]
   d63d4:	f002 fc92 	bl	d8cfc <memcpy>
	buffer[len] = 0;
   d63d8:	6822      	ldr	r2, [r4, #0]
   d63da:	68a3      	ldr	r3, [r4, #8]
   d63dc:	2100      	movs	r1, #0
   d63de:	54d1      	strb	r1, [r2, r3]
	return *this;
   d63e0:	e7f2      	b.n	d63c8 <_ZN6String4copyEPKcj+0x18>

000d63e2 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d63e2:	2300      	movs	r3, #0
String::String(const char *cstr)
   d63e4:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d63e6:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d63ea:	4604      	mov	r4, r0
	len = 0;
   d63ec:	6083      	str	r3, [r0, #8]
	flags = 0;
   d63ee:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d63f0:	b141      	cbz	r1, d6404 <_ZN6StringC1EPKc+0x22>
   d63f2:	4608      	mov	r0, r1
   d63f4:	9101      	str	r1, [sp, #4]
   d63f6:	f002 fcdf 	bl	d8db8 <strlen>
   d63fa:	9901      	ldr	r1, [sp, #4]
   d63fc:	4602      	mov	r2, r0
   d63fe:	4620      	mov	r0, r4
   d6400:	f7ff ffd6 	bl	d63b0 <_ZN6String4copyEPKcj>
}
   d6404:	4620      	mov	r0, r4
   d6406:	b002      	add	sp, #8
   d6408:	bd10      	pop	{r4, pc}

000d640a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d640a:	b513      	push	{r0, r1, r4, lr}
   d640c:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d640e:	b159      	cbz	r1, d6428 <_ZN6StringaSEPKc+0x1e>
   d6410:	4608      	mov	r0, r1
   d6412:	9101      	str	r1, [sp, #4]
   d6414:	f002 fcd0 	bl	d8db8 <strlen>
   d6418:	9901      	ldr	r1, [sp, #4]
   d641a:	4602      	mov	r2, r0
   d641c:	4620      	mov	r0, r4
   d641e:	f7ff ffc7 	bl	d63b0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d6422:	4620      	mov	r0, r4
   d6424:	b002      	add	sp, #8
   d6426:	bd10      	pop	{r4, pc}
	else invalidate();
   d6428:	f7ff ff97 	bl	d635a <_ZN6String10invalidateEv>
   d642c:	e7f9      	b.n	d6422 <_ZN6StringaSEPKc+0x18>

000d642e <_ZN6StringC1Ejh>:
String::String(unsigned int value, unsigned char base)
   d642e:	b510      	push	{r4, lr}
   d6430:	4604      	mov	r4, r0
   d6432:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d6434:	2300      	movs	r3, #0
	capacity = 0;
   d6436:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d643a:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d643c:	7323      	strb	r3, [r4, #12]
String::String(unsigned int value, unsigned char base)
   d643e:	4608      	mov	r0, r1
	utoa(value, buf, base);
   d6440:	a901      	add	r1, sp, #4
   d6442:	f7ff ff11 	bl	d6268 <utoa>
	*this = buf;
   d6446:	a901      	add	r1, sp, #4
   d6448:	4620      	mov	r0, r4
   d644a:	f7ff ffde 	bl	d640a <_ZN6StringaSEPKc>
}
   d644e:	4620      	mov	r0, r4
   d6450:	b00a      	add	sp, #40	; 0x28
   d6452:	bd10      	pop	{r4, pc}

000d6454 <_ZN6StringC1Edi>:
String::String(double value, int decimalPlaces)
   d6454:	b510      	push	{r4, lr}
   d6456:	4604      	mov	r4, r0
   d6458:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d645a:	2300      	movs	r3, #0
String::String(double value, int decimalPlaces)
   d645c:	4608      	mov	r0, r1
	capacity = 0;
   d645e:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d6462:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d6464:	7323      	strb	r3, [r4, #12]
	dtoa(value, decimalPlaces, buf);
   d6466:	a901      	add	r1, sp, #4
   d6468:	b2c0      	uxtb	r0, r0
   d646a:	f7ff ff11 	bl	d6290 <_Z4dtoadhPc>
        *this = buf;
   d646e:	a901      	add	r1, sp, #4
   d6470:	4620      	mov	r0, r4
   d6472:	f7ff ffca 	bl	d640a <_ZN6StringaSEPKc>
}
   d6476:	4620      	mov	r0, r4
   d6478:	b00a      	add	sp, #40	; 0x28
   d647a:	bd10      	pop	{r4, pc}

000d647c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d647c:	4770      	bx	lr
	...

000d6480 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d6480:	4b06      	ldr	r3, [pc, #24]	; (d649c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d6482:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d6484:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   d6486:	f100 040c 	add.w	r4, r0, #12
	    ||
   d648a:	d005      	beq.n	d6498 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d648c:	4608      	mov	r0, r1
   d648e:	f001 fcef 	bl	d7e70 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d6492:	2800      	cmp	r0, #0
	return nullptr;
   d6494:	bf08      	it	eq
   d6496:	2400      	moveq	r4, #0
      }
   d6498:	4620      	mov	r0, r4
   d649a:	bd10      	pop	{r4, pc}
   d649c:	000d95d8 	.word	0x000d95d8

000d64a0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d64a0:	b510      	push	{r4, lr}
   d64a2:	2130      	movs	r1, #48	; 0x30
   d64a4:	4604      	mov	r4, r0
   d64a6:	f001 fcdc 	bl	d7e62 <_ZdlPvj>
   d64aa:	4620      	mov	r0, r4
   d64ac:	bd10      	pop	{r4, pc}

000d64ae <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d64ae:	f7fd bdf6 	b.w	d409e <_ZdlPv>

000d64b2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d64b2:	b510      	push	{r4, lr}
          _M_dispose();
   d64b4:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d64b6:	4604      	mov	r4, r0
          _M_dispose();
   d64b8:	689b      	ldr	r3, [r3, #8]
   d64ba:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d64bc:	68a3      	ldr	r3, [r4, #8]
   d64be:	3b01      	subs	r3, #1
   d64c0:	60a3      	str	r3, [r4, #8]
   d64c2:	b92b      	cbnz	r3, d64d0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d64c4:	6823      	ldr	r3, [r4, #0]
   d64c6:	4620      	mov	r0, r4
   d64c8:	68db      	ldr	r3, [r3, #12]
    }
   d64ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d64ce:	4718      	bx	r3
    }
   d64d0:	bd10      	pop	{r4, pc}

000d64d2 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d64d2:	b510      	push	{r4, lr}
   d64d4:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d64d6:	6800      	ldr	r0, [r0, #0]
   d64d8:	b108      	cbz	r0, d64de <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d64da:	f7ff fbe7 	bl	d5cac <os_mutex_recursive_destroy>
    }
   d64de:	4620      	mov	r0, r4
   d64e0:	bd10      	pop	{r4, pc}
	...

000d64e4 <_ZN8particle3ble13WiringBleLock4lockEv.isra.0>:
    WiringBleLock(WiringBleLock&& lock) :
            locked_(lock.locked_) {
        lock.locked_ = false;
    }

    void lock() {
   d64e4:	b510      	push	{r4, lr}
        mutex_.lock();
   d64e6:	4b04      	ldr	r3, [pc, #16]	; (d64f8 <_ZN8particle3ble13WiringBleLock4lockEv.isra.0+0x14>)
    void lock() {
   d64e8:	4604      	mov	r4, r0
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d64ea:	6818      	ldr	r0, [r3, #0]
   d64ec:	f7ff fbe6 	bl	d5cbc <os_mutex_recursive_lock>
        locked_ = true;
   d64f0:	2301      	movs	r3, #1
   d64f2:	7023      	strb	r3, [r4, #0]
    }
   d64f4:	bd10      	pop	{r4, pc}
   d64f6:	bf00      	nop
   d64f8:	2003e65c 	.word	0x2003e65c

000d64fc <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0>:

    void unlock() {
   d64fc:	b510      	push	{r4, lr}
        mutex_.unlock();
   d64fe:	4b04      	ldr	r3, [pc, #16]	; (d6510 <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0+0x14>)
    void unlock() {
   d6500:	4604      	mov	r4, r0
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d6502:	6818      	ldr	r0, [r3, #0]
   d6504:	f7ff fbe2 	bl	d5ccc <os_mutex_recursive_unlock>
        locked_ = false;
   d6508:	2300      	movs	r3, #0
   d650a:	7023      	strb	r3, [r4, #0]
    }
   d650c:	bd10      	pop	{r4, pc}
   d650e:	bf00      	nop
   d6510:	2003e65c 	.word	0x2003e65c

000d6514 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d6514:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d6516:	2500      	movs	r5, #0
   d6518:	1cec      	adds	r4, r5, #3
   d651a:	428c      	cmp	r4, r1
   d651c:	d80d      	bhi.n	d653a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d651e:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   d6520:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   d6522:	5d87      	ldrb	r7, [r0, r6]
   d6524:	4297      	cmp	r7, r2
   d6526:	d105      	bne.n	d6534 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d6528:	4426      	add	r6, r4
   d652a:	42b1      	cmp	r1, r6
   d652c:	d305      	bcc.n	d653a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   d652e:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   d6530:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d6532:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   d6534:	3401      	adds	r4, #1
   d6536:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d6538:	e7ee      	b.n	d6518 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   d653a:	2000      	movs	r0, #0
   d653c:	e7f9      	b.n	d6532 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>

000d653e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d653e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d6542:	4604      	mov	r4, r0
   d6544:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
   d6548:	461e      	mov	r6, r3
   d654a:	4689      	mov	r9, r1
   d654c:	ab01      	add	r3, sp, #4
   d654e:	4690      	mov	r8, r2
   d6550:	460a      	mov	r2, r1
   d6552:	6a01      	ldr	r1, [r0, #32]
   d6554:	f7ff ffde 	bl	d6514 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (!force && adsLen > 0) {
   d6558:	6a25      	ldr	r5, [r4, #32]
   d655a:	1cb3      	adds	r3, r6, #2
   d655c:	bb17      	cbnz	r7, d65a4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x66>
   d655e:	b308      	cbz	r0, d65a4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x66>
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d6560:	195f      	adds	r7, r3, r5
   d6562:	1a3f      	subs	r7, r7, r0
   d6564:	2f1f      	cmp	r7, #31
   d6566:	d819      	bhi.n	d659c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5e>
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d6568:	f8dd 9004 	ldr.w	r9, [sp, #4]
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d656c:	f109 0a02 	add.w	sl, r9, #2
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d6570:	eba5 0209 	sub.w	r2, r5, r9
   d6574:	1a12      	subs	r2, r2, r0
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d6576:	eb00 0109 	add.w	r1, r0, r9
   d657a:	eb06 000a 	add.w	r0, r6, sl
   d657e:	b292      	uxth	r2, r2
   d6580:	4421      	add	r1, r4
   d6582:	4420      	add	r0, r4
   d6584:	f002 fbc8 	bl	d8d18 <memmove>
            selfData_[offset] = len + 1;
   d6588:	1c73      	adds	r3, r6, #1
   d658a:	f804 3009 	strb.w	r3, [r4, r9]
            memcpy(&selfData_[offset + 2], buf, len);
   d658e:	4632      	mov	r2, r6
   d6590:	4641      	mov	r1, r8
   d6592:	eb04 000a 	add.w	r0, r4, sl
   d6596:	f002 fbb1 	bl	d8cfc <memcpy>
            selfLen_ = staLen + len + 2;
   d659a:	6227      	str	r7, [r4, #32]
}
   d659c:	6a20      	ldr	r0, [r4, #32]
   d659e:	b002      	add	sp, #8
   d65a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d65a4:	442b      	add	r3, r5
   d65a6:	2b1f      	cmp	r3, #31
   d65a8:	d8f8      	bhi.n	d659c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5e>
        selfData_[selfLen_++] = len + 1;
   d65aa:	1c73      	adds	r3, r6, #1
   d65ac:	5563      	strb	r3, [r4, r5]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d65ae:	1ca8      	adds	r0, r5, #2
   d65b0:	4425      	add	r5, r4
   d65b2:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d65b4:	4632      	mov	r2, r6
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d65b6:	f885 9001 	strb.w	r9, [r5, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d65ba:	4641      	mov	r1, r8
   d65bc:	4420      	add	r0, r4
   d65be:	f002 fb9d 	bl	d8cfc <memcpy>
        selfLen_ += len;
   d65c2:	6a23      	ldr	r3, [r4, #32]
   d65c4:	4433      	add	r3, r6
   d65c6:	6223      	str	r3, [r4, #32]
   d65c8:	e7e8      	b.n	d659c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5e>

000d65ca <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d65ca:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d65cc:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d65ce:	4604      	mov	r4, r0
      if (_M_manager)
   d65d0:	b113      	cbz	r3, d65d8 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d65d2:	2203      	movs	r2, #3
   d65d4:	4601      	mov	r1, r0
   d65d6:	4798      	blx	r3
    }
   d65d8:	4620      	mov	r0, r4
   d65da:	bd10      	pop	{r4, pc}

000d65dc <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d65dc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d65e0:	b2da      	uxtb	r2, r3
   d65e2:	2a09      	cmp	r2, #9
   d65e4:	d801      	bhi.n	d65ea <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   d65e6:	4618      	mov	r0, r3
   d65e8:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   d65ea:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d65ee:	2b05      	cmp	r3, #5
   d65f0:	d801      	bhi.n	d65f6 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   d65f2:	3857      	subs	r0, #87	; 0x57
   d65f4:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   d65f6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d65fa:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d65fc:	bf94      	ite	ls
   d65fe:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   d6600:	f04f 30ff 	movhi.w	r0, #4294967295
}
   d6604:	4770      	bx	lr

000d6606 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   d6606:	b510      	push	{r4, lr}
            locked_(false) {
   d6608:	2300      	movs	r3, #0
    WiringBleLock() :
   d660a:	4604      	mov	r4, r0
            locked_(false) {
   d660c:	7003      	strb	r3, [r0, #0]
        lock();
   d660e:	f7ff ff69 	bl	d64e4 <_ZN8particle3ble13WiringBleLock4lockEv.isra.0>
    }
   d6612:	4620      	mov	r0, r4
   d6614:	bd10      	pop	{r4, pc}

000d6616 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   d6616:	b510      	push	{r4, lr}
        if (locked_) {
   d6618:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   d661a:	4604      	mov	r4, r0
        if (locked_) {
   d661c:	b10b      	cbz	r3, d6622 <_ZN8particle3ble13WiringBleLockD1Ev+0xc>
            unlock();
   d661e:	f7ff ff6d 	bl	d64fc <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0>
    }
   d6622:	4620      	mov	r0, r4
   d6624:	bd10      	pop	{r4, pc}

000d6626 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   d6626:	b082      	sub	sp, #8
   d6628:	4603      	mov	r3, r0
    address_ = addr;
   d662a:	6808      	ldr	r0, [r1, #0]
   d662c:	6849      	ldr	r1, [r1, #4]
   d662e:	466a      	mov	r2, sp
   d6630:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   d6632:	466a      	mov	r2, sp
   d6634:	ca03      	ldmia	r2!, {r0, r1}
   d6636:	6018      	str	r0, [r3, #0]
}
   d6638:	4618      	mov	r0, r3
    address_ = addr.address_;
   d663a:	6059      	str	r1, [r3, #4]
}
   d663c:	b002      	add	sp, #8
   d663e:	4770      	bx	lr

000d6640 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   d6640:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d6642:	7982      	ldrb	r2, [r0, #6]
   d6644:	798b      	ldrb	r3, [r1, #6]
   d6646:	429a      	cmp	r2, r3
   d6648:	d106      	bne.n	d6658 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d664a:	2206      	movs	r2, #6
   d664c:	f002 fb48 	bl	d8ce0 <memcmp>
   d6650:	fab0 f080 	clz	r0, r0
   d6654:	0940      	lsrs	r0, r0, #5
}
   d6656:	bd08      	pop	{r3, pc}
    return false;
   d6658:	2000      	movs	r0, #0
   d665a:	e7fc      	b.n	d6656 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000d665c <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   d665c:	f04f 33ff 	mov.w	r3, #4294967295
   d6660:	6003      	str	r3, [r0, #0]
   d6662:	8083      	strh	r3, [r0, #4]
}
   d6664:	2000      	movs	r0, #0
   d6666:	4770      	bx	lr

000d6668 <_ZN8particle10BleAddressC1Ev>:
        : address_{} {
   d6668:	2100      	movs	r1, #0
BleAddress::BleAddress()
   d666a:	b508      	push	{r3, lr}
        : address_{} {
   d666c:	6001      	str	r1, [r0, #0]
   d666e:	6041      	str	r1, [r0, #4]
BleAddress::BleAddress()
   d6670:	4602      	mov	r2, r0
    clear();
   d6672:	f7ff fff3 	bl	d665c <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   d6676:	7191      	strb	r1, [r2, #6]
}
   d6678:	4610      	mov	r0, r2
   d667a:	bd08      	pop	{r3, pc}

000d667c <_ZN8particle7BleUuidC1Ev>:
        : type_(BleUuidType::LONG) {
   d667c:	2201      	movs	r2, #1
   d667e:	6102      	str	r2, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d6680:	4a06      	ldr	r2, [pc, #24]	; (d669c <_ZN8particle7BleUuidC1Ev+0x20>)
   d6682:	6811      	ldr	r1, [r2, #0]
   d6684:	6001      	str	r1, [r0, #0]
   d6686:	6851      	ldr	r1, [r2, #4]
   d6688:	6041      	str	r1, [r0, #4]
   d668a:	8911      	ldrh	r1, [r2, #8]
   d668c:	7a92      	ldrb	r2, [r2, #10]
   d668e:	7282      	strb	r2, [r0, #10]
   d6690:	2200      	movs	r2, #0
   d6692:	8101      	strh	r1, [r0, #8]
   d6694:	f8c0 200b 	str.w	r2, [r0, #11]
   d6698:	73c2      	strb	r2, [r0, #15]
}
   d669a:	4770      	bx	lr
   d669c:	000d95e0 	.word	0x000d95e0

000d66a0 <_ZN8particle7BleUuidC1ERKS0_>:
BleUuid::BleUuid(const BleUuid& uuid)
   d66a0:	b510      	push	{r4, lr}
        : type_(uuid.type_) {
   d66a2:	690b      	ldr	r3, [r1, #16]
   d66a4:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d66a6:	f101 0210 	add.w	r2, r1, #16
   d66aa:	4603      	mov	r3, r0
   d66ac:	f851 4b04 	ldr.w	r4, [r1], #4
   d66b0:	f843 4b04 	str.w	r4, [r3], #4
   d66b4:	4291      	cmp	r1, r2
   d66b6:	d1f9      	bne.n	d66ac <_ZN8particle7BleUuidC1ERKS0_+0xc>
}
   d66b8:	bd10      	pop	{r4, pc}

000d66ba <_ZNK8particle7BleUuid4typeEv>:
}
   d66ba:	6900      	ldr	r0, [r0, #16]
   d66bc:	4770      	bx	lr

000d66be <_ZNK8particle7BleUuid7shortedEv>:
    return ((uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8));
   d66be:	7b42      	ldrb	r2, [r0, #13]
   d66c0:	7b00      	ldrb	r0, [r0, #12]
}
   d66c2:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   d66c6:	4770      	bx	lr

000d66c8 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   d66c8:	4770      	bx	lr
	...

000d66cc <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   d66cc:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   d66ce:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   d66d2:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d66d4:	4b32      	ldr	r3, [pc, #200]	; (d67a0 <_ZN8particle7BleUuid9constructEPKc+0xd4>)
   d66d6:	681a      	ldr	r2, [r3, #0]
   d66d8:	6002      	str	r2, [r0, #0]
   d66da:	685a      	ldr	r2, [r3, #4]
   d66dc:	6042      	str	r2, [r0, #4]
   d66de:	2500      	movs	r5, #0
   d66e0:	891a      	ldrh	r2, [r3, #8]
   d66e2:	7a9b      	ldrb	r3, [r3, #10]
   d66e4:	8102      	strh	r2, [r0, #8]
void BleUuid::construct(const char* uuid) {
   d66e6:	4604      	mov	r4, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d66e8:	7283      	strb	r3, [r0, #10]
   d66ea:	f8c0 500b 	str.w	r5, [r0, #11]
   d66ee:	73c5      	strb	r5, [r0, #15]
    if (uuid == nullptr) {
   d66f0:	460e      	mov	r6, r1
   d66f2:	b321      	cbz	r1, d673e <_ZN8particle7BleUuid9constructEPKc+0x72>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   d66f4:	2124      	movs	r1, #36	; 0x24
   d66f6:	4630      	mov	r0, r6
   d66f8:	f002 fb79 	bl	d8dee <strnlen>
   d66fc:	2804      	cmp	r0, #4
   d66fe:	d121      	bne.n	d6744 <_ZN8particle7BleUuid9constructEPKc+0x78>
        char buf[2] = {};
   d6700:	f8ad 5004 	strh.w	r5, [sp, #4]
   d6704:	af01      	add	r7, sp, #4
   d6706:	1cb5      	adds	r5, r6, #2
   d6708:	3606      	adds	r6, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d670a:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   d670e:	f7ff ff65 	bl	d65dc <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d6712:	f1b0 0800 	subs.w	r8, r0, #0
   d6716:	db10      	blt.n	d673a <_ZN8particle7BleUuid9constructEPKc+0x6e>
            break;
        }
        const int l = hexToNibble(*src++);
   d6718:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   d671c:	f7ff ff5e 	bl	d65dc <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d6720:	2800      	cmp	r0, #0
   d6722:	db0a      	blt.n	d673a <_ZN8particle7BleUuid9constructEPKc+0x6e>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d6724:	3502      	adds	r5, #2
   d6726:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   d672a:	42ae      	cmp	r6, r5
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d672c:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   d6730:	d1eb      	bne.n	d670a <_ZN8particle7BleUuid9constructEPKc+0x3e>
            uuid128_[UUID16_LO] = buf[1];
   d6732:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   d6736:	ba5b      	rev16	r3, r3
   d6738:	81a3      	strh	r3, [r4, #12]
        type_ = BleUuidType::SHORT;
   d673a:	2300      	movs	r3, #0
   d673c:	6123      	str	r3, [r4, #16]
}
   d673e:	b002      	add	sp, #8
   d6740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   d6744:	2710      	movs	r7, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d6746:	2124      	movs	r1, #36	; 0x24
   d6748:	4630      	mov	r0, r6
   d674a:	f002 fb50 	bl	d8dee <strnlen>
   d674e:	42a8      	cmp	r0, r5
   d6750:	d806      	bhi.n	d6760 <_ZN8particle7BleUuid9constructEPKc+0x94>
   d6752:	4427      	add	r7, r4
        uuid128_[len - 1] = 0x00;
   d6754:	2300      	movs	r3, #0
    while (len > 0) {
   d6756:	42bc      	cmp	r4, r7
   d6758:	d0f1      	beq.n	d673e <_ZN8particle7BleUuid9constructEPKc+0x72>
        uuid128_[len - 1] = 0x00;
   d675a:	f807 3d01 	strb.w	r3, [r7, #-1]!
    while (len > 0) {
   d675e:	e7fa      	b.n	d6756 <_ZN8particle7BleUuid9constructEPKc+0x8a>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d6760:	2f00      	cmp	r7, #0
   d6762:	d0ec      	beq.n	d673e <_ZN8particle7BleUuid9constructEPKc+0x72>
        int8_t hi = hexToNibble(uuid[i]);
   d6764:	5d70      	ldrb	r0, [r6, r5]
   d6766:	f7ff ff39 	bl	d65dc <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   d676a:	0603      	lsls	r3, r0, #24
   d676c:	d415      	bmi.n	d679a <_ZN8particle7BleUuid9constructEPKc+0xce>
            uuid128_[len - 1] = hi << 4;
   d676e:	0100      	lsls	r0, r0, #4
   d6770:	3f01      	subs	r7, #1
   d6772:	fa5f f880 	uxtb.w	r8, r0
   d6776:	f804 8007 	strb.w	r8, [r4, r7]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   d677a:	2124      	movs	r1, #36	; 0x24
   d677c:	4630      	mov	r0, r6
   d677e:	f002 fb36 	bl	d8dee <strnlen>
   d6782:	3501      	adds	r5, #1
   d6784:	42a8      	cmp	r0, r5
   d6786:	d908      	bls.n	d679a <_ZN8particle7BleUuid9constructEPKc+0xce>
                int8_t lo = hexToNibble(uuid[i]);
   d6788:	5d70      	ldrb	r0, [r6, r5]
   d678a:	f7ff ff27 	bl	d65dc <_ZN8particle11hexToNibbleEc>
   d678e:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   d6790:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   d6792:	bfa4      	itt	ge
   d6794:	ea40 0008 	orrge.w	r0, r0, r8
   d6798:	55e0      	strbge	r0, [r4, r7]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d679a:	3501      	adds	r5, #1
   d679c:	e7d3      	b.n	d6746 <_ZN8particle7BleUuid9constructEPKc+0x7a>
   d679e:	bf00      	nop
   d67a0:	000d95e0 	.word	0x000d95e0

000d67a4 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   d67a4:	b513      	push	{r0, r1, r4, lr}
   d67a6:	4604      	mov	r4, r0
   d67a8:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   d67aa:	f7ff ff67 	bl	d667c <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   d67ae:	4620      	mov	r0, r4
   d67b0:	9901      	ldr	r1, [sp, #4]
   d67b2:	f7ff ff8b 	bl	d66cc <_ZN8particle7BleUuid9constructEPKc>
}
   d67b6:	4620      	mov	r0, r4
   d67b8:	b002      	add	sp, #8
   d67ba:	bd10      	pop	{r4, pc}

000d67bc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d67bc:	b430      	push	{r4, r5}
   d67be:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   d67c2:	b912      	cbnz	r2, d67ca <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0xe>
        return selfLen_;
   d67c4:	6a00      	ldr	r0, [r0, #32]
}
   d67c6:	bc30      	pop	{r4, r5}
   d67c8:	4770      	bx	lr
   d67ca:	9502      	str	r5, [sp, #8]
   d67cc:	bc30      	pop	{r4, r5}
   d67ce:	f7ff beb6 	b.w	d653e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>

000d67d2 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   d67d2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d67d4:	4604      	mov	r4, r0
          selfLen_(0) {
   d67d6:	4602      	mov	r2, r0
   d67d8:	f100 011f 	add.w	r1, r0, #31
   d67dc:	2300      	movs	r3, #0
   d67de:	f802 3b01 	strb.w	r3, [r2], #1
   d67e2:	4291      	cmp	r1, r2
   d67e4:	d1fb      	bne.n	d67de <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
   d67e6:	6223      	str	r3, [r4, #32]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d67e8:	9300      	str	r3, [sp, #0]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d67ea:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d67ec:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d67ee:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d67f2:	4619      	mov	r1, r3
   d67f4:	f10d 020f 	add.w	r2, sp, #15
   d67f8:	4620      	mov	r0, r4
   d67fa:	f7ff ffdf 	bl	d67bc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d67fe:	4620      	mov	r0, r4
   d6800:	b004      	add	sp, #16
   d6802:	bd10      	pop	{r4, pc}

000d6804 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d6804:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (offset == nullptr) {
   d6806:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d6808:	460e      	mov	r6, r1
   d680a:	ab01      	add	r3, sp, #4
   d680c:	6a01      	ldr	r1, [r0, #32]
   d680e:	4604      	mov	r4, r0
   d6810:	f7ff fe80 	bl	d6514 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   d6814:	4605      	mov	r5, r0
   d6816:	b178      	cbz	r0, d6838 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x34>
        size_t moveLen = selfLen_ - offset - len;
   d6818:	9801      	ldr	r0, [sp, #4]
   d681a:	6a22      	ldr	r2, [r4, #32]
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d681c:	1941      	adds	r1, r0, r5
        size_t moveLen = selfLen_ - offset - len;
   d681e:	1a12      	subs	r2, r2, r0
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d6820:	4421      	add	r1, r4
   d6822:	1b52      	subs	r2, r2, r5
   d6824:	4420      	add	r0, r4
   d6826:	f002 fa69 	bl	d8cfc <memcpy>
        selfLen_ -= len;
   d682a:	6a20      	ldr	r0, [r4, #32]
   d682c:	1b40      	subs	r0, r0, r5
   d682e:	6220      	str	r0, [r4, #32]
        remove(type);
   d6830:	4631      	mov	r1, r6
   d6832:	4620      	mov	r0, r4
   d6834:	f7ff ffe6 	bl	d6804 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   d6838:	b002      	add	sp, #8
   d683a:	bd70      	pop	{r4, r5, r6, pc}

000d683c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:

    void onPairingEvent(const BleOnPairingEventStdFunction& callback) {
        pairingEventCallback_ = callback;
    }

    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d683c:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d683e:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   d6842:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d6846:	4293      	cmp	r3, r2
   d6848:	4618      	mov	r0, r3
   d684a:	d006      	beq.n	d685a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d684c:	6804      	ldr	r4, [r0, #0]
   d684e:	8824      	ldrh	r4, [r4, #0]
   d6850:	428c      	cmp	r4, r1
   d6852:	f103 0308 	add.w	r3, r3, #8
   d6856:	d1f6      	bne.n	d6846 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
                return &peer;
            }
        }
        return nullptr;
    }
   d6858:	bd10      	pop	{r4, pc}
        return nullptr;
   d685a:	2000      	movs	r0, #0
   d685c:	e7fc      	b.n	d6858 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000d6860 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d6860:	b570      	push	{r4, r5, r6, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d6862:	2500      	movs	r5, #0
   d6864:	6005      	str	r5, [r0, #0]
   d6866:	4606      	mov	r6, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6868:	2030      	movs	r0, #48	; 0x30
   d686a:	f7fd fc14 	bl	d4096 <_Znwj>
	  auto __pi = ::new (__mem)
   d686e:	4604      	mov	r4, r0
   d6870:	b188      	cbz	r0, d6896 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   d6872:	2301      	movs	r3, #1
   d6874:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   d6878:	4b09      	ldr	r3, [pc, #36]	; (d68a0 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   d687a:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   d687c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d6880:	8183      	strh	r3, [r0, #12]
   d6882:	300e      	adds	r0, #14
   d6884:	f7ff fef0 	bl	d6668 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   d6888:	e9c4 5506 	strd	r5, r5, [r4, #24]
   d688c:	e9c4 5508 	strd	r5, r5, [r4, #32]
   d6890:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   d6894:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   d6896:	6074      	str	r4, [r6, #4]
   d6898:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   d689a:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   d689c:	4630      	mov	r0, r6
   d689e:	bd70      	pop	{r4, r5, r6, pc}
   d68a0:	000d95c4 	.word	0x000d95c4

000d68a4 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   d68a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d68a6:	460d      	mov	r5, r1
   d68a8:	4604      	mov	r4, r0
    WiringBleLock lk;
   d68aa:	a801      	add	r0, sp, #4
   d68ac:	f7ff feab 	bl	d6606 <_ZN8particle3ble13WiringBleLockC1Ev>
    address_ = addr.address_;
   d68b0:	682a      	ldr	r2, [r5, #0]
   d68b2:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d68b6:	6023      	str	r3, [r4, #0]
   d68b8:	6853      	ldr	r3, [r2, #4]
   d68ba:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   d68bc:	a801      	add	r0, sp, #4
   d68be:	f7ff feaa 	bl	d6616 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   d68c2:	4620      	mov	r0, r4
   d68c4:	b003      	add	sp, #12
   d68c6:	bd30      	pop	{r4, r5, pc}

000d68c8 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d68c8:	b530      	push	{r4, r5, lr}
   d68ca:	4605      	mov	r5, r0
   d68cc:	b087      	sub	sp, #28
   d68ce:	460c      	mov	r4, r1
    WiringBleLock lk;
   d68d0:	a801      	add	r0, sp, #4
   d68d2:	f7ff fe98 	bl	d6606 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d68d6:	682a      	ldr	r2, [r5, #0]
   d68d8:	6823      	ldr	r3, [r4, #0]
   d68da:	8812      	ldrh	r2, [r2, #0]
   d68dc:	881b      	ldrh	r3, [r3, #0]
   d68de:	429a      	cmp	r2, r3
   d68e0:	d10d      	bne.n	d68fe <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   d68e2:	4629      	mov	r1, r5
   d68e4:	a802      	add	r0, sp, #8
   d68e6:	f7ff ffdd 	bl	d68a4 <_ZNK8particle13BlePeerDevice7addressEv>
   d68ea:	4621      	mov	r1, r4
   d68ec:	a804      	add	r0, sp, #16
   d68ee:	f7ff ffd9 	bl	d68a4 <_ZNK8particle13BlePeerDevice7addressEv>
   d68f2:	a904      	add	r1, sp, #16
   d68f4:	a802      	add	r0, sp, #8
   d68f6:	f7ff fea3 	bl	d6640 <_ZNK8particle10BleAddresseqERKS0_>
   d68fa:	4604      	mov	r4, r0
   d68fc:	b900      	cbnz	r0, d6900 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   d68fe:	2400      	movs	r4, #0
    WiringBleLock lk;
   d6900:	a801      	add	r0, sp, #4
   d6902:	f7ff fe88 	bl	d6616 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   d6906:	4620      	mov	r0, r4
   d6908:	b007      	add	sp, #28
   d690a:	bd30      	pop	{r4, r5, pc}

000d690c <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d690c:	b510      	push	{r4, lr}
   d690e:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d6910:	2054      	movs	r0, #84	; 0x54
   d6912:	f7fd fbc0 	bl	d4096 <_Znwj>
   d6916:	4601      	mov	r1, r0
   d6918:	b160      	cbz	r0, d6934 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   d691a:	2300      	movs	r3, #0
   d691c:	e9c0 3300 	strd	r3, r3, [r0]
   d6920:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d6924:	e9c0 3304 	strd	r3, r3, [r0, #16]
   d6928:	e9c0 3306 	strd	r3, r3, [r0, #24]
   d692c:	6203      	str	r3, [r0, #32]
    _Function_base() : _M_manager(nullptr) { }
   d692e:	62c3      	str	r3, [r0, #44]	; 0x2c
   d6930:	63c3      	str	r3, [r0, #60]	; 0x3c
   d6932:	64c3      	str	r3, [r0, #76]	; 0x4c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d6934:	6021      	str	r1, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d6936:	b919      	cbnz	r1, d6940 <_ZN8particle14BleLocalDeviceC1Ev+0x34>
        SPARK_ASSERT(false);
   d6938:	4a09      	ldr	r2, [pc, #36]	; (d6960 <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   d693a:	200a      	movs	r0, #10
   d693c:	f7ff faf6 	bl	d5f2c <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d6940:	2000      	movs	r0, #0
   d6942:	f7ff f957 	bl	d5bf4 <hal_ble_stack_init>
   d6946:	b120      	cbz	r0, d6952 <_ZN8particle14BleLocalDeviceC1Ev+0x46>
   d6948:	4a05      	ldr	r2, [pc, #20]	; (d6960 <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   d694a:	2100      	movs	r1, #0
   d694c:	200a      	movs	r0, #10
   d694e:	f7ff faed 	bl	d5f2c <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d6952:	6821      	ldr	r1, [r4, #0]
   d6954:	4803      	ldr	r0, [pc, #12]	; (d6964 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d6956:	2200      	movs	r2, #0
   d6958:	f7ff f976 	bl	d5c48 <hal_ble_set_callback_on_periph_link_events>
}
   d695c:	4620      	mov	r0, r4
   d695e:	bd10      	pop	{r4, pc}
   d6960:	000d5bd5 	.word	0x000d5bd5
   d6964:	000d6c31 	.word	0x000d6c31

000d6968 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d6968:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d696a:	4c0b      	ldr	r4, [pc, #44]	; (d6998 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d696c:	7823      	ldrb	r3, [r4, #0]
   d696e:	f3bf 8f5b 	dmb	ish
   d6972:	07db      	lsls	r3, r3, #31
   d6974:	d40e      	bmi.n	d6994 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   d6976:	4620      	mov	r0, r4
   d6978:	f7fd fb95 	bl	d40a6 <__cxa_guard_acquire>
   d697c:	b150      	cbz	r0, d6994 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   d697e:	4807      	ldr	r0, [pc, #28]	; (d699c <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d6980:	f7ff ffc4 	bl	d690c <_ZN8particle14BleLocalDeviceC1Ev>
   d6984:	4620      	mov	r0, r4
   d6986:	f7fd fb93 	bl	d40b0 <__cxa_guard_release>
   d698a:	4a05      	ldr	r2, [pc, #20]	; (d69a0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d698c:	4905      	ldr	r1, [pc, #20]	; (d69a4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x3c>)
   d698e:	4803      	ldr	r0, [pc, #12]	; (d699c <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d6990:	f001 fa62 	bl	d7e58 <__aeabi_atexit>
    return instance;
}
   d6994:	4801      	ldr	r0, [pc, #4]	; (d699c <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d6996:	bd10      	pop	{r4, pc}
   d6998:	2003e658 	.word	0x2003e658
   d699c:	2003e660 	.word	0x2003e660
   d69a0:	2003e518 	.word	0x2003e518
   d69a4:	000d6ab3 	.word	0x000d6ab3

000d69a8 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   d69a8:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   d69aa:	2000      	movs	r0, #0
   d69ac:	f7ff f922 	bl	d5bf4 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   d69b0:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   d69b4:	bd08      	pop	{r3, pc}

000d69b6 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   d69b6:	4608      	mov	r0, r1
   d69b8:	b911      	cbnz	r1, d69c0 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   d69ba:	460a      	mov	r2, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   d69bc:	f7ff b922 	b.w	d5c04 <hal_ble_gap_set_advertising_data>
   d69c0:	6a09      	ldr	r1, [r1, #32]
   d69c2:	2200      	movs	r2, #0
   d69c4:	e7fa      	b.n	d69bc <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000d69c6 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   d69c6:	b507      	push	{r0, r1, r2, lr}
    if (scanResponse == nullptr) {
   d69c8:	4608      	mov	r0, r1
   d69ca:	b929      	cbnz	r1, d69d8 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   d69cc:	460a      	mov	r2, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   d69ce:	b003      	add	sp, #12
   d69d0:	f85d eb04 	ldr.w	lr, [sp], #4
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d69d4:	f7ff b91e 	b.w	d5c14 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   d69d8:	2101      	movs	r1, #1
   d69da:	9001      	str	r0, [sp, #4]
   d69dc:	f7ff ff12 	bl	d6804 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d69e0:	9801      	ldr	r0, [sp, #4]
   d69e2:	2200      	movs	r2, #0
   d69e4:	6a01      	ldr	r1, [r0, #32]
   d69e6:	e7f2      	b.n	d69ce <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x8>

000d69e8 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d69e8:	b538      	push	{r3, r4, r5, lr}
   d69ea:	4604      	mov	r4, r0
   d69ec:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   d69ee:	f7ff ffe2 	bl	d69b6 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   d69f2:	2800      	cmp	r0, #0
   d69f4:	db0a      	blt.n	d6a0c <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   d69f6:	4629      	mov	r1, r5
   d69f8:	4620      	mov	r0, r4
   d69fa:	f7ff ffe4 	bl	d69c6 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   d69fe:	2800      	cmp	r0, #0
   d6a00:	db04      	blt.n	d6a0c <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   d6a02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   d6a06:	2000      	movs	r0, #0
   d6a08:	f7ff b90c 	b.w	d5c24 <hal_ble_gap_start_advertising>
}
   d6a0c:	bd38      	pop	{r3, r4, r5, pc}

000d6a0e <_ZNK8particle14BleLocalDevice9connectedEv>:
    ppcp.conn_sup_timeout = timeout;
    return hal_ble_gap_set_ppcp(&ppcp, nullptr);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   d6a0e:	6803      	ldr	r3, [r0, #0]
   d6a10:	69d8      	ldr	r0, [r3, #28]
}
   d6a12:	2800      	cmp	r0, #0
   d6a14:	bfd4      	ite	le
   d6a16:	2000      	movle	r0, #0
   d6a18:	2001      	movgt	r0, #1
   d6a1a:	4770      	bx	lr

000d6a1c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d6a1c:	680b      	ldr	r3, [r1, #0]
   d6a1e:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d6a20:	b113      	cbz	r3, d6a28 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d6a22:	685a      	ldr	r2, [r3, #4]
   d6a24:	3201      	adds	r2, #1
   d6a26:	605a      	str	r2, [r3, #4]
      }
   d6a28:	4770      	bx	lr

000d6a2a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6a2a:	b510      	push	{r4, lr}
   d6a2c:	f851 3b04 	ldr.w	r3, [r1], #4
   d6a30:	4604      	mov	r4, r0
   d6a32:	f840 3b04 	str.w	r3, [r0], #4
   d6a36:	f7ff fff1 	bl	d6a1c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d6a3a:	4620      	mov	r0, r4
   d6a3c:	bd10      	pop	{r4, pc}

000d6a3e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d6a3e:	b510      	push	{r4, lr}
   d6a40:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d6a42:	6800      	ldr	r0, [r0, #0]
   d6a44:	b128      	cbz	r0, d6a52 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d6a46:	6843      	ldr	r3, [r0, #4]
   d6a48:	3b01      	subs	r3, #1
   d6a4a:	6043      	str	r3, [r0, #4]
   d6a4c:	b90b      	cbnz	r3, d6a52 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d6a4e:	f7ff fd30 	bl	d64b2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d6a52:	4620      	mov	r0, r4
   d6a54:	bd10      	pop	{r4, pc}

000d6a56 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6a56:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d6a58:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6a5c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d6a5e:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   d6a62:	42ae      	cmp	r6, r5
   d6a64:	d004      	beq.n	d6a70 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
      ~__shared_ptr() = default;
   d6a66:	1d28      	adds	r0, r5, #4
   d6a68:	f7ff ffe9 	bl	d6a3e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6a6c:	3508      	adds	r5, #8
   d6a6e:	e7f8      	b.n	d6a62 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d6a70:	6820      	ldr	r0, [r4, #0]
   d6a72:	f7ff fb17 	bl	d60a4 <free>
}
   d6a76:	4620      	mov	r0, r4
   d6a78:	bd70      	pop	{r4, r5, r6, pc}

000d6a7a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6a7a:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d6a7c:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6a80:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d6a82:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   d6a86:	42ae      	cmp	r6, r5
   d6a88:	d004      	beq.n	d6a94 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d6a8a:	1d28      	adds	r0, r5, #4
   d6a8c:	f7ff ffd7 	bl	d6a3e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6a90:	3508      	adds	r5, #8
   d6a92:	e7f8      	b.n	d6a86 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d6a94:	6820      	ldr	r0, [r4, #0]
   d6a96:	f7ff fb05 	bl	d60a4 <free>
}
   d6a9a:	4620      	mov	r0, r4
   d6a9c:	bd70      	pop	{r4, r5, r6, pc}

000d6a9e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d6a9e:	b510      	push	{r4, lr}
   d6aa0:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   d6aa2:	3024      	adds	r0, #36	; 0x24
   d6aa4:	f7ff ffe9 	bl	d6a7a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d6aa8:	f104 0018 	add.w	r0, r4, #24
   d6aac:	f7ff ffd3 	bl	d6a56 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   d6ab0:	bd10      	pop	{r4, pc}

000d6ab2 <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d6ab2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (__ptr != nullptr)
   d6ab4:	6804      	ldr	r4, [r0, #0]
   d6ab6:	4606      	mov	r6, r0
   d6ab8:	b324      	cbz	r4, d6b04 <_ZN8particle14BleLocalDeviceD1Ev+0x52>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6aba:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d6abe:	f7ff fd84 	bl	d65ca <_ZNSt14_Function_baseD1Ev>
   d6ac2:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d6ac6:	f7ff fd80 	bl	d65ca <_ZNSt14_Function_baseD1Ev>
   d6aca:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d6ace:	f7ff fd7c 	bl	d65ca <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   d6ad2:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   d6ad6:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (; p != end; ++p) {
   d6ada:	42af      	cmp	r7, r5
   d6adc:	d004      	beq.n	d6ae8 <_ZN8particle14BleLocalDeviceD1Ev+0x36>
      ~__shared_ptr() = default;
   d6ade:	1d28      	adds	r0, r5, #4
   d6ae0:	f7ff ffad 	bl	d6a3e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6ae4:	3508      	adds	r5, #8
   d6ae6:	e7f8      	b.n	d6ada <_ZN8particle14BleLocalDeviceD1Ev+0x28>
    ::free(ptr);
   d6ae8:	69a0      	ldr	r0, [r4, #24]
   d6aea:	f7ff fadb 	bl	d60a4 <free>
    ~BleLocalDeviceImpl() = default;
   d6aee:	f104 000c 	add.w	r0, r4, #12
   d6af2:	f7ff ffc2 	bl	d6a7a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d6af6:	4620      	mov	r0, r4
   d6af8:	f7ff ffad 	bl	d6a56 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   d6afc:	2154      	movs	r1, #84	; 0x54
   d6afe:	4620      	mov	r0, r4
   d6b00:	f001 f9af 	bl	d7e62 <_ZdlPvj>
   d6b04:	4630      	mov	r0, r6
   d6b06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6b08 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6b08:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d6b0a:	b510      	push	{r4, lr}
      if (_M_empty())
   d6b0c:	b90a      	cbnz	r2, d6b12 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   d6b0e:	f001 f9ac 	bl	d7e6a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   d6b12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6b16:	68c3      	ldr	r3, [r0, #12]
   d6b18:	4718      	bx	r3

000d6b1a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d6b1a:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d6b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6b1e:	4604      	mov	r4, r0
   d6b20:	460d      	mov	r5, r1
   d6b22:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d6b24:	d914      	bls.n	d6b50 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d6b26:	4290      	cmp	r0, r2
   d6b28:	d213      	bcs.n	d6b52 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   d6b2a:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   d6b2e:	1a75      	subs	r5, r6, r1
   d6b30:	f1a1 0708 	sub.w	r7, r1, #8
   d6b34:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d6b36:	42b7      	cmp	r7, r6
   d6b38:	d018      	beq.n	d6b6c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d6b3a:	b11c      	cbz	r4, d6b44 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d6b3c:	4631      	mov	r1, r6
   d6b3e:	4620      	mov	r0, r4
   d6b40:	f7ff ff73 	bl	d6a2a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d6b44:	1d30      	adds	r0, r6, #4
   d6b46:	f7ff ff7a 	bl	d6a3e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d6b4a:	3e08      	subs	r6, #8
   d6b4c:	3c08      	subs	r4, #8
   d6b4e:	e7f2      	b.n	d6b36 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d6b50:	d00c      	beq.n	d6b6c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d6b52:	42b5      	cmp	r5, r6
   d6b54:	d00a      	beq.n	d6b6c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d6b56:	b11c      	cbz	r4, d6b60 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d6b58:	4629      	mov	r1, r5
   d6b5a:	4620      	mov	r0, r4
   d6b5c:	f7ff ff65 	bl	d6a2a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d6b60:	1d28      	adds	r0, r5, #4
   d6b62:	f7ff ff6c 	bl	d6a3e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d6b66:	3508      	adds	r5, #8
   d6b68:	3408      	adds	r4, #8
   d6b6a:	e7f2      	b.n	d6b52 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   d6b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6b6e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d6b6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d6b72:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d6b76:	4605      	mov	r5, r0
   d6b78:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d6b7a:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
        for (; p != end; ++p) {
   d6b7e:	42a7      	cmp	r7, r4
   d6b80:	d103      	bne.n	d6b8a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x1c>
        return false;
   d6b82:	2600      	movs	r6, #0
}
   d6b84:	4630      	mov	r0, r6
   d6b86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if (*p == value) {
   d6b8a:	4641      	mov	r1, r8
   d6b8c:	4620      	mov	r0, r4
   d6b8e:	f7ff fe9b 	bl	d68c8 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d6b92:	4606      	mov	r6, r0
   d6b94:	b908      	cbnz	r0, d6b9a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>
        for (; p != end; ++p) {
   d6b96:	3408      	adds	r4, #8
   d6b98:	e7f1      	b.n	d6b7e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
    if (!p) {
   d6b9a:	2c00      	cmp	r4, #0
   d6b9c:	d0f1      	beq.n	d6b82 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x14>
   d6b9e:	1d20      	adds	r0, r4, #4
   d6ba0:	f7ff ff4d 	bl	d6a3e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   d6ba4:	e9d5 3200 	ldrd	r3, r2, [r5]
   d6ba8:	f104 0108 	add.w	r1, r4, #8
   d6bac:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d6bb0:	4620      	mov	r0, r4
   d6bb2:	f7ff ffb2 	bl	d6b1a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d6bb6:	686b      	ldr	r3, [r5, #4]
   d6bb8:	3b01      	subs	r3, #1
   d6bba:	606b      	str	r3, [r5, #4]
    return true;
   d6bbc:	e7e2      	b.n	d6b84 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x16>

000d6bbe <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d6bbe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d6bc0:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d6bc2:	6846      	ldr	r6, [r0, #4]
   d6bc4:	4668      	mov	r0, sp
   d6bc6:	f7ff ff30 	bl	d6a2a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6bca:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   d6bce:	429f      	cmp	r7, r3
   d6bd0:	db12      	blt.n	d6bf8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   d6bd2:	3701      	adds	r7, #1
        if (n > 0) {
   d6bd4:	2f00      	cmp	r7, #0
   d6bd6:	dd29      	ble.n	d6c2c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   d6bd8:	00f8      	lsls	r0, r7, #3
   d6bda:	f7ff fa5b 	bl	d6094 <malloc>
            if (!d) {
   d6bde:	4605      	mov	r5, r0
   d6be0:	b1f0      	cbz	r0, d6c20 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   d6be2:	e9d4 1200 	ldrd	r1, r2, [r4]
   d6be6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d6bea:	f7ff ff96 	bl	d6b1a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d6bee:	6820      	ldr	r0, [r4, #0]
   d6bf0:	f7ff fa58 	bl	d60a4 <free>
        data_ = d;
   d6bf4:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d6bf6:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   d6bf8:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d6bfa:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d6bfc:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   d6c00:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d6c04:	4631      	mov	r1, r6
   d6c06:	f106 0008 	add.w	r0, r6, #8
   d6c0a:	f7ff ff86 	bl	d6b1a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d6c0e:	b11e      	cbz	r6, d6c18 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   d6c10:	4669      	mov	r1, sp
   d6c12:	4630      	mov	r0, r6
   d6c14:	f7ff ff09 	bl	d6a2a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d6c18:	6863      	ldr	r3, [r4, #4]
   d6c1a:	3301      	adds	r3, #1
   d6c1c:	6063      	str	r3, [r4, #4]
    return true;
   d6c1e:	2501      	movs	r5, #1
   d6c20:	a801      	add	r0, sp, #4
   d6c22:	f7ff ff0c 	bl	d6a3e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6c26:	4628      	mov	r0, r5
   d6c28:	b003      	add	sp, #12
   d6c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   d6c2c:	2500      	movs	r5, #0
   d6c2e:	e7de      	b.n	d6bee <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000d6c30 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d6c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6c34:	4605      	mov	r5, r0
   d6c36:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   d6c38:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d6c3a:	460c      	mov	r4, r1
        WiringBleLock lk;
   d6c3c:	f7ff fce3 	bl	d6606 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d6c40:	682e      	ldr	r6, [r5, #0]
   d6c42:	2e04      	cmp	r6, #4
   d6c44:	d06b      	beq.n	d6d1e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
   d6c46:	d807      	bhi.n	d6c58 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x28>
   d6c48:	2e03      	cmp	r6, #3
   d6c4a:	d028      	beq.n	d6c9e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x6e>
        WiringBleLock lk;
   d6c4c:	a803      	add	r0, sp, #12
   d6c4e:	f7ff fce2 	bl	d6616 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   d6c52:	b00e      	add	sp, #56	; 0x38
   d6c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        switch (event->type) {
   d6c58:	f1a6 030c 	sub.w	r3, r6, #12
   d6c5c:	2b03      	cmp	r3, #3
   d6c5e:	d8f5      	bhi.n	d6c4c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d6c60:	89a9      	ldrh	r1, [r5, #12]
   d6c62:	4620      	mov	r0, r4
   d6c64:	f7ff fdea 	bl	d683c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d6c68:	4607      	mov	r7, r0
   d6c6a:	2800      	cmp	r0, #0
   d6c6c:	d0ee      	beq.n	d6c4c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                    if (impl->pairingEventCallback_) {
   d6c6e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   d6c70:	2b00      	cmp	r3, #0
   d6c72:	d0eb      	beq.n	d6c4c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        BlePairingEvent pairingEvent = {
   d6c74:	2210      	movs	r2, #16
   d6c76:	2100      	movs	r1, #0
   d6c78:	a807      	add	r0, sp, #28
   d6c7a:	f002 f867 	bl	d8d4c <memset>
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY) {
   d6c7e:	2e0d      	cmp	r6, #13
                        };
   d6c80:	9706      	str	r7, [sp, #24]
                            .type = static_cast<BlePairingEventType>(event->type)
   d6c82:	f88d 601c 	strb.w	r6, [sp, #28]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY) {
   d6c86:	f040 8092 	bne.w	d6dae <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17e>
                            pairingEvent.payload.passkey = event->params.passkey_display.passkey;
   d6c8a:	686b      	ldr	r3, [r5, #4]
   d6c8c:	9309      	str	r3, [sp, #36]	; 0x24
                            pairingEvent.payloadLen = BLE_PAIRING_PASSKEY_LEN;
   d6c8e:	2306      	movs	r3, #6
                            pairingEvent.payloadLen = sizeof(BlePairingStatus);
   d6c90:	9308      	str	r3, [sp, #32]
   d6c92:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d6c94:	a906      	add	r1, sp, #24
   d6c96:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d6c9a:	4798      	blx	r3
   d6c9c:	e7d6      	b.n	d6c4c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice peer;
   d6c9e:	a804      	add	r0, sp, #16
   d6ca0:	f7ff fdde 	bl	d6860 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d6ca4:	9b04      	ldr	r3, [sp, #16]
   d6ca6:	89aa      	ldrh	r2, [r5, #12]
   d6ca8:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   d6caa:	6869      	ldr	r1, [r5, #4]
   d6cac:	9804      	ldr	r0, [sp, #16]
   d6cae:	3108      	adds	r1, #8
   d6cb0:	3002      	adds	r0, #2
   d6cb2:	f7ff fcb8 	bl	d6626 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   d6cb6:	a904      	add	r1, sp, #16
   d6cb8:	a806      	add	r0, sp, #24
   d6cba:	f7ff feb6 	bl	d6a2a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   d6cbe:	a906      	add	r1, sp, #24
   d6cc0:	f104 0018 	add.w	r0, r4, #24
   d6cc4:	f7ff ff7b 	bl	d6bbe <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d6cc8:	4605      	mov	r5, r0
   d6cca:	a807      	add	r0, sp, #28
   d6ccc:	f7ff feb7 	bl	d6a3e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6cd0:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d6cd2:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   d6cd4:	b98d      	cbnz	r5, d6cfa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
                    LOG(ERROR, "Failed to append peer Central device.");
   d6cd6:	4b3e      	ldr	r3, [pc, #248]	; (d6dd0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a0>)
   d6cd8:	493e      	ldr	r1, [pc, #248]	; (d6dd4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   d6cda:	9300      	str	r3, [sp, #0]
   d6cdc:	2032      	movs	r0, #50	; 0x32
   d6cde:	462b      	mov	r3, r5
   d6ce0:	aa06      	add	r2, sp, #24
   d6ce2:	9507      	str	r5, [sp, #28]
   d6ce4:	f7ff f92a 	bl	d5f3c <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d6ce8:	9b04      	ldr	r3, [sp, #16]
   d6cea:	4629      	mov	r1, r5
   d6cec:	8818      	ldrh	r0, [r3, #0]
   d6cee:	f7fe ffa1 	bl	d5c34 <hal_ble_gap_disconnect>
   d6cf2:	a805      	add	r0, sp, #20
   d6cf4:	f7ff fea3 	bl	d6a3e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6cf8:	e7a8      	b.n	d6c4c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                LOG(TRACE, "Connected by Central device.");
   d6cfa:	4a37      	ldr	r2, [pc, #220]	; (d6dd8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a8>)
   d6cfc:	9200      	str	r2, [sp, #0]
   d6cfe:	2300      	movs	r3, #0
   d6d00:	4934      	ldr	r1, [pc, #208]	; (d6dd4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   d6d02:	9307      	str	r3, [sp, #28]
   d6d04:	aa06      	add	r2, sp, #24
   d6d06:	2001      	movs	r0, #1
   d6d08:	f7ff f918 	bl	d5f3c <log_message>
                if (impl->connectedCallback_) {
   d6d0c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d6d0e:	2b00      	cmp	r3, #0
   d6d10:	d0ef      	beq.n	d6cf2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xc2>
                    impl->connectedCallback_(peer);
   d6d12:	a904      	add	r1, sp, #16
   d6d14:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d6d18:	f7ff fef6 	bl	d6b08 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   d6d1c:	e7e9      	b.n	d6cf2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xc2>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d6d1e:	89a9      	ldrh	r1, [r5, #12]
   d6d20:	4620      	mov	r0, r4
   d6d22:	f7ff fd8b 	bl	d683c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d6d26:	4606      	mov	r6, r0
   d6d28:	2800      	cmp	r0, #0
   d6d2a:	d08f      	beq.n	d6c4c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
        return impl_.get();
   d6d2c:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   d6d2e:	e9d5 3106 	ldrd	r3, r1, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d6d32:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d6d36:	802a      	strh	r2, [r5, #0]
   d6d38:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics()) {
   d6d3c:	4299      	cmp	r1, r3
   d6d3e:	d003      	beq.n	d6d48 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x118>
        return impl_.get();
   d6d40:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d6d44:	8042      	strh	r2, [r0, #2]
        for (auto& characteristic : characteristics()) {
   d6d46:	e7f9      	b.n	d6d3c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
    destruct(data_, data_ + size_);
   d6d48:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   d6d4c:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   d6d50:	45b8      	cmp	r8, r7
   d6d52:	d004      	beq.n	d6d5e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12e>
   d6d54:	1d38      	adds	r0, r7, #4
   d6d56:	f7ff fe72 	bl	d6a3e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6d5a:	3708      	adds	r7, #8
   d6d5c:	e7f8      	b.n	d6d50 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x120>
    size_ = 0;
   d6d5e:	2300      	movs	r3, #0
   d6d60:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   d6d62:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   d6d66:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   d6d6a:	45b8      	cmp	r8, r7
   d6d6c:	d004      	beq.n	d6d78 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x148>
   d6d6e:	1d38      	adds	r0, r7, #4
   d6d70:	f7ff fe65 	bl	d6a3e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6d74:	3708      	adds	r7, #8
   d6d76:	e7f8      	b.n	d6d6a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13a>
    size_ = 0;
   d6d78:	2300      	movs	r3, #0
   d6d7a:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   d6d7c:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   d6d7e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d6d80:	b123      	cbz	r3, d6d8c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x15c>
                        impl->disconnectedCallback_(*peer);
   d6d82:	4631      	mov	r1, r6
   d6d84:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d6d88:	f7ff febe 	bl	d6b08 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   d6d8c:	2300      	movs	r3, #0
   d6d8e:	2220      	movs	r2, #32
   d6d90:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d6d94:	4a11      	ldr	r2, [pc, #68]	; (d6ddc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ac>)
   d6d96:	9200      	str	r2, [sp, #0]
   d6d98:	490e      	ldr	r1, [pc, #56]	; (d6dd4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   d6d9a:	aa06      	add	r2, sp, #24
   d6d9c:	2001      	movs	r0, #1
   d6d9e:	f7ff f8cd 	bl	d5f3c <log_message>
                    impl->peers_.removeOne(*peer);
   d6da2:	4631      	mov	r1, r6
   d6da4:	f104 0018 	add.w	r0, r4, #24
   d6da8:	f7ff fee1 	bl	d6b6e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
   d6dac:	e74e      	b.n	d6c4c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   d6dae:	2e0f      	cmp	r6, #15
   d6db0:	f47f af6f 	bne.w	d6c92 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x62>
                            pairingEvent.payload.status.status = event->params.pairing_status.status;
   d6db4:	686b      	ldr	r3, [r5, #4]
   d6db6:	9309      	str	r3, [sp, #36]	; 0x24
                            pairingEvent.payload.status.bonded = event->params.pairing_status.bonded;
   d6db8:	7a2b      	ldrb	r3, [r5, #8]
   d6dba:	f003 0201 	and.w	r2, r3, #1
                            pairingEvent.payload.status.lesc = event->params.pairing_status.lesc;
   d6dbe:	f3c3 0340 	ubfx	r3, r3, #1, #1
   d6dc2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
                            pairingEvent.payload.status.bonded = event->params.pairing_status.bonded;
   d6dc6:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
                            pairingEvent.payloadLen = sizeof(BlePairingStatus);
   d6dca:	2308      	movs	r3, #8
   d6dcc:	e760      	b.n	d6c90 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x60>
   d6dce:	bf00      	nop
   d6dd0:	000d9557 	.word	0x000d9557
   d6dd4:	000d9530 	.word	0x000d9530
   d6dd8:	000d957d 	.word	0x000d957d
   d6ddc:	000d959a 	.word	0x000d959a

000d6de0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d6de0:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d6de2:	4c06      	ldr	r4, [pc, #24]	; (d6dfc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d6de4:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d6de6:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d6de8:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d6dea:	f7fe ff57 	bl	d5c9c <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d6dee:	4620      	mov	r0, r4
   d6df0:	4a03      	ldr	r2, [pc, #12]	; (d6e00 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d6df2:	4904      	ldr	r1, [pc, #16]	; (d6e04 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d6df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d6df8:	f001 b82e 	b.w	d7e58 <__aeabi_atexit>
   d6dfc:	2003e65c 	.word	0x2003e65c
   d6e00:	2003e518 	.word	0x2003e518
   d6e04:	000d64d3 	.word	0x000d64d3

000d6e08 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6e0a:	4606      	mov	r6, r0
   d6e0c:	460d      	mov	r5, r1
  size_t n = 0;
   d6e0e:	188f      	adds	r7, r1, r2
   d6e10:	2400      	movs	r4, #0
  while (size--) {
   d6e12:	42bd      	cmp	r5, r7
   d6e14:	d00c      	beq.n	d6e30 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d6e16:	6833      	ldr	r3, [r6, #0]
   d6e18:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6e1c:	689b      	ldr	r3, [r3, #8]
   d6e1e:	4630      	mov	r0, r6
   d6e20:	4798      	blx	r3
     if (chunk>=0)
   d6e22:	1e03      	subs	r3, r0, #0
   d6e24:	db01      	blt.n	d6e2a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d6e26:	441c      	add	r4, r3
  while (size--) {
   d6e28:	e7f3      	b.n	d6e12 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d6e2a:	2c00      	cmp	r4, #0
   d6e2c:	bf08      	it	eq
   d6e2e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d6e30:	4620      	mov	r0, r4
   d6e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6e34 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d6e34:	b513      	push	{r0, r1, r4, lr}
   d6e36:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d6e38:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d6e3a:	b159      	cbz	r1, d6e54 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d6e3c:	9101      	str	r1, [sp, #4]
   d6e3e:	f001 ffbb 	bl	d8db8 <strlen>
   d6e42:	6823      	ldr	r3, [r4, #0]
   d6e44:	9901      	ldr	r1, [sp, #4]
   d6e46:	68db      	ldr	r3, [r3, #12]
   d6e48:	4602      	mov	r2, r0
   d6e4a:	4620      	mov	r0, r4
    }
   d6e4c:	b002      	add	sp, #8
   d6e4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d6e52:	4718      	bx	r3
    }
   d6e54:	b002      	add	sp, #8
   d6e56:	bd10      	pop	{r4, pc}

000d6e58 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6e58:	6803      	ldr	r3, [r0, #0]
   d6e5a:	689b      	ldr	r3, [r3, #8]
   d6e5c:	4718      	bx	r3

000d6e5e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6e5e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6e60:	210d      	movs	r1, #13
{
   d6e62:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6e64:	f7ff fff8 	bl	d6e58 <_ZN5Print5printEc>
  n += print('\n');
   d6e68:	210a      	movs	r1, #10
  size_t n = print('\r');
   d6e6a:	4604      	mov	r4, r0
  n += print('\n');
   d6e6c:	4628      	mov	r0, r5
   d6e6e:	f7ff fff3 	bl	d6e58 <_ZN5Print5printEc>
  return n;
}
   d6e72:	4420      	add	r0, r4
   d6e74:	bd38      	pop	{r3, r4, r5, pc}

000d6e76 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d6e76:	b538      	push	{r3, r4, r5, lr}
   d6e78:	4605      	mov	r5, r0
  return write(str);
   d6e7a:	f7ff ffdb 	bl	d6e34 <_ZN5Print5writeEPKc>
   d6e7e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d6e80:	4628      	mov	r0, r5
   d6e82:	f7ff ffec 	bl	d6e5e <_ZN5Print7printlnEv>
  return n;
}
   d6e86:	4420      	add	r0, r4
   d6e88:	bd38      	pop	{r3, r4, r5, pc}

000d6e8a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d6e8a:	b530      	push	{r4, r5, lr}
   d6e8c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6e8e:	2300      	movs	r3, #0
   d6e90:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d6e94:	2a01      	cmp	r2, #1
   d6e96:	bf98      	it	ls
   d6e98:	220a      	movls	r2, #10
   d6e9a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d6e9c:	460d      	mov	r5, r1
   d6e9e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d6ea2:	fb01 5312 	mls	r3, r1, r2, r5
   d6ea6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6eaa:	2b09      	cmp	r3, #9
   d6eac:	bf94      	ite	ls
   d6eae:	3330      	addls	r3, #48	; 0x30
   d6eb0:	3337      	addhi	r3, #55	; 0x37
   d6eb2:	b2db      	uxtb	r3, r3
  } while(n);
   d6eb4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6eb6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d6eba:	d9ef      	bls.n	d6e9c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d6ebc:	4621      	mov	r1, r4
   d6ebe:	f7ff ffb9 	bl	d6e34 <_ZN5Print5writeEPKc>
}
   d6ec2:	b00b      	add	sp, #44	; 0x2c
   d6ec4:	bd30      	pop	{r4, r5, pc}

000d6ec6 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   d6ec6:	b510      	push	{r4, lr}
   d6ec8:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d6eca:	f7fe fe8b 	bl	d5be4 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   d6ece:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   d6ed0:	6823      	ldr	r3, [r4, #0]
   d6ed2:	4620      	mov	r0, r4
   d6ed4:	695b      	ldr	r3, [r3, #20]
   d6ed6:	4798      	blx	r3
    if (c >= 0) return c;
   d6ed8:	2800      	cmp	r0, #0
   d6eda:	da08      	bge.n	d6eee <_ZN6Stream9timedReadEv+0x28>
   d6edc:	f7fe fe82 	bl	d5be4 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   d6ee0:	68e3      	ldr	r3, [r4, #12]
   d6ee2:	1ac0      	subs	r0, r0, r3
   d6ee4:	68a3      	ldr	r3, [r4, #8]
   d6ee6:	4298      	cmp	r0, r3
   d6ee8:	d3f2      	bcc.n	d6ed0 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   d6eea:	f04f 30ff 	mov.w	r0, #4294967295
}
   d6eee:	bd10      	pop	{r4, pc}

000d6ef0 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   d6ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6ef2:	4606      	mov	r6, r0
   d6ef4:	460d      	mov	r5, r1
   d6ef6:	4617      	mov	r7, r2
  size_t count = 0;
   d6ef8:	2400      	movs	r4, #0
  while (count < length) {
   d6efa:	42bc      	cmp	r4, r7
   d6efc:	d007      	beq.n	d6f0e <_ZN6Stream9readBytesEPcj+0x1e>
    int c = timedRead();
   d6efe:	4630      	mov	r0, r6
   d6f00:	f7ff ffe1 	bl	d6ec6 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   d6f04:	1e03      	subs	r3, r0, #0
   d6f06:	db02      	blt.n	d6f0e <_ZN6Stream9readBytesEPcj+0x1e>
    *buffer++ = (char)c;
   d6f08:	552b      	strb	r3, [r5, r4]
    count++;
   d6f0a:	3401      	adds	r4, #1
  while (count < length) {
   d6f0c:	e7f5      	b.n	d6efa <_ZN6Stream9readBytesEPcj+0xa>
  }
  return count;
}
   d6f0e:	4620      	mov	r0, r4
   d6f10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6f12 <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d6f12:	2300      	movs	r3, #0
   d6f14:	6840      	ldr	r0, [r0, #4]
   d6f16:	461a      	mov	r2, r3
   d6f18:	4619      	mov	r1, r3
   d6f1a:	f7ff b863 	b.w	d5fe4 <network_on>
	...

000d6f20 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6f20:	4b01      	ldr	r3, [pc, #4]	; (d6f28 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d6f22:	4a02      	ldr	r2, [pc, #8]	; (d6f2c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d6f24:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d6f26:	4770      	bx	lr
   d6f28:	2003e664 	.word	0x2003e664
   d6f2c:	000d95f0 	.word	0x000d95f0

000d6f30 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6f30:	4b02      	ldr	r3, [pc, #8]	; (d6f3c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d6f32:	681a      	ldr	r2, [r3, #0]
   d6f34:	4b02      	ldr	r3, [pc, #8]	; (d6f40 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d6f36:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d6f38:	4770      	bx	lr
   d6f3a:	bf00      	nop
   d6f3c:	2003e4ac 	.word	0x2003e4ac
   d6f40:	2003e668 	.word	0x2003e668

000d6f44 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d6f44:	2100      	movs	r1, #0
   d6f46:	f7ff b809 	b.w	d5f5c <system_delay_ms>

000d6f4a <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d6f4a:	b510      	push	{r4, lr}
   d6f4c:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   d6f4e:	f7ff fb3c 	bl	d65ca <_ZNSt14_Function_baseD1Ev>
   d6f52:	4620      	mov	r0, r4
   d6f54:	bd10      	pop	{r4, pc}
	...

000d6f58 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d6f58:	4803      	ldr	r0, [pc, #12]	; (d6f68 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d6f5a:	4a04      	ldr	r2, [pc, #16]	; (d6f6c <_GLOBAL__sub_I_RGB+0x14>)
   d6f5c:	4904      	ldr	r1, [pc, #16]	; (d6f70 <_GLOBAL__sub_I_RGB+0x18>)
   d6f5e:	2300      	movs	r3, #0
   d6f60:	6083      	str	r3, [r0, #8]
   d6f62:	f000 bf79 	b.w	d7e58 <__aeabi_atexit>
   d6f66:	bf00      	nop
   d6f68:	2003e66c 	.word	0x2003e66c
   d6f6c:	2003e518 	.word	0x2003e518
   d6f70:	000d6f4b 	.word	0x000d6f4b

000d6f74 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d6f74:	4b01      	ldr	r3, [pc, #4]	; (d6f7c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d6f76:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d6f78:	4770      	bx	lr
   d6f7a:	bf00      	nop
   d6f7c:	2003e4b0 	.word	0x2003e4b0

000d6f80 <serialEventRun>:
{
   d6f80:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d6f82:	4b0b      	ldr	r3, [pc, #44]	; (d6fb0 <serialEventRun+0x30>)
   d6f84:	b143      	cbz	r3, d6f98 <serialEventRun+0x18>
   d6f86:	f000 f97d 	bl	d7284 <_Z16_fetch_usbserialv>
   d6f8a:	6803      	ldr	r3, [r0, #0]
   d6f8c:	691b      	ldr	r3, [r3, #16]
   d6f8e:	4798      	blx	r3
   d6f90:	2800      	cmp	r0, #0
   d6f92:	dd01      	ble.n	d6f98 <serialEventRun+0x18>
        serialEvent();
   d6f94:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d6f98:	4b06      	ldr	r3, [pc, #24]	; (d6fb4 <serialEventRun+0x34>)
   d6f9a:	b143      	cbz	r3, d6fae <serialEventRun+0x2e>
   d6f9c:	f000 f9f0 	bl	d7380 <_Z22__fetch_global_Serial1v>
   d6fa0:	6803      	ldr	r3, [r0, #0]
   d6fa2:	691b      	ldr	r3, [r3, #16]
   d6fa4:	4798      	blx	r3
   d6fa6:	2800      	cmp	r0, #0
   d6fa8:	dd01      	ble.n	d6fae <serialEventRun+0x2e>
        serialEvent1();
   d6faa:	f3af 8000 	nop.w
}
   d6fae:	bd08      	pop	{r3, pc}
	...

000d6fb8 <_post_loop>:
{
   d6fb8:	b508      	push	{r3, lr}
	serialEventRun();
   d6fba:	f7ff ffe1 	bl	d6f80 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6fbe:	f7fe fe11 	bl	d5be4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6fc2:	4b01      	ldr	r3, [pc, #4]	; (d6fc8 <_post_loop+0x10>)
   d6fc4:	6018      	str	r0, [r3, #0]
}
   d6fc6:	bd08      	pop	{r3, pc}
   d6fc8:	2003e7d8 	.word	0x2003e7d8

000d6fcc <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d6fcc:	4802      	ldr	r0, [pc, #8]	; (d6fd8 <_Z33system_initialize_user_backup_ramv+0xc>)
   d6fce:	4a03      	ldr	r2, [pc, #12]	; (d6fdc <_Z33system_initialize_user_backup_ramv+0x10>)
   d6fd0:	4903      	ldr	r1, [pc, #12]	; (d6fe0 <_Z33system_initialize_user_backup_ramv+0x14>)
   d6fd2:	1a12      	subs	r2, r2, r0
   d6fd4:	f001 be92 	b.w	d8cfc <memcpy>
   d6fd8:	2003f400 	.word	0x2003f400
   d6fdc:	2003f404 	.word	0x2003f404
   d6fe0:	000d99c8 	.word	0x000d99c8

000d6fe4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6fe4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6fe6:	2300      	movs	r3, #0
   d6fe8:	9300      	str	r3, [sp, #0]
   d6fea:	461a      	mov	r2, r3
   d6fec:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6ff0:	f7fe ffce 	bl	d5f90 <system_ctrl_set_result>
}
   d6ff4:	b003      	add	sp, #12
   d6ff6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6ffc <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d6ffc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6ffe:	8843      	ldrh	r3, [r0, #2]
   d7000:	2b0a      	cmp	r3, #10
   d7002:	d008      	beq.n	d7016 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d7004:	2b50      	cmp	r3, #80	; 0x50
   d7006:	d10b      	bne.n	d7020 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d7008:	4b09      	ldr	r3, [pc, #36]	; (d7030 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d700a:	681b      	ldr	r3, [r3, #0]
   d700c:	b14b      	cbz	r3, d7022 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d700e:	b003      	add	sp, #12
   d7010:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d7014:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d7016:	f7ff ffe5 	bl	d6fe4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d701a:	b003      	add	sp, #12
   d701c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7020:	2300      	movs	r3, #0
   d7022:	9300      	str	r3, [sp, #0]
   d7024:	461a      	mov	r2, r3
   d7026:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d702a:	f7fe ffb1 	bl	d5f90 <system_ctrl_set_result>
}
   d702e:	e7f4      	b.n	d701a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d7030:	2003e680 	.word	0x2003e680

000d7034 <module_user_init_hook>:
{
   d7034:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7036:	4c12      	ldr	r4, [pc, #72]	; (d7080 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d7038:	4812      	ldr	r0, [pc, #72]	; (d7084 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d703a:	4d13      	ldr	r5, [pc, #76]	; (d7088 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d703c:	2100      	movs	r1, #0
   d703e:	f7ff f859 	bl	d60f4 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7042:	6823      	ldr	r3, [r4, #0]
   d7044:	42ab      	cmp	r3, r5
   d7046:	4b11      	ldr	r3, [pc, #68]	; (d708c <module_user_init_hook+0x58>)
   d7048:	bf0c      	ite	eq
   d704a:	2201      	moveq	r2, #1
   d704c:	2200      	movne	r2, #0
   d704e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d7050:	d002      	beq.n	d7058 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d7052:	f7ff ffbb 	bl	d6fcc <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d7056:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d7058:	f7fe fdb4 	bl	d5bc4 <HAL_RNG_GetRandomNumber>
   d705c:	4604      	mov	r4, r0
    srand(seed);
   d705e:	f001 fe7d 	bl	d8d5c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d7062:	4b0b      	ldr	r3, [pc, #44]	; (d7090 <module_user_init_hook+0x5c>)
   d7064:	b113      	cbz	r3, d706c <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d7066:	4620      	mov	r0, r4
   d7068:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d706c:	2100      	movs	r1, #0
   d706e:	4808      	ldr	r0, [pc, #32]	; (d7090 <module_user_init_hook+0x5c>)
   d7070:	f7ff f808 	bl	d6084 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d7074:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7078:	4806      	ldr	r0, [pc, #24]	; (d7094 <module_user_init_hook+0x60>)
   d707a:	2100      	movs	r1, #0
   d707c:	f7fe bf7e 	b.w	d5f7c <system_ctrl_set_app_request_handler>
   d7080:	2003f400 	.word	0x2003f400
   d7084:	000d6f75 	.word	0x000d6f75
   d7088:	9a271c1e 	.word	0x9a271c1e
   d708c:	2003e67c 	.word	0x2003e67c
   d7090:	00000000 	.word	0x00000000
   d7094:	000d6ffd 	.word	0x000d6ffd

000d7098 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   d7098:	4770      	bx	lr

000d709a <_ZN9IPAddressD0Ev>:
   d709a:	b510      	push	{r4, lr}
   d709c:	2118      	movs	r1, #24
   d709e:	4604      	mov	r4, r0
   d70a0:	f000 fedf 	bl	d7e62 <_ZdlPvj>
   d70a4:	4620      	mov	r0, r4
   d70a6:	bd10      	pop	{r4, pc}

000d70a8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d70a8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d70aa:	7d03      	ldrb	r3, [r0, #20]
   d70ac:	2b06      	cmp	r3, #6
{
   d70ae:	b08d      	sub	sp, #52	; 0x34
   d70b0:	460e      	mov	r6, r1
   d70b2:	f100 0704 	add.w	r7, r0, #4
   d70b6:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d70ba:	d012      	beq.n	d70e2 <_ZNK9IPAddress7printToER5Print+0x3a>
   d70bc:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d70c0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d70c4:	220a      	movs	r2, #10
   d70c6:	4630      	mov	r0, r6
   d70c8:	f7ff fedf 	bl	d6e8a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d70cc:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d70ce:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d70d0:	d019      	beq.n	d7106 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d70d2:	2c00      	cmp	r4, #0
   d70d4:	d0f4      	beq.n	d70c0 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d70d6:	212e      	movs	r1, #46	; 0x2e
   d70d8:	4630      	mov	r0, r6
   d70da:	f7ff febd 	bl	d6e58 <_ZN5Print5printEc>
   d70de:	4404      	add	r4, r0
   d70e0:	e7ee      	b.n	d70c0 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d70e2:	232f      	movs	r3, #47	; 0x2f
   d70e4:	466a      	mov	r2, sp
   d70e6:	4639      	mov	r1, r7
   d70e8:	200a      	movs	r0, #10
		buf[0] = 0;
   d70ea:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d70ee:	f7fe fdf5 	bl	d5cdc <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d70f2:	4668      	mov	r0, sp
   d70f4:	f001 fe60 	bl	d8db8 <strlen>
   d70f8:	6833      	ldr	r3, [r6, #0]
   d70fa:	4602      	mov	r2, r0
   d70fc:	68db      	ldr	r3, [r3, #12]
   d70fe:	4669      	mov	r1, sp
   d7100:	4630      	mov	r0, r6
   d7102:	4798      	blx	r3
   d7104:	4604      	mov	r4, r0
    }
    return n;
}
   d7106:	4620      	mov	r0, r4
   d7108:	b00d      	add	sp, #52	; 0x34
   d710a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d710c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d710c:	b510      	push	{r4, lr}
   d710e:	4b05      	ldr	r3, [pc, #20]	; (d7124 <_ZN9IPAddressC1Ev+0x18>)
   d7110:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d7112:	2211      	movs	r2, #17
   d7114:	f840 3b04 	str.w	r3, [r0], #4
   d7118:	2100      	movs	r1, #0
   d711a:	f001 fe17 	bl	d8d4c <memset>
}
   d711e:	4620      	mov	r0, r4
   d7120:	bd10      	pop	{r4, pc}
   d7122:	bf00      	nop
   d7124:	000d9618 	.word	0x000d9618

000d7128 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d7128:	4603      	mov	r3, r0
   d712a:	4a07      	ldr	r2, [pc, #28]	; (d7148 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d712c:	b510      	push	{r4, lr}
   d712e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d7132:	f101 0210 	add.w	r2, r1, #16
   d7136:	f851 4b04 	ldr.w	r4, [r1], #4
   d713a:	f843 4b04 	str.w	r4, [r3], #4
   d713e:	4291      	cmp	r1, r2
   d7140:	d1f9      	bne.n	d7136 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d7142:	780a      	ldrb	r2, [r1, #0]
   d7144:	701a      	strb	r2, [r3, #0]
}
   d7146:	bd10      	pop	{r4, pc}
   d7148:	000d9618 	.word	0x000d9618

000d714c <_ZNK9IPAddresscvbEv>:
    if (version() == 4) {
   d714c:	7d03      	ldrb	r3, [r0, #20]
   d714e:	2b04      	cmp	r3, #4
   d7150:	d104      	bne.n	d715c <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   d7152:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d7154:	3800      	subs	r0, #0
   d7156:	bf18      	it	ne
   d7158:	2001      	movne	r0, #1
   d715a:	4770      	bx	lr
    } else if (version() == 6) {
   d715c:	2b06      	cmp	r3, #6
   d715e:	d107      	bne.n	d7170 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d7160:	6843      	ldr	r3, [r0, #4]
   d7162:	b93b      	cbnz	r3, d7174 <_ZNK9IPAddresscvbEv+0x28>
   d7164:	6883      	ldr	r3, [r0, #8]
   d7166:	b92b      	cbnz	r3, d7174 <_ZNK9IPAddresscvbEv+0x28>
   d7168:	68c3      	ldr	r3, [r0, #12]
   d716a:	b91b      	cbnz	r3, d7174 <_ZNK9IPAddresscvbEv+0x28>
   d716c:	6900      	ldr	r0, [r0, #16]
   d716e:	e7f1      	b.n	d7154 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   d7170:	2000      	movs	r0, #0
   d7172:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d7174:	2001      	movs	r0, #1
}
   d7176:	4770      	bx	lr

000d7178 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d7178:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d717a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d717e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d7182:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d7186:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d718a:	2304      	movs	r3, #4
   d718c:	6041      	str	r1, [r0, #4]
   d718e:	7503      	strb	r3, [r0, #20]
}
   d7190:	bd10      	pop	{r4, pc}
	...

000d7194 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   d7194:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7196:	4d04      	ldr	r5, [pc, #16]	; (d71a8 <_ZN9IPAddressC1Ehhhh+0x14>)
   d7198:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
   d719a:	f89d 5018 	ldrb.w	r5, [sp, #24]
   d719e:	9500      	str	r5, [sp, #0]
   d71a0:	f7ff ffea 	bl	d7178 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d71a4:	b003      	add	sp, #12
   d71a6:	bd30      	pop	{r4, r5, pc}
   d71a8:	000d9618 	.word	0x000d9618

000d71ac <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d71ac:	b513      	push	{r0, r1, r4, lr}
   d71ae:	4b05      	ldr	r3, [pc, #20]	; (d71c4 <_ZN9IPAddressC1EPKh+0x18>)
   d71b0:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d71b2:	78cb      	ldrb	r3, [r1, #3]
   d71b4:	9300      	str	r3, [sp, #0]
   d71b6:	788b      	ldrb	r3, [r1, #2]
   d71b8:	784a      	ldrb	r2, [r1, #1]
   d71ba:	7809      	ldrb	r1, [r1, #0]
   d71bc:	f7ff ffdc 	bl	d7178 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d71c0:	b002      	add	sp, #8
   d71c2:	bd10      	pop	{r4, pc}
   d71c4:	000d9618 	.word	0x000d9618

000d71c8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d71c8:	7441      	strb	r1, [r0, #17]
}
   d71ca:	4770      	bx	lr

000d71cc <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d71cc:	4770      	bx	lr

000d71ce <_ZN9USBSerial4readEv>:
{
   d71ce:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d71d0:	2100      	movs	r1, #0
   d71d2:	7c00      	ldrb	r0, [r0, #16]
   d71d4:	f7fe fe92 	bl	d5efc <HAL_USB_USART_Receive_Data>
}
   d71d8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d71dc:	bd08      	pop	{r3, pc}

000d71de <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d71de:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d71e0:	2101      	movs	r1, #1
   d71e2:	7c00      	ldrb	r0, [r0, #16]
   d71e4:	f7fe fe8a 	bl	d5efc <HAL_USB_USART_Receive_Data>
}
   d71e8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d71ec:	bd08      	pop	{r3, pc}

000d71ee <_ZN9USBSerial17availableForWriteEv>:
{
   d71ee:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d71f0:	7c00      	ldrb	r0, [r0, #16]
   d71f2:	f7fe fe7b 	bl	d5eec <HAL_USB_USART_Available_Data_For_Write>
}
   d71f6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d71fa:	bd08      	pop	{r3, pc}

000d71fc <_ZN9USBSerial9availableEv>:
{
   d71fc:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d71fe:	7c00      	ldrb	r0, [r0, #16]
   d7200:	f7fe fe6c 	bl	d5edc <HAL_USB_USART_Available_Data>
}
   d7204:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7208:	bd08      	pop	{r3, pc}

000d720a <_ZN9USBSerial5writeEh>:
{
   d720a:	b513      	push	{r0, r1, r4, lr}
   d720c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d720e:	7c00      	ldrb	r0, [r0, #16]
{
   d7210:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7212:	f7fe fe6b 	bl	d5eec <HAL_USB_USART_Available_Data_For_Write>
   d7216:	2800      	cmp	r0, #0
   d7218:	9901      	ldr	r1, [sp, #4]
   d721a:	dc01      	bgt.n	d7220 <_ZN9USBSerial5writeEh+0x16>
   d721c:	7c60      	ldrb	r0, [r4, #17]
   d721e:	b120      	cbz	r0, d722a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d7220:	7c20      	ldrb	r0, [r4, #16]
   d7222:	f7fe fe73 	bl	d5f0c <HAL_USB_USART_Send_Data>
   d7226:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d722a:	b002      	add	sp, #8
   d722c:	bd10      	pop	{r4, pc}

000d722e <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d722e:	7c00      	ldrb	r0, [r0, #16]
   d7230:	f7fe be74 	b.w	d5f1c <HAL_USB_USART_Flush_Data>

000d7234 <_ZN9USBSerialD0Ev>:
   d7234:	b510      	push	{r4, lr}
   d7236:	2114      	movs	r1, #20
   d7238:	4604      	mov	r4, r0
   d723a:	f000 fe12 	bl	d7e62 <_ZdlPvj>
   d723e:	4620      	mov	r0, r4
   d7240:	bd10      	pop	{r4, pc}
	...

000d7244 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7244:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d7246:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d724a:	4604      	mov	r4, r0
   d724c:	4608      	mov	r0, r1
   d724e:	2100      	movs	r1, #0
   d7250:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d7254:	4b04      	ldr	r3, [pc, #16]	; (d7268 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d7256:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d7258:	2301      	movs	r3, #1
  _serial = serial;
   d725a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d725c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d725e:	4611      	mov	r1, r2
   d7260:	f7fe fe2c 	bl	d5ebc <HAL_USB_USART_Init>
}
   d7264:	4620      	mov	r0, r4
   d7266:	bd10      	pop	{r4, pc}
   d7268:	000d962c 	.word	0x000d962c

000d726c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d726c:	7c00      	ldrb	r0, [r0, #16]
   d726e:	2200      	movs	r2, #0
   d7270:	f7fe be2c 	b.w	d5ecc <HAL_USB_USART_Begin>

000d7274 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7274:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d7276:	2214      	movs	r2, #20
{
   d7278:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d727a:	2100      	movs	r1, #0
   d727c:	f001 fd66 	bl	d8d4c <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7280:	4620      	mov	r0, r4
   d7282:	bd10      	pop	{r4, pc}

000d7284 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d7284:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7286:	4c10      	ldr	r4, [pc, #64]	; (d72c8 <_Z16_fetch_usbserialv+0x44>)
{
   d7288:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d728a:	a803      	add	r0, sp, #12
   d728c:	f7ff fff2 	bl	d7274 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7290:	7821      	ldrb	r1, [r4, #0]
   d7292:	f3bf 8f5b 	dmb	ish
   d7296:	f011 0101 	ands.w	r1, r1, #1
   d729a:	d111      	bne.n	d72c0 <_Z16_fetch_usbserialv+0x3c>
   d729c:	4620      	mov	r0, r4
   d729e:	9101      	str	r1, [sp, #4]
   d72a0:	f7fc ff01 	bl	d40a6 <__cxa_guard_acquire>
   d72a4:	9901      	ldr	r1, [sp, #4]
   d72a6:	b158      	cbz	r0, d72c0 <_Z16_fetch_usbserialv+0x3c>
   d72a8:	aa03      	add	r2, sp, #12
   d72aa:	4808      	ldr	r0, [pc, #32]	; (d72cc <_Z16_fetch_usbserialv+0x48>)
   d72ac:	f7ff ffca 	bl	d7244 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d72b0:	4620      	mov	r0, r4
   d72b2:	f7fc fefd 	bl	d40b0 <__cxa_guard_release>
   d72b6:	4a06      	ldr	r2, [pc, #24]	; (d72d0 <_Z16_fetch_usbserialv+0x4c>)
   d72b8:	4906      	ldr	r1, [pc, #24]	; (d72d4 <_Z16_fetch_usbserialv+0x50>)
   d72ba:	4804      	ldr	r0, [pc, #16]	; (d72cc <_Z16_fetch_usbserialv+0x48>)
   d72bc:	f000 fdcc 	bl	d7e58 <__aeabi_atexit>
	return _usbserial;
}
   d72c0:	4802      	ldr	r0, [pc, #8]	; (d72cc <_Z16_fetch_usbserialv+0x48>)
   d72c2:	b008      	add	sp, #32
   d72c4:	bd10      	pop	{r4, pc}
   d72c6:	bf00      	nop
   d72c8:	2003e684 	.word	0x2003e684
   d72cc:	2003e688 	.word	0x2003e688
   d72d0:	2003e518 	.word	0x2003e518
   d72d4:	000d71cd 	.word	0x000d71cd

000d72d8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d72d8:	4770      	bx	lr

000d72da <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d72da:	7441      	strb	r1, [r0, #17]
}
   d72dc:	4770      	bx	lr

000d72de <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d72de:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d72e0:	7c00      	ldrb	r0, [r0, #16]
   d72e2:	f7fe fd4b 	bl	d5d7c <hal_usart_available_data_for_write>
}
   d72e6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d72ea:	bd08      	pop	{r3, pc}

000d72ec <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d72ec:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d72ee:	7c00      	ldrb	r0, [r0, #16]
   d72f0:	f7fe fd1c 	bl	d5d2c <hal_usart_available>
}
   d72f4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d72f8:	bd08      	pop	{r3, pc}

000d72fa <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d72fa:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d72fc:	7c00      	ldrb	r0, [r0, #16]
   d72fe:	f7fe fd25 	bl	d5d4c <hal_usart_peek>
}
   d7302:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7306:	bd08      	pop	{r3, pc}

000d7308 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d7308:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d730a:	7c00      	ldrb	r0, [r0, #16]
   d730c:	f7fe fd16 	bl	d5d3c <hal_usart_read>
}
   d7310:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7314:	bd08      	pop	{r3, pc}

000d7316 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d7316:	7c00      	ldrb	r0, [r0, #16]
   d7318:	f7fe bd20 	b.w	d5d5c <hal_usart_flush>

000d731c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d731c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d731e:	7c45      	ldrb	r5, [r0, #17]
{
   d7320:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7322:	b12d      	cbz	r5, d7330 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d7324:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d7326:	b003      	add	sp, #12
   d7328:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d732c:	f7fe bcf6 	b.w	d5d1c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7330:	7c00      	ldrb	r0, [r0, #16]
   d7332:	9101      	str	r1, [sp, #4]
   d7334:	f7fe fd22 	bl	d5d7c <hal_usart_available_data_for_write>
   d7338:	2800      	cmp	r0, #0
   d733a:	9901      	ldr	r1, [sp, #4]
   d733c:	dcf2      	bgt.n	d7324 <_ZN11USARTSerial5writeEh+0x8>
}
   d733e:	4628      	mov	r0, r5
   d7340:	b003      	add	sp, #12
   d7342:	bd30      	pop	{r4, r5, pc}

000d7344 <_ZN11USARTSerialD0Ev>:
   d7344:	b510      	push	{r4, lr}
   d7346:	2114      	movs	r1, #20
   d7348:	4604      	mov	r4, r0
   d734a:	f000 fd8a 	bl	d7e62 <_ZdlPvj>
   d734e:	4620      	mov	r0, r4
   d7350:	bd10      	pop	{r4, pc}
	...

000d7354 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d7354:	b510      	push	{r4, lr}
   d7356:	f04f 0c00 	mov.w	ip, #0
   d735a:	4604      	mov	r4, r0
   d735c:	4608      	mov	r0, r1
   d735e:	4611      	mov	r1, r2
   d7360:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7364:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d7368:	4a04      	ldr	r2, [pc, #16]	; (d737c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d736a:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d736c:	2201      	movs	r2, #1
  _serial = serial;
   d736e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d7370:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d7372:	461a      	mov	r2, r3
   d7374:	f7fe fcca 	bl	d5d0c <hal_usart_init>
}
   d7378:	4620      	mov	r0, r4
   d737a:	bd10      	pop	{r4, pc}
   d737c:	000d965c 	.word	0x000d965c

000d7380 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d7380:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d7382:	4c0e      	ldr	r4, [pc, #56]	; (d73bc <_Z22__fetch_global_Serial1v+0x3c>)
   d7384:	7821      	ldrb	r1, [r4, #0]
   d7386:	f3bf 8f5b 	dmb	ish
   d738a:	f011 0101 	ands.w	r1, r1, #1
   d738e:	d112      	bne.n	d73b6 <_Z22__fetch_global_Serial1v+0x36>
   d7390:	4620      	mov	r0, r4
   d7392:	9101      	str	r1, [sp, #4]
   d7394:	f7fc fe87 	bl	d40a6 <__cxa_guard_acquire>
   d7398:	9901      	ldr	r1, [sp, #4]
   d739a:	b160      	cbz	r0, d73b6 <_Z22__fetch_global_Serial1v+0x36>
   d739c:	4a08      	ldr	r2, [pc, #32]	; (d73c0 <_Z22__fetch_global_Serial1v+0x40>)
   d739e:	4b09      	ldr	r3, [pc, #36]	; (d73c4 <_Z22__fetch_global_Serial1v+0x44>)
   d73a0:	4809      	ldr	r0, [pc, #36]	; (d73c8 <_Z22__fetch_global_Serial1v+0x48>)
   d73a2:	f7ff ffd7 	bl	d7354 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d73a6:	4620      	mov	r0, r4
   d73a8:	f7fc fe82 	bl	d40b0 <__cxa_guard_release>
   d73ac:	4a07      	ldr	r2, [pc, #28]	; (d73cc <_Z22__fetch_global_Serial1v+0x4c>)
   d73ae:	4908      	ldr	r1, [pc, #32]	; (d73d0 <_Z22__fetch_global_Serial1v+0x50>)
   d73b0:	4805      	ldr	r0, [pc, #20]	; (d73c8 <_Z22__fetch_global_Serial1v+0x48>)
   d73b2:	f000 fd51 	bl	d7e58 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d73b6:	4804      	ldr	r0, [pc, #16]	; (d73c8 <_Z22__fetch_global_Serial1v+0x48>)
   d73b8:	b002      	add	sp, #8
   d73ba:	bd10      	pop	{r4, pc}
   d73bc:	2003e69c 	.word	0x2003e69c
   d73c0:	2003e6a0 	.word	0x2003e6a0
   d73c4:	2003e724 	.word	0x2003e724
   d73c8:	2003e7a8 	.word	0x2003e7a8
   d73cc:	2003e518 	.word	0x2003e518
   d73d0:	000d72d9 	.word	0x000d72d9

000d73d4 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d73d4:	4770      	bx	lr

000d73d6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d73d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d73d8:	4606      	mov	r6, r0
   d73da:	4615      	mov	r5, r2
   d73dc:	460c      	mov	r4, r1
   d73de:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d73e0:	42bc      	cmp	r4, r7
   d73e2:	d006      	beq.n	d73f2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d73e4:	6833      	ldr	r3, [r6, #0]
   d73e6:	f814 1b01 	ldrb.w	r1, [r4], #1
   d73ea:	689b      	ldr	r3, [r3, #8]
   d73ec:	4630      	mov	r0, r6
   d73ee:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d73f0:	e7f6      	b.n	d73e0 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d73f2:	4628      	mov	r0, r5
   d73f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d73f6 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d73f6:	7c00      	ldrb	r0, [r0, #16]
   d73f8:	2200      	movs	r2, #0
   d73fa:	f7fe bcdf 	b.w	d5dbc <hal_i2c_write>

000d73fe <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d73fe:	7c00      	ldrb	r0, [r0, #16]
   d7400:	2100      	movs	r1, #0
   d7402:	f7fe bce3 	b.w	d5dcc <hal_i2c_available>

000d7406 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d7406:	7c00      	ldrb	r0, [r0, #16]
   d7408:	2100      	movs	r1, #0
   d740a:	f7fe bce7 	b.w	d5ddc <hal_i2c_read>

000d740e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d740e:	7c00      	ldrb	r0, [r0, #16]
   d7410:	2100      	movs	r1, #0
   d7412:	f7fe bceb 	b.w	d5dec <hal_i2c_peek>

000d7416 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d7416:	7c00      	ldrb	r0, [r0, #16]
   d7418:	2100      	movs	r1, #0
   d741a:	f7fe bcef 	b.w	d5dfc <hal_i2c_flush>

000d741e <_ZN7TwoWireD0Ev>:
   d741e:	b510      	push	{r4, lr}
   d7420:	2114      	movs	r1, #20
   d7422:	4604      	mov	r4, r0
   d7424:	f000 fd1d 	bl	d7e62 <_ZdlPvj>
   d7428:	4620      	mov	r0, r4
   d742a:	bd10      	pop	{r4, pc}

000d742c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d742c:	b510      	push	{r4, lr}
   d742e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7432:	4604      	mov	r4, r0
   d7434:	4608      	mov	r0, r1
   d7436:	2100      	movs	r1, #0
   d7438:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d743c:	4b03      	ldr	r3, [pc, #12]	; (d744c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d743e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d7440:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d7442:	4611      	mov	r1, r2
   d7444:	f7fe fcea 	bl	d5e1c <hal_i2c_init>
}
   d7448:	4620      	mov	r0, r4
   d744a:	bd10      	pop	{r4, pc}
   d744c:	000d968c 	.word	0x000d968c

000d7450 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d7450:	2300      	movs	r3, #0
   d7452:	7c00      	ldrb	r0, [r0, #16]
   d7454:	461a      	mov	r2, r3
   d7456:	4619      	mov	r1, r3
   d7458:	f7fe bc98 	b.w	d5d8c <hal_i2c_begin>

000d745c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d745c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d745e:	2200      	movs	r2, #0
   d7460:	2314      	movs	r3, #20
   d7462:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d7466:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d746a:	780b      	ldrb	r3, [r1, #0]
   d746c:	f88d 3008 	strb.w	r3, [sp, #8]
   d7470:	684b      	ldr	r3, [r1, #4]
   d7472:	9303      	str	r3, [sp, #12]
   d7474:	68cb      	ldr	r3, [r1, #12]
   d7476:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d7478:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d747a:	7a0b      	ldrb	r3, [r1, #8]
   d747c:	9305      	str	r3, [sp, #20]
   d747e:	a901      	add	r1, sp, #4
   d7480:	f7fe fcd4 	bl	d5e2c <hal_i2c_request_ex>
}
   d7484:	b007      	add	sp, #28
   d7486:	f85d fb04 	ldr.w	pc, [sp], #4

000d748a <_ZN7TwoWire11requestFromEhjh>:
{
   d748a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d748c:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d748e:	f88d 1000 	strb.w	r1, [sp]
   d7492:	f04f 0164 	mov.w	r1, #100	; 0x64
   d7496:	9103      	str	r1, [sp, #12]
   d7498:	bf18      	it	ne
   d749a:	2301      	movne	r3, #1
   d749c:	4669      	mov	r1, sp
    size_ = size;
   d749e:	9201      	str	r2, [sp, #4]
   d74a0:	f88d 3008 	strb.w	r3, [sp, #8]
   d74a4:	f7ff ffda 	bl	d745c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d74a8:	b005      	add	sp, #20
   d74aa:	f85d fb04 	ldr.w	pc, [sp], #4

000d74ae <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d74ae:	2301      	movs	r3, #1
   d74b0:	f7ff bfeb 	b.w	d748a <_ZN7TwoWire11requestFromEhjh>

000d74b4 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d74b4:	7c00      	ldrb	r0, [r0, #16]
   d74b6:	2200      	movs	r2, #0
   d74b8:	f7fe bc70 	b.w	d5d9c <hal_i2c_begin_transmission>

000d74bc <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d74bc:	7c00      	ldrb	r0, [r0, #16]
   d74be:	2200      	movs	r2, #0
   d74c0:	f7fe bc74 	b.w	d5dac <hal_i2c_end_transmission>

000d74c4 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d74c4:	2101      	movs	r1, #1
   d74c6:	f7ff bff9 	b.w	d74bc <_ZN7TwoWire15endTransmissionEh>

000d74ca <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d74ca:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d74cc:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   d74ce:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d74d2:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d74d4:	2201      	movs	r2, #1
   d74d6:	f04f 33ff 	mov.w	r3, #4294967295
   d74da:	f10d 0107 	add.w	r1, sp, #7
   d74de:	47a0      	blx	r4
}
   d74e0:	b002      	add	sp, #8
   d74e2:	bd10      	pop	{r4, pc}

000d74e4 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d74e4:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d74e6:	6803      	ldr	r3, [r0, #0]
   d74e8:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d74ea:	f04f 33ff 	mov.w	r3, #4294967295
   d74ee:	46a4      	mov	ip, r4
}
   d74f0:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d74f4:	4760      	bx	ip

000d74f6 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d74f6:	b513      	push	{r0, r1, r4, lr}
   d74f8:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   d74fa:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d74fc:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   d7500:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d7502:	f10d 0107 	add.w	r1, sp, #7
   d7506:	2201      	movs	r2, #1
   d7508:	47a0      	blx	r4
}
   d750a:	b002      	add	sp, #8
   d750c:	bd10      	pop	{r4, pc}

000d750e <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   d750e:	4770      	bx	lr

000d7510 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d7510:	b538      	push	{r3, r4, r5, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d7512:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d7514:	681a      	ldr	r2, [r3, #0]
   d7516:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   d7518:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   d751a:	da10      	bge.n	d753e <_ZN9TCPClient9connectedEv+0x2e>
   d751c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7520:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7524:	429a      	cmp	r2, r3
   d7526:	d10a      	bne.n	d753e <_ZN9TCPClient9connectedEv+0x2e>
    if (!rv) {
        rv = available();
   d7528:	6803      	ldr	r3, [r0, #0]
   d752a:	691b      	ldr	r3, [r3, #16]
   d752c:	4798      	blx	r3
        if (!rv) {
   d752e:	4604      	mov	r4, r0
   d7530:	b928      	cbnz	r0, d753e <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   d7532:	682b      	ldr	r3, [r5, #0]
   d7534:	4628      	mov	r0, r5
   d7536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7538:	4798      	blx	r3
        rv = available();
   d753a:	4620      	mov	r0, r4
        }
    }
    return rv;
}
   d753c:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   d753e:	2001      	movs	r0, #1
   d7540:	e7fc      	b.n	d753c <_ZN9TCPClient9connectedEv+0x2c>

000d7542 <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d7542:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   d7544:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   d7546:	43c0      	mvns	r0, r0
   d7548:	0fc0      	lsrs	r0, r0, #31
   d754a:	4770      	bx	lr

000d754c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d754c:	4770      	bx	lr
	...

000d7550 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d7550:	4b06      	ldr	r3, [pc, #24]	; (d756c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d7552:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d7554:	b510      	push	{r4, lr}
   d7556:	f100 040c 	add.w	r4, r0, #12
	    ||
   d755a:	d005      	beq.n	d7568 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d755c:	4608      	mov	r0, r1
   d755e:	f000 fc87 	bl	d7e70 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d7562:	2800      	cmp	r0, #0
	return nullptr;
   d7564:	bf08      	it	eq
   d7566:	2400      	moveq	r4, #0
      }
   d7568:	4620      	mov	r0, r4
   d756a:	bd10      	pop	{r4, pc}
   d756c:	000d95d8 	.word	0x000d95d8

000d7570 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d7570:	b510      	push	{r4, lr}
   d7572:	21ac      	movs	r1, #172	; 0xac
   d7574:	4604      	mov	r4, r0
   d7576:	f000 fc74 	bl	d7e62 <_ZdlPvj>
   d757a:	4620      	mov	r0, r4
   d757c:	bd10      	pop	{r4, pc}

000d757e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p);
   d757e:	f7fc bd8e 	b.w	d409e <_ZdlPv>

000d7582 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d7582:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   d7586:	f04f 0800 	mov.w	r8, #0
   d758a:	b086      	sub	sp, #24
   d758c:	461d      	mov	r5, r3
   d758e:	f8c0 8004 	str.w	r8, [r0, #4]
   d7592:	4604      	mov	r4, r0
   d7594:	460e      	mov	r6, r1
   d7596:	4617      	mov	r7, r2
    struct timeval tv = {};
   d7598:	4641      	mov	r1, r8
   d759a:	2210      	movs	r2, #16
   d759c:	a802      	add	r0, sp, #8
   d759e:	f001 fbd5 	bl	d8d4c <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   d75a2:	1c6b      	adds	r3, r5, #1
   d75a4:	d009      	beq.n	d75ba <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   d75a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d75aa:	fbb5 f3f0 	udiv	r3, r5, r0
   d75ae:	e9cd 3802 	strd	r3, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d75b2:	fb00 5313 	mls	r3, r0, r3, r5
   d75b6:	4358      	muls	r0, r3
   d75b8:	9004      	str	r0, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d75ba:	6960      	ldr	r0, [r4, #20]
   d75bc:	2310      	movs	r3, #16
   d75be:	9300      	str	r3, [sp, #0]
   d75c0:	6800      	ldr	r0, [r0, #0]
   d75c2:	ab02      	add	r3, sp, #8
   d75c4:	f241 0205 	movw	r2, #4101	; 0x1005
   d75c8:	f640 71ff 	movw	r1, #4095	; 0xfff
   d75cc:	f7fe fc36 	bl	d5e3c <sock_setsockopt>
    if (ret < 0) {
   d75d0:	2800      	cmp	r0, #0
   d75d2:	da07      	bge.n	d75e4 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   d75d4:	f7fe fd86 	bl	d60e4 <__errno>
   d75d8:	6803      	ldr	r3, [r0, #0]
   d75da:	6063      	str	r3, [r4, #4]
        return 0;
   d75dc:	2000      	movs	r0, #0
}
   d75de:	b006      	add	sp, #24
   d75e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   d75e4:	6960      	ldr	r0, [r4, #20]
   d75e6:	2300      	movs	r3, #0
   d75e8:	6800      	ldr	r0, [r0, #0]
   d75ea:	463a      	mov	r2, r7
   d75ec:	4631      	mov	r1, r6
   d75ee:	f7fe fc45 	bl	d5e7c <sock_send>
    if (ret < 0) {
   d75f2:	1e03      	subs	r3, r0, #0
   d75f4:	dbee      	blt.n	d75d4 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   d75f6:	4618      	mov	r0, r3
   d75f8:	e7f1      	b.n	d75de <_ZN9TCPClient5writeEPKhjm+0x5c>
	...

000d75fc <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d75fc:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   d75fe:	6984      	ldr	r4, [r0, #24]
   d7600:	4b0a      	ldr	r3, [pc, #40]	; (d762c <_ZN9TCPClientD1Ev+0x30>)
   d7602:	6003      	str	r3, [r0, #0]
   d7604:	4605      	mov	r5, r0
   d7606:	b17c      	cbz	r4, d7628 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   d7608:	6863      	ldr	r3, [r4, #4]
   d760a:	3b01      	subs	r3, #1
   d760c:	6063      	str	r3, [r4, #4]
   d760e:	b95b      	cbnz	r3, d7628 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   d7610:	6823      	ldr	r3, [r4, #0]
   d7612:	4620      	mov	r0, r4
   d7614:	689b      	ldr	r3, [r3, #8]
   d7616:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d7618:	68a3      	ldr	r3, [r4, #8]
   d761a:	3b01      	subs	r3, #1
   d761c:	60a3      	str	r3, [r4, #8]
   d761e:	b91b      	cbnz	r3, d7628 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d7620:	6823      	ldr	r3, [r4, #0]
   d7622:	4620      	mov	r0, r4
   d7624:	68db      	ldr	r3, [r3, #12]
   d7626:	4798      	blx	r3
   d7628:	4628      	mov	r0, r5
   d762a:	bd38      	pop	{r3, r4, r5, pc}
   d762c:	000d96e8 	.word	0x000d96e8

000d7630 <_ZN9TCPClientD0Ev>:
   d7630:	b510      	push	{r4, lr}
   d7632:	4604      	mov	r4, r0
   d7634:	f7ff ffe2 	bl	d75fc <_ZN9TCPClientD1Ev>
   d7638:	4620      	mov	r0, r4
   d763a:	211c      	movs	r1, #28
   d763c:	f000 fc11 	bl	d7e62 <_ZdlPvj>
   d7640:	4620      	mov	r0, r4
   d7642:	bd10      	pop	{r4, pc}

000d7644 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   d7644:	b570      	push	{r4, r5, r6, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d7646:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   d7648:	4b05      	ldr	r3, [pc, #20]	; (d7660 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d764a:	4604      	mov	r4, r0
   d764c:	358c      	adds	r5, #140	; 0x8c
   d764e:	f844 3b04 	str.w	r3, [r4], #4
   d7652:	4606      	mov	r6, r0
   d7654:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7656:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7658:	682b      	ldr	r3, [r5, #0]
   d765a:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d765c:	4630      	mov	r0, r6
   d765e:	bd70      	pop	{r4, r5, r6, pc}
   d7660:	000d9618 	.word	0x000d9618

000d7664 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   d7664:	b510      	push	{r4, lr}
   d7666:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d7668:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d766c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7670:	429a      	cmp	r2, r3
int TCPClient::peek() {
   d7672:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d7674:	d005      	beq.n	d7682 <_ZN9TCPClient4peekEv+0x1e>
   d7676:	6963      	ldr	r3, [r4, #20]
   d7678:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d767c:	4413      	add	r3, r2
   d767e:	7918      	ldrb	r0, [r3, #4]
}
   d7680:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d7682:	6803      	ldr	r3, [r0, #0]
   d7684:	691b      	ldr	r3, [r3, #16]
   d7686:	4798      	blx	r3
   d7688:	2800      	cmp	r0, #0
   d768a:	d1f4      	bne.n	d7676 <_ZN9TCPClient4peekEv+0x12>
   d768c:	f04f 30ff 	mov.w	r0, #4294967295
   d7690:	e7f6      	b.n	d7680 <_ZN9TCPClient4peekEv+0x1c>

000d7692 <_ZN9TCPClient4readEv>:
int TCPClient::read() {
   d7692:	b510      	push	{r4, lr}
   d7694:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d7696:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d769a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d769e:	429a      	cmp	r2, r3
int TCPClient::read() {
   d76a0:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d76a2:	d008      	beq.n	d76b6 <_ZN9TCPClient4readEv+0x24>
   d76a4:	6963      	ldr	r3, [r4, #20]
   d76a6:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d76aa:	1c51      	adds	r1, r2, #1
   d76ac:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   d76b0:	4413      	add	r3, r2
   d76b2:	7918      	ldrb	r0, [r3, #4]
}
   d76b4:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d76b6:	6803      	ldr	r3, [r0, #0]
   d76b8:	691b      	ldr	r3, [r3, #16]
   d76ba:	4798      	blx	r3
   d76bc:	2800      	cmp	r0, #0
   d76be:	d1f1      	bne.n	d76a4 <_ZN9TCPClient4readEv+0x12>
   d76c0:	f04f 30ff 	mov.w	r0, #4294967295
   d76c4:	e7f6      	b.n	d76b4 <_ZN9TCPClient4readEv+0x22>

000d76c6 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   d76c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d76c8:	6943      	ldr	r3, [r0, #20]
   d76ca:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   d76cc:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d76d0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d76d4:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   d76d6:	4605      	mov	r5, r0
   d76d8:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   d76da:	d016      	beq.n	d770a <_ZN9TCPClient4readEPhj+0x44>
   d76dc:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   d76de:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d76e2:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d76e6:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d76e8:	42bc      	cmp	r4, r7
   d76ea:	bf28      	it	cs
   d76ec:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d76ee:	3304      	adds	r3, #4
   d76f0:	4622      	mov	r2, r4
   d76f2:	4419      	add	r1, r3
   d76f4:	4630      	mov	r0, r6
   d76f6:	f001 fb01 	bl	d8cfc <memcpy>
   d76fa:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d76fc:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d7700:	4423      	add	r3, r4
   d7702:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   d7706:	4620      	mov	r0, r4
   d7708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   d770a:	6803      	ldr	r3, [r0, #0]
   d770c:	691b      	ldr	r3, [r3, #16]
   d770e:	4798      	blx	r3
   d7710:	2800      	cmp	r0, #0
   d7712:	d1e3      	bne.n	d76dc <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   d7714:	f04f 34ff 	mov.w	r4, #4294967295
   d7718:	e7f5      	b.n	d7706 <_ZN9TCPClient4readEPhj+0x40>

000d771a <_ZN9TCPClient12flush_bufferEv>:
   d771a:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d771c:	2300      	movs	r3, #0
   d771e:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d7722:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d7724:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   d7728:	4770      	bx	lr

000d772a <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d772a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d772e:	461f      	mov	r7, r3
    stop();
   d7730:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d7732:	460c      	mov	r4, r1
    stop();
   d7734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d7736:	b08a      	sub	sp, #40	; 0x28
   d7738:	4605      	mov	r5, r0
   d773a:	4616      	mov	r6, r2
    stop();
   d773c:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d773e:	7d23      	ldrb	r3, [r4, #20]
   d7740:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d7744:	2b04      	cmp	r3, #4
   d7746:	bf0c      	ite	eq
   d7748:	2002      	moveq	r0, #2
   d774a:	200a      	movne	r0, #10
   d774c:	2206      	movs	r2, #6
   d774e:	2101      	movs	r1, #1
   d7750:	f7fe fb9c 	bl	d5e8c <sock_socket>
   d7754:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d7758:	696b      	ldr	r3, [r5, #20]
   d775a:	681b      	ldr	r3, [r3, #0]
   d775c:	2b00      	cmp	r3, #0
   d775e:	da08      	bge.n	d7772 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   d7760:	682b      	ldr	r3, [r5, #0]
   d7762:	4628      	mov	r0, r5
   d7764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d7766:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   d7768:	4798      	blx	r3
}
   d776a:	4620      	mov	r0, r4
   d776c:	b00a      	add	sp, #40	; 0x28
   d776e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   d7772:	4628      	mov	r0, r5
   d7774:	f7ff ffd1 	bl	d771a <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   d7778:	b1b7      	cbz	r7, d77a8 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   d777a:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d777c:	a903      	add	r1, sp, #12
   d777e:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   d7780:	9303      	str	r3, [sp, #12]
   d7782:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d7786:	f7fe fa15 	bl	d5bb4 <if_index_to_name>
   d778a:	2800      	cmp	r0, #0
   d778c:	d1e8      	bne.n	d7760 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d778e:	6968      	ldr	r0, [r5, #20]
   d7790:	2306      	movs	r3, #6
   d7792:	9300      	str	r3, [sp, #0]
   d7794:	6800      	ldr	r0, [r0, #0]
   d7796:	ab03      	add	r3, sp, #12
   d7798:	f241 020b 	movw	r2, #4107	; 0x100b
   d779c:	f640 71ff 	movw	r1, #4095	; 0xfff
   d77a0:	f7fe fb4c 	bl	d5e3c <sock_setsockopt>
   d77a4:	2800      	cmp	r0, #0
   d77a6:	d1db      	bne.n	d7760 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   d77a8:	221c      	movs	r2, #28
   d77aa:	2100      	movs	r1, #0
   d77ac:	a803      	add	r0, sp, #12
   d77ae:	f001 facd 	bl	d8d4c <memset>
    if (ip.version() == 4) {
   d77b2:	7d23      	ldrb	r3, [r4, #20]
   d77b4:	2b04      	cmp	r3, #4
   d77b6:	d11d      	bne.n	d77f4 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   d77b8:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   d77bc:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   d77be:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   d77c2:	f7fe fa9b 	bl	d5cfc <inet_htons>
   d77c6:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d77ca:	6860      	ldr	r0, [r4, #4]
   d77cc:	f7fe fa8e 	bl	d5cec <inet_htonl>
   d77d0:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d77d2:	696b      	ldr	r3, [r5, #20]
   d77d4:	221c      	movs	r2, #28
   d77d6:	6818      	ldr	r0, [r3, #0]
   d77d8:	a903      	add	r1, sp, #12
   d77da:	f7fe fb3f 	bl	d5e5c <sock_connect>
   d77de:	2800      	cmp	r0, #0
   d77e0:	d1be      	bne.n	d7760 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   d77e2:	3404      	adds	r4, #4
   d77e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d77e6:	696d      	ldr	r5, [r5, #20]
   d77e8:	358c      	adds	r5, #140	; 0x8c
   d77ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d77ec:	6823      	ldr	r3, [r4, #0]
   d77ee:	702b      	strb	r3, [r5, #0]
    return 1; // success
   d77f0:	2401      	movs	r4, #1
   d77f2:	e7ba      	b.n	d776a <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   d77f4:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   d77f8:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   d77fa:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   d77fe:	f7fe fa7d 	bl	d5cfc <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d7802:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   d7804:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d7808:	1d23      	adds	r3, r4, #4
   d780a:	f104 0714 	add.w	r7, r4, #20
   d780e:	6818      	ldr	r0, [r3, #0]
   d7810:	6859      	ldr	r1, [r3, #4]
   d7812:	4632      	mov	r2, r6
   d7814:	c203      	stmia	r2!, {r0, r1}
   d7816:	3308      	adds	r3, #8
   d7818:	42bb      	cmp	r3, r7
   d781a:	4616      	mov	r6, r2
   d781c:	d1f7      	bne.n	d780e <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   d781e:	e7d8      	b.n	d77d2 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>

000d7820 <_ZN9TCPClient9availableEv>:
{
   d7820:	b530      	push	{r4, r5, lr}
   d7822:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   d7824:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   d7828:	b08b      	sub	sp, #44	; 0x2c
   d782a:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   d782c:	b12b      	cbz	r3, d783a <_ZN9TCPClient9availableEv+0x1a>
   d782e:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d7832:	429a      	cmp	r2, r3
   d7834:	d101      	bne.n	d783a <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   d7836:	f7ff ff70 	bl	d771a <_ZN9TCPClient12flush_bufferEv>
   d783a:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   d783c:	6808      	ldr	r0, [r1, #0]
   d783e:	2800      	cmp	r0, #0
   d7840:	db18      	blt.n	d7874 <_ZN9TCPClient9availableEv+0x54>
   d7842:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
        if (d_->total < arraySize(d_->buffer)) {
   d7846:	2d7f      	cmp	r5, #127	; 0x7f
   d7848:	d814      	bhi.n	d7874 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d784a:	3104      	adds	r1, #4
   d784c:	2308      	movs	r3, #8
   d784e:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d7852:	4429      	add	r1, r5
   d7854:	f7fe fb0a 	bl	d5e6c <sock_recv>
            if (ret > 0) {
   d7858:	2800      	cmp	r0, #0
   d785a:	dd13      	ble.n	d7884 <_ZN9TCPClient9availableEv+0x64>
   d785c:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d785e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7862:	b90a      	cbnz	r2, d7868 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   d7864:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d7868:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   d786a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d786e:	4410      	add	r0, r2
   d7870:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   d7874:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   d7876:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   d787a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   d787e:	1ac0      	subs	r0, r0, r3
   d7880:	b00b      	add	sp, #44	; 0x2c
   d7882:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d7884:	f7fe fc2e 	bl	d60e4 <__errno>
   d7888:	6803      	ldr	r3, [r0, #0]
   d788a:	2b0b      	cmp	r3, #11
   d788c:	d0f2      	beq.n	d7874 <_ZN9TCPClient9availableEv+0x54>
   d788e:	f7fe fc29 	bl	d60e4 <__errno>
   d7892:	6803      	ldr	r3, [r0, #0]
   d7894:	2b0b      	cmp	r3, #11
   d7896:	d0ed      	beq.n	d7874 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   d7898:	2320      	movs	r3, #32
   d789a:	2500      	movs	r5, #0
   d789c:	e9cd 3502 	strd	r3, r5, [sp, #8]
   d78a0:	f7fe fc20 	bl	d60e4 <__errno>
   d78a4:	6803      	ldr	r3, [r0, #0]
   d78a6:	9301      	str	r3, [sp, #4]
   d78a8:	4b08      	ldr	r3, [pc, #32]	; (d78cc <_ZN9TCPClient9availableEv+0xac>)
   d78aa:	4909      	ldr	r1, [pc, #36]	; (d78d0 <_ZN9TCPClient9availableEv+0xb0>)
   d78ac:	9300      	str	r3, [sp, #0]
   d78ae:	aa02      	add	r2, sp, #8
   d78b0:	462b      	mov	r3, r5
   d78b2:	2032      	movs	r0, #50	; 0x32
   d78b4:	f7fe fb42 	bl	d5f3c <log_message>
                    sock_close(d_->sock);
   d78b8:	6963      	ldr	r3, [r4, #20]
   d78ba:	6818      	ldr	r0, [r3, #0]
   d78bc:	f7fe fac6 	bl	d5e4c <sock_close>
   d78c0:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d78c2:	f04f 32ff 	mov.w	r2, #4294967295
   d78c6:	601a      	str	r2, [r3, #0]
   d78c8:	e7d4      	b.n	d7874 <_ZN9TCPClient9availableEv+0x54>
   d78ca:	bf00      	nop
   d78cc:	000d96b3 	.word	0x000d96b3
   d78d0:	000d96ac 	.word	0x000d96ac

000d78d4 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   d78d4:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d78d6:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   d78d8:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d78da:	6818      	ldr	r0, [r3, #0]
   d78dc:	2800      	cmp	r0, #0
   d78de:	db01      	blt.n	d78e4 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d78e0:	f7fe fab4 	bl	d5e4c <sock_close>
   d78e4:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   d78e6:	f04f 32ff 	mov.w	r2, #4294967295
   d78ea:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   d78ec:	6960      	ldr	r0, [r4, #20]
   d78ee:	2211      	movs	r2, #17
   d78f0:	2100      	movs	r1, #0
   d78f2:	308c      	adds	r0, #140	; 0x8c
   d78f4:	f001 fa2a 	bl	d8d4c <memset>
    flush_buffer();
   d78f8:	4620      	mov	r0, r4
}
   d78fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   d78fe:	f7ff bf0c 	b.w	d771a <_ZN9TCPClient12flush_bufferEv>

000d7902 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   d7902:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d7904:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   d7906:	4604      	mov	r4, r0
          total(0) {
   d7908:	6001      	str	r1, [r0, #0]
   d790a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   d790e:	3088      	adds	r0, #136	; 0x88
   d7910:	f7ff fbfc 	bl	d710c <_ZN9IPAddressC1Ev>
}
   d7914:	4620      	mov	r0, r4
   d7916:	bd10      	pop	{r4, pc}

000d7918 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   d7918:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d791a:	2300      	movs	r3, #0
   d791c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7920:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   d7924:	4a0e      	ldr	r2, [pc, #56]	; (d7960 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   d7926:	6103      	str	r3, [r0, #16]
   d7928:	6002      	str	r2, [r0, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d792a:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   d792c:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d792e:	20ac      	movs	r0, #172	; 0xac
   d7930:	9101      	str	r1, [sp, #4]
   d7932:	f7fc fbb0 	bl	d4096 <_Znwj>
	  auto __pi = ::new (__mem)
   d7936:	1e05      	subs	r5, r0, #0
   d7938:	f105 060c 	add.w	r6, r5, #12
   d793c:	d008      	beq.n	d7950 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   d793e:	2301      	movs	r3, #1
   d7940:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   d7944:	4b07      	ldr	r3, [pc, #28]	; (d7964 <_ZN9TCPClientC1Ei+0x4c>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d7946:	9901      	ldr	r1, [sp, #4]
   d7948:	602b      	str	r3, [r5, #0]
   d794a:	4630      	mov	r0, r6
   d794c:	f7ff ffd9 	bl	d7902 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   d7950:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   d7952:	e9c4 6505 	strd	r6, r5, [r4, #20]
   d7956:	f7ff fee0 	bl	d771a <_ZN9TCPClient12flush_bufferEv>
}
   d795a:	b002      	add	sp, #8
   d795c:	bd70      	pop	{r4, r5, r6, pc}
   d795e:	bf00      	nop
   d7960:	000d96e8 	.word	0x000d96e8
   d7964:	000d96cc 	.word	0x000d96cc

000d7968 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   d7968:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d796a:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   d796e:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d7970:	f7ff ffd2 	bl	d7918 <_ZN9TCPClientC1Ei>
}
   d7974:	4620      	mov	r0, r4
   d7976:	bd10      	pop	{r4, pc}

000d7978 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   d7978:	b510      	push	{r4, lr}
   d797a:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d797c:	6800      	ldr	r0, [r0, #0]
   d797e:	2800      	cmp	r0, #0
   d7980:	db01      	blt.n	d7986 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d7982:	f7fe fa63 	bl	d5e4c <sock_close>
    }
}
   d7986:	4620      	mov	r0, r4
   d7988:	bd10      	pop	{r4, pc}

000d798a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
   d798a:	300c      	adds	r0, #12
   d798c:	f7ff bff4 	b.w	d7978 <_ZN9TCPClient4DataD1Ev>

000d7990 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d7990:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7994:	4698      	mov	r8, r3
    stop();
   d7996:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d7998:	b093      	sub	sp, #76	; 0x4c
   d799a:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   d799c:	2400      	movs	r4, #0
    stop();
   d799e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d79a0:	4606      	mov	r6, r0
   d79a2:	4617      	mov	r7, r2
    stop();
   d79a4:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d79a6:	4628      	mov	r0, r5
   d79a8:	466b      	mov	r3, sp
   d79aa:	4622      	mov	r2, r4
   d79ac:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   d79ae:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d79b0:	f7fe f8b8 	bl	d5b24 <netdb_getaddrinfo>
   d79b4:	4605      	mov	r5, r0
   d79b6:	2800      	cmp	r0, #0
   d79b8:	d163      	bne.n	d7a82 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   d79ba:	9b00      	ldr	r3, [sp, #0]
   d79bc:	2b00      	cmp	r3, #0
   d79be:	d04b      	beq.n	d7a58 <_ZN9TCPClient7connectEPKctm+0xc8>
   d79c0:	695b      	ldr	r3, [r3, #20]
   d79c2:	2b00      	cmp	r3, #0
   d79c4:	d048      	beq.n	d7a58 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   d79c6:	a806      	add	r0, sp, #24
   d79c8:	f7ff fba0 	bl	d710c <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d79cc:	9b00      	ldr	r3, [sp, #0]
   d79ce:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d79d0:	7863      	ldrb	r3, [r4, #1]
   d79d2:	2b02      	cmp	r3, #2
   d79d4:	d104      	bne.n	d79e0 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d79d6:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d79d8:	a806      	add	r0, sp, #24
   d79da:	f7fe fc4a 	bl	d6272 <_ZN9IPAddressaSIPKhEERS_T_>
        }
        if (port) {
   d79de:	e026      	b.n	d7a2e <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   d79e0:	2b0a      	cmp	r3, #10
   d79e2:	d124      	bne.n	d7a2e <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   d79e4:	2211      	movs	r2, #17
   d79e6:	4629      	mov	r1, r5
   d79e8:	a801      	add	r0, sp, #4
   d79ea:	f001 f9af 	bl	d8d4c <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d79ee:	68a3      	ldr	r3, [r4, #8]
   d79f0:	2b00      	cmp	r3, #0
   d79f2:	d038      	beq.n	d7a66 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d79f4:	f104 0308 	add.w	r3, r4, #8
   d79f8:	f10d 0c04 	add.w	ip, sp, #4
   d79fc:	3418      	adds	r4, #24
   d79fe:	6818      	ldr	r0, [r3, #0]
   d7a00:	6859      	ldr	r1, [r3, #4]
   d7a02:	4662      	mov	r2, ip
   d7a04:	c203      	stmia	r2!, {r0, r1}
   d7a06:	3308      	adds	r3, #8
   d7a08:	42a3      	cmp	r3, r4
   d7a0a:	4694      	mov	ip, r2
   d7a0c:	d1f7      	bne.n	d79fe <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   d7a0e:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d7a10:	a901      	add	r1, sp, #4
   d7a12:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   d7a14:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d7a18:	f7ff fb86 	bl	d7128 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
class IPAddress : public Printable {
   d7a1c:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   d7a20:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d7a24:	ac07      	add	r4, sp, #28
   d7a26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7a28:	f8dc 3000 	ldr.w	r3, [ip]
   d7a2c:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   d7a2e:	a806      	add	r0, sp, #24
   d7a30:	f7ff fb8c 	bl	d714c <_ZNK9IPAddresscvbEv>
        if (addr) {
   d7a34:	b180      	cbz	r0, d7a58 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   d7a36:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   d7a38:	ad07      	add	r5, sp, #28
   d7a3a:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d7a3e:	4b12      	ldr	r3, [pc, #72]	; (d7a88 <_ZN9TCPClient7connectEPKctm+0xf8>)
   d7a40:	930c      	str	r3, [sp, #48]	; 0x30
   d7a42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7a44:	ac0d      	add	r4, sp, #52	; 0x34
   d7a46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7a48:	682b      	ldr	r3, [r5, #0]
   d7a4a:	7023      	strb	r3, [r4, #0]
   d7a4c:	463a      	mov	r2, r7
   d7a4e:	4643      	mov	r3, r8
   d7a50:	a90c      	add	r1, sp, #48	; 0x30
   d7a52:	4630      	mov	r0, r6
   d7a54:	47c8      	blx	r9
   d7a56:	4605      	mov	r5, r0
    SCOPE_GUARD({
   d7a58:	9800      	ldr	r0, [sp, #0]
   d7a5a:	f7fe f85b 	bl	d5b14 <netdb_freeaddrinfo>
}
   d7a5e:	4628      	mov	r0, r5
   d7a60:	b013      	add	sp, #76	; 0x4c
   d7a62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d7a66:	68e3      	ldr	r3, [r4, #12]
   d7a68:	2b00      	cmp	r3, #0
   d7a6a:	d1c3      	bne.n	d79f4 <_ZN9TCPClient7connectEPKctm+0x64>
   d7a6c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d7a70:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d7a74:	f7fe f93a 	bl	d5cec <inet_htonl>
   d7a78:	4581      	cmp	r9, r0
   d7a7a:	d1bb      	bne.n	d79f4 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   d7a7c:	f104 0114 	add.w	r1, r4, #20
   d7a80:	e7aa      	b.n	d79d8 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d7a82:	4625      	mov	r5, r4
   d7a84:	e7e8      	b.n	d7a58 <_ZN9TCPClient7connectEPKctm+0xc8>
   d7a86:	bf00      	nop
   d7a88:	000d9618 	.word	0x000d9618

000d7a8c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d7a8c:	2200      	movs	r2, #0
   d7a8e:	6840      	ldr	r0, [r0, #4]
   d7a90:	4611      	mov	r1, r2
   d7a92:	f7fe ba9f 	b.w	d5fd4 <network_ready>

000d7a96 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7a96:	2200      	movs	r2, #0
   d7a98:	6840      	ldr	r0, [r0, #4]
   d7a9a:	4611      	mov	r1, r2
   d7a9c:	f7fe baba 	b.w	d6014 <network_listening>

000d7aa0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d7aa0:	2200      	movs	r2, #0
   d7aa2:	6840      	ldr	r0, [r0, #4]
   d7aa4:	4611      	mov	r1, r2
   d7aa6:	f7fe bac5 	b.w	d6034 <network_get_listen_timeout>

000d7aaa <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d7aaa:	6840      	ldr	r0, [r0, #4]
   d7aac:	2200      	movs	r2, #0
   d7aae:	f7fe bab9 	b.w	d6024 <network_set_listen_timeout>

000d7ab2 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d7ab2:	6840      	ldr	r0, [r0, #4]
   d7ab4:	2200      	movs	r2, #0
   d7ab6:	f081 0101 	eor.w	r1, r1, #1
   d7aba:	f7fe baa3 	b.w	d6004 <network_listen>

000d7abe <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d7abe:	2300      	movs	r3, #0
   d7ac0:	6840      	ldr	r0, [r0, #4]
   d7ac2:	461a      	mov	r2, r3
   d7ac4:	4619      	mov	r1, r3
   d7ac6:	f7fe ba95 	b.w	d5ff4 <network_off>

000d7aca <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d7aca:	2200      	movs	r2, #0
   d7acc:	6840      	ldr	r0, [r0, #4]
   d7ace:	4611      	mov	r1, r2
   d7ad0:	f7fe ba70 	b.w	d5fb4 <network_connecting>

000d7ad4 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7ad4:	6840      	ldr	r0, [r0, #4]
   d7ad6:	2200      	movs	r2, #0
   d7ad8:	2102      	movs	r1, #2
   d7ada:	f7fe ba73 	b.w	d5fc4 <network_disconnect>

000d7ade <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d7ade:	2300      	movs	r3, #0
   d7ae0:	6840      	ldr	r0, [r0, #4]
   d7ae2:	461a      	mov	r2, r3
   d7ae4:	f7fe ba5e 	b.w	d5fa4 <network_connect>

000d7ae8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d7ae8:	4b02      	ldr	r3, [pc, #8]	; (d7af4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d7aea:	2204      	movs	r2, #4
   d7aec:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d7aee:	4a02      	ldr	r2, [pc, #8]	; (d7af8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d7af0:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d7af2:	4770      	bx	lr
   d7af4:	2003e7bc 	.word	0x2003e7bc
   d7af8:	000d9734 	.word	0x000d9734

000d7afc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7afc:	2300      	movs	r3, #0
   d7afe:	6840      	ldr	r0, [r0, #4]
   d7b00:	461a      	mov	r2, r3
   d7b02:	f7fe ba4f 	b.w	d5fa4 <network_connect>

000d7b06 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d7b06:	6840      	ldr	r0, [r0, #4]
   d7b08:	2200      	movs	r2, #0
   d7b0a:	2102      	movs	r1, #2
   d7b0c:	f7fe ba5a 	b.w	d5fc4 <network_disconnect>

000d7b10 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7b10:	2200      	movs	r2, #0
   d7b12:	6840      	ldr	r0, [r0, #4]
   d7b14:	4611      	mov	r1, r2
   d7b16:	f7fe ba4d 	b.w	d5fb4 <network_connecting>

000d7b1a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d7b1a:	2200      	movs	r2, #0
   d7b1c:	6840      	ldr	r0, [r0, #4]
   d7b1e:	4611      	mov	r1, r2
   d7b20:	f7fe ba58 	b.w	d5fd4 <network_ready>

000d7b24 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d7b24:	2300      	movs	r3, #0
   d7b26:	6840      	ldr	r0, [r0, #4]
   d7b28:	461a      	mov	r2, r3
   d7b2a:	4619      	mov	r1, r3
   d7b2c:	f7fe ba5a 	b.w	d5fe4 <network_on>

000d7b30 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d7b30:	2300      	movs	r3, #0
   d7b32:	6840      	ldr	r0, [r0, #4]
   d7b34:	461a      	mov	r2, r3
   d7b36:	4619      	mov	r1, r3
   d7b38:	f7fe ba5c 	b.w	d5ff4 <network_off>

000d7b3c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d7b3c:	6840      	ldr	r0, [r0, #4]
   d7b3e:	2100      	movs	r1, #0
   d7b40:	f7fe ba80 	b.w	d6044 <network_is_on>

000d7b44 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d7b44:	6840      	ldr	r0, [r0, #4]
   d7b46:	2100      	movs	r1, #0
   d7b48:	f7fe ba84 	b.w	d6054 <network_is_off>

000d7b4c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d7b4c:	6840      	ldr	r0, [r0, #4]
   d7b4e:	2200      	movs	r2, #0
   d7b50:	f081 0101 	eor.w	r1, r1, #1
   d7b54:	f7fe ba56 	b.w	d6004 <network_listen>

000d7b58 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7b58:	6840      	ldr	r0, [r0, #4]
   d7b5a:	2200      	movs	r2, #0
   d7b5c:	f7fe ba62 	b.w	d6024 <network_set_listen_timeout>

000d7b60 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7b60:	2200      	movs	r2, #0
   d7b62:	6840      	ldr	r0, [r0, #4]
   d7b64:	4611      	mov	r1, r2
   d7b66:	f7fe ba65 	b.w	d6034 <network_get_listen_timeout>

000d7b6a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d7b6a:	2200      	movs	r2, #0
   d7b6c:	6840      	ldr	r0, [r0, #4]
   d7b6e:	4611      	mov	r1, r2
   d7b70:	f7fe ba50 	b.w	d6014 <network_listening>

000d7b74 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d7b74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7b78:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d7b7a:	b095      	sub	sp, #84	; 0x54
   d7b7c:	4616      	mov	r6, r2
   d7b7e:	460d      	mov	r5, r1
   d7b80:	4607      	mov	r7, r0
    IPAddress addr;
   d7b82:	f7ff fac3 	bl	d710c <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d7b86:	4621      	mov	r1, r4
   d7b88:	2218      	movs	r2, #24
   d7b8a:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d7b8c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d7b8e:	f001 f8dd 	bl	d8d4c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d7b92:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d7b94:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d7b98:	4621      	mov	r1, r4
   d7b9a:	466b      	mov	r3, sp
   d7b9c:	aa0c      	add	r2, sp, #48	; 0x30
   d7b9e:	4630      	mov	r0, r6
   d7ba0:	f7fd ffc0 	bl	d5b24 <netdb_getaddrinfo>
    if (!r) {
   d7ba4:	4604      	mov	r4, r0
   d7ba6:	2800      	cmp	r0, #0
   d7ba8:	d14c      	bne.n	d7c44 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7baa:	4602      	mov	r2, r0
   d7bac:	2101      	movs	r1, #1
   d7bae:	6868      	ldr	r0, [r5, #4]
   d7bb0:	f7fe fa10 	bl	d5fd4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7bb4:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7bb6:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7bb8:	4622      	mov	r2, r4
   d7bba:	6868      	ldr	r0, [r5, #4]
   d7bbc:	f7fe fa0a 	bl	d5fd4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7bc0:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7bc2:	4681      	mov	r9, r0
        bool ok = false;
   d7bc4:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7bc6:	2e00      	cmp	r6, #0
   d7bc8:	d03c      	beq.n	d7c44 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d7bca:	2900      	cmp	r1, #0
   d7bcc:	d13a      	bne.n	d7c44 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7bce:	6873      	ldr	r3, [r6, #4]
   d7bd0:	2b02      	cmp	r3, #2
   d7bd2:	d003      	beq.n	d7bdc <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d7bd4:	2b0a      	cmp	r3, #10
   d7bd6:	d011      	beq.n	d7bfc <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7bd8:	69f6      	ldr	r6, [r6, #28]
   d7bda:	e7f4      	b.n	d7bc6 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d7bdc:	f1b8 0f00 	cmp.w	r8, #0
   d7be0:	d00a      	beq.n	d7bf8 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7be2:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d7be4:	a806      	add	r0, sp, #24
   d7be6:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d7be8:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d7bea:	f7ff fadf 	bl	d71ac <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d7bee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7bf0:	1d3c      	adds	r4, r7, #4
   d7bf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7bf4:	682b      	ldr	r3, [r5, #0]
   d7bf6:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d7bf8:	4641      	mov	r1, r8
   d7bfa:	e7ed      	b.n	d7bd8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d7bfc:	f1b9 0f00 	cmp.w	r9, #0
   d7c00:	d101      	bne.n	d7c06 <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d7c02:	4649      	mov	r1, r9
   d7c04:	e7e8      	b.n	d7bd8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7c06:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d7c08:	2210      	movs	r2, #16
   d7c0a:	a801      	add	r0, sp, #4
   d7c0c:	f001 f89e 	bl	d8d4c <memset>
                    a.v = 6;
   d7c10:	2306      	movs	r3, #6
   d7c12:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7c16:	ad01      	add	r5, sp, #4
   d7c18:	f104 0308 	add.w	r3, r4, #8
   d7c1c:	3418      	adds	r4, #24
   d7c1e:	6818      	ldr	r0, [r3, #0]
   d7c20:	6859      	ldr	r1, [r3, #4]
   d7c22:	462a      	mov	r2, r5
   d7c24:	c203      	stmia	r2!, {r0, r1}
   d7c26:	3308      	adds	r3, #8
   d7c28:	42a3      	cmp	r3, r4
   d7c2a:	4615      	mov	r5, r2
   d7c2c:	d1f7      	bne.n	d7c1e <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d7c2e:	a901      	add	r1, sp, #4
   d7c30:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d7c32:	ad07      	add	r5, sp, #28
   d7c34:	f7ff fa78 	bl	d7128 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7c38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7c3a:	1d3c      	adds	r4, r7, #4
   d7c3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7c3e:	682b      	ldr	r3, [r5, #0]
   d7c40:	7023      	strb	r3, [r4, #0]
   d7c42:	e7de      	b.n	d7c02 <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d7c44:	9800      	ldr	r0, [sp, #0]
   d7c46:	f7fd ff65 	bl	d5b14 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d7c4a:	4638      	mov	r0, r7
   d7c4c:	b015      	add	sp, #84	; 0x54
   d7c4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d7c54 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d7c54:	4b02      	ldr	r3, [pc, #8]	; (d7c60 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d7c56:	4a03      	ldr	r2, [pc, #12]	; (d7c64 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d7c58:	601a      	str	r2, [r3, #0]
   d7c5a:	2200      	movs	r2, #0
   d7c5c:	605a      	str	r2, [r3, #4]

} // spark
   d7c5e:	4770      	bx	lr
   d7c60:	2003e7c4 	.word	0x2003e7c4
   d7c64:	000d9770 	.word	0x000d9770

000d7c68 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d7c68:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d7c6a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d7c6c:	d902      	bls.n	d7c74 <pinAvailable+0xc>
    return false;
   d7c6e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d7c70:	b002      	add	sp, #8
   d7c72:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d7c74:	f1a0 030b 	sub.w	r3, r0, #11
   d7c78:	2b02      	cmp	r3, #2
   d7c7a:	d81a      	bhi.n	d7cb2 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d7c7c:	4c17      	ldr	r4, [pc, #92]	; (d7cdc <pinAvailable+0x74>)
   d7c7e:	7821      	ldrb	r1, [r4, #0]
   d7c80:	f3bf 8f5b 	dmb	ish
   d7c84:	f011 0101 	ands.w	r1, r1, #1
   d7c88:	d10b      	bne.n	d7ca2 <pinAvailable+0x3a>
   d7c8a:	4620      	mov	r0, r4
   d7c8c:	9101      	str	r1, [sp, #4]
   d7c8e:	f7fc fa0a 	bl	d40a6 <__cxa_guard_acquire>
   d7c92:	9901      	ldr	r1, [sp, #4]
   d7c94:	b128      	cbz	r0, d7ca2 <pinAvailable+0x3a>
   d7c96:	4812      	ldr	r0, [pc, #72]	; (d7ce0 <pinAvailable+0x78>)
   d7c98:	f7fe fa72 	bl	d6180 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d7c9c:	4620      	mov	r0, r4
   d7c9e:	f7fc fa07 	bl	d40b0 <__cxa_guard_release>
   d7ca2:	4b0f      	ldr	r3, [pc, #60]	; (d7ce0 <pinAvailable+0x78>)
   d7ca4:	7818      	ldrb	r0, [r3, #0]
   d7ca6:	f7fe f901 	bl	d5eac <hal_spi_is_enabled>
   d7caa:	2800      	cmp	r0, #0
   d7cac:	d1df      	bne.n	d7c6e <pinAvailable+0x6>
  return true; // 'pin' is available
   d7cae:	2001      	movs	r0, #1
   d7cb0:	e7de      	b.n	d7c70 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d7cb2:	2801      	cmp	r0, #1
   d7cb4:	d809      	bhi.n	d7cca <pinAvailable+0x62>
   d7cb6:	f000 f8a7 	bl	d7e08 <_Z19__fetch_global_Wirev>
   d7cba:	2100      	movs	r1, #0
   d7cbc:	7c00      	ldrb	r0, [r0, #16]
   d7cbe:	f7fe f8a5 	bl	d5e0c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d7cc2:	f080 0001 	eor.w	r0, r0, #1
   d7cc6:	b2c0      	uxtb	r0, r0
   d7cc8:	e7d2      	b.n	d7c70 <pinAvailable+0x8>
   d7cca:	3809      	subs	r0, #9
   d7ccc:	2801      	cmp	r0, #1
   d7cce:	d8ee      	bhi.n	d7cae <pinAvailable+0x46>
   d7cd0:	f7ff fb56 	bl	d7380 <_Z22__fetch_global_Serial1v>
   d7cd4:	7c00      	ldrb	r0, [r0, #16]
   d7cd6:	f7fe f849 	bl	d5d6c <hal_usart_is_enabled>
   d7cda:	e7f2      	b.n	d7cc2 <pinAvailable+0x5a>
   d7cdc:	2003e7cc 	.word	0x2003e7cc
   d7ce0:	2003e7d0 	.word	0x2003e7d0

000d7ce4 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7ce4:	2823      	cmp	r0, #35	; 0x23
{
   d7ce6:	b538      	push	{r3, r4, r5, lr}
   d7ce8:	4604      	mov	r4, r0
   d7cea:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7cec:	d80a      	bhi.n	d7d04 <pinMode+0x20>
   d7cee:	29ff      	cmp	r1, #255	; 0xff
   d7cf0:	d008      	beq.n	d7d04 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d7cf2:	f7ff ffb9 	bl	d7c68 <pinAvailable>
   d7cf6:	b128      	cbz	r0, d7d04 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d7cf8:	4629      	mov	r1, r5
   d7cfa:	4620      	mov	r0, r4
}
   d7cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d7d00:	f7fd bf20 	b.w	d5b44 <HAL_Pin_Mode>
}
   d7d04:	bd38      	pop	{r3, r4, r5, pc}

000d7d06 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d7d06:	b538      	push	{r3, r4, r5, lr}
   d7d08:	4604      	mov	r4, r0
   d7d0a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7d0c:	f7fd ff22 	bl	d5b54 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d7d10:	28ff      	cmp	r0, #255	; 0xff
   d7d12:	d010      	beq.n	d7d36 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d7d14:	2806      	cmp	r0, #6
   d7d16:	d804      	bhi.n	d7d22 <digitalWrite+0x1c>
   d7d18:	234d      	movs	r3, #77	; 0x4d
   d7d1a:	fa23 f000 	lsr.w	r0, r3, r0
   d7d1e:	07c3      	lsls	r3, r0, #31
   d7d20:	d409      	bmi.n	d7d36 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d7d22:	4620      	mov	r0, r4
   d7d24:	f7ff ffa0 	bl	d7c68 <pinAvailable>
   d7d28:	b128      	cbz	r0, d7d36 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7d2a:	4629      	mov	r1, r5
   d7d2c:	4620      	mov	r0, r4
}
   d7d2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d7d32:	f7fd bf17 	b.w	d5b64 <HAL_GPIO_Write>
}
   d7d36:	bd38      	pop	{r3, r4, r5, pc}

000d7d38 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d7d38:	b510      	push	{r4, lr}
   d7d3a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7d3c:	f7fd ff0a 	bl	d5b54 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d7d40:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d7d42:	b2db      	uxtb	r3, r3
   d7d44:	2b01      	cmp	r3, #1
   d7d46:	d908      	bls.n	d7d5a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d7d48:	4620      	mov	r0, r4
   d7d4a:	f7ff ff8d 	bl	d7c68 <pinAvailable>
   d7d4e:	b120      	cbz	r0, d7d5a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d7d50:	4620      	mov	r0, r4
}
   d7d52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d7d56:	f7fd bf0d 	b.w	d5b74 <HAL_GPIO_Read>
}
   d7d5a:	2000      	movs	r0, #0
   d7d5c:	bd10      	pop	{r4, pc}

000d7d5e <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d7d5e:	280d      	cmp	r0, #13
{
   d7d60:	b510      	push	{r4, lr}
   d7d62:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d7d64:	bf9c      	itt	ls
   d7d66:	340e      	addls	r4, #14
   d7d68:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d7d6a:	4620      	mov	r0, r4
   d7d6c:	f7ff ff7c 	bl	d7c68 <pinAvailable>
   d7d70:	b150      	cbz	r0, d7d88 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d7d72:	2103      	movs	r1, #3
   d7d74:	4620      	mov	r0, r4
   d7d76:	f7fd fedd 	bl	d5b34 <HAL_Validate_Pin_Function>
   d7d7a:	2803      	cmp	r0, #3
   d7d7c:	d104      	bne.n	d7d88 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d7d7e:	4620      	mov	r0, r4
}
   d7d80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d7d84:	f7fd bf06 	b.w	d5b94 <hal_adc_read>
}
   d7d88:	2000      	movs	r0, #0
   d7d8a:	bd10      	pop	{r4, pc}

000d7d8c <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
   d7d8c:	b538      	push	{r3, r4, r5, lr}
   d7d8e:	4604      	mov	r4, r0
   d7d90:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   d7d92:	f7ff ff69 	bl	d7c68 <pinAvailable>
   d7d96:	b1f0      	cbz	r0, d7dd6 <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
   d7d98:	2104      	movs	r1, #4
   d7d9a:	4620      	mov	r0, r4
   d7d9c:	f7fd feca 	bl	d5b34 <HAL_Validate_Pin_Function>
   d7da0:	2804      	cmp	r0, #4
   d7da2:	d105      	bne.n	d7db0 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   d7da4:	b2a9      	uxth	r1, r5
   d7da6:	4620      	mov	r0, r4
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
   d7da8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
   d7dac:	f7fd beea 	b.w	d5b84 <HAL_DAC_Write>
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   d7db0:	2102      	movs	r1, #2
   d7db2:	4620      	mov	r0, r4
   d7db4:	f7fd febe 	bl	d5b34 <HAL_Validate_Pin_Function>
   d7db8:	2802      	cmp	r0, #2
   d7dba:	d10c      	bne.n	d7dd6 <_Z11analogWritetm+0x4a>
        PinMode mode = HAL_Get_Pin_Mode(pin);
   d7dbc:	4620      	mov	r0, r4
   d7dbe:	f7fd fec9 	bl	d5b54 <HAL_Get_Pin_Mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   d7dc2:	2801      	cmp	r0, #1
   d7dc4:	d001      	beq.n	d7dca <_Z11analogWritetm+0x3e>
   d7dc6:	2804      	cmp	r0, #4
   d7dc8:	d105      	bne.n	d7dd6 <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
   d7dca:	4629      	mov	r1, r5
   d7dcc:	4620      	mov	r0, r4
}
   d7dce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
   d7dd2:	f7fd bee7 	b.w	d5ba4 <hal_pwm_write_ext>
}
   d7dd6:	bd38      	pop	{r3, r4, r5, pc}

000d7dd8 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d7dd8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d7dda:	2300      	movs	r3, #0
   d7ddc:	2520      	movs	r5, #32
   d7dde:	8043      	strh	r3, [r0, #2]
   d7de0:	2314      	movs	r3, #20
{
   d7de2:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d7de4:	8003      	strh	r3, [r0, #0]
   d7de6:	6085      	str	r5, [r0, #8]
   d7de8:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7dea:	4906      	ldr	r1, [pc, #24]	; (d7e04 <_Z17acquireWireBufferv+0x2c>)
   d7dec:	4628      	mov	r0, r5
   d7dee:	f000 f83a 	bl	d7e66 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7df2:	4904      	ldr	r1, [pc, #16]	; (d7e04 <_Z17acquireWireBufferv+0x2c>)
	};
   d7df4:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7df6:	4628      	mov	r0, r5
   d7df8:	f000 f835 	bl	d7e66 <_ZnajRKSt9nothrow_t>
	};
   d7dfc:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d7dfe:	4620      	mov	r0, r4
   d7e00:	bd38      	pop	{r3, r4, r5, pc}
   d7e02:	bf00      	nop
   d7e04:	000d97a4 	.word	0x000d97a4

000d7e08 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d7e08:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7e0a:	4d0f      	ldr	r5, [pc, #60]	; (d7e48 <_Z19__fetch_global_Wirev+0x40>)
   d7e0c:	7829      	ldrb	r1, [r5, #0]
   d7e0e:	f3bf 8f5b 	dmb	ish
   d7e12:	f011 0401 	ands.w	r4, r1, #1
{
   d7e16:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7e18:	d113      	bne.n	d7e42 <_Z19__fetch_global_Wirev+0x3a>
   d7e1a:	4628      	mov	r0, r5
   d7e1c:	f7fc f943 	bl	d40a6 <__cxa_guard_acquire>
   d7e20:	b178      	cbz	r0, d7e42 <_Z19__fetch_global_Wirev+0x3a>
   d7e22:	a801      	add	r0, sp, #4
   d7e24:	f7ff ffd8 	bl	d7dd8 <_Z17acquireWireBufferv>
   d7e28:	aa01      	add	r2, sp, #4
   d7e2a:	4621      	mov	r1, r4
   d7e2c:	4807      	ldr	r0, [pc, #28]	; (d7e4c <_Z19__fetch_global_Wirev+0x44>)
   d7e2e:	f7ff fafd 	bl	d742c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d7e32:	4628      	mov	r0, r5
   d7e34:	f7fc f93c 	bl	d40b0 <__cxa_guard_release>
   d7e38:	4a05      	ldr	r2, [pc, #20]	; (d7e50 <_Z19__fetch_global_Wirev+0x48>)
   d7e3a:	4906      	ldr	r1, [pc, #24]	; (d7e54 <_Z19__fetch_global_Wirev+0x4c>)
   d7e3c:	4803      	ldr	r0, [pc, #12]	; (d7e4c <_Z19__fetch_global_Wirev+0x44>)
   d7e3e:	f000 f80b 	bl	d7e58 <__aeabi_atexit>
	return wire;
}
   d7e42:	4802      	ldr	r0, [pc, #8]	; (d7e4c <_Z19__fetch_global_Wirev+0x44>)
   d7e44:	b007      	add	sp, #28
   d7e46:	bd30      	pop	{r4, r5, pc}
   d7e48:	2003e7dc 	.word	0x2003e7dc
   d7e4c:	2003e7e0 	.word	0x2003e7e0
   d7e50:	2003e518 	.word	0x2003e518
   d7e54:	000d73d5 	.word	0x000d73d5

000d7e58 <__aeabi_atexit>:
   d7e58:	460b      	mov	r3, r1
   d7e5a:	4601      	mov	r1, r0
   d7e5c:	4618      	mov	r0, r3
   d7e5e:	f000 bf31 	b.w	d8cc4 <__cxa_atexit>

000d7e62 <_ZdlPvj>:
   d7e62:	f7fc b91c 	b.w	d409e <_ZdlPv>

000d7e66 <_ZnajRKSt9nothrow_t>:
   d7e66:	f7fc b918 	b.w	d409a <_Znaj>

000d7e6a <_ZSt25__throw_bad_function_callv>:
   d7e6a:	b508      	push	{r3, lr}
   d7e6c:	f7fe f932 	bl	d60d4 <abort>

000d7e70 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   d7e70:	4901      	ldr	r1, [pc, #4]	; (d7e78 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   d7e72:	f000 b8f9 	b.w	d8068 <_ZNKSt9type_infoeqERKS_>
   d7e76:	bf00      	nop
   d7e78:	000d97c0 	.word	0x000d97c0

000d7e7c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   d7e7c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d7e7e:	2400      	movs	r4, #0
   d7e80:	2310      	movs	r3, #16
   d7e82:	e9cd 3402 	strd	r3, r4, [sp, #8]
   d7e86:	6803      	ldr	r3, [r0, #0]
   d7e88:	9400      	str	r4, [sp, #0]
   d7e8a:	699e      	ldr	r6, [r3, #24]
   d7e8c:	f88d 4004 	strb.w	r4, [sp, #4]
   d7e90:	4615      	mov	r5, r2
   d7e92:	466b      	mov	r3, sp
   d7e94:	6812      	ldr	r2, [r2, #0]
   d7e96:	47b0      	blx	r6
   d7e98:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d7e9c:	f003 0306 	and.w	r3, r3, #6
   d7ea0:	2b06      	cmp	r3, #6
   d7ea2:	bf03      	ittte	eq
   d7ea4:	9b00      	ldreq	r3, [sp, #0]
   d7ea6:	602b      	streq	r3, [r5, #0]
   d7ea8:	2001      	moveq	r0, #1
   d7eaa:	4620      	movne	r0, r4
   d7eac:	b004      	add	sp, #16
   d7eae:	bd70      	pop	{r4, r5, r6, pc}

000d7eb0 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   d7eb0:	9800      	ldr	r0, [sp, #0]
   d7eb2:	4290      	cmp	r0, r2
   d7eb4:	bf14      	ite	ne
   d7eb6:	2001      	movne	r0, #1
   d7eb8:	2006      	moveq	r0, #6
   d7eba:	4770      	bx	lr

000d7ebc <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   d7ebc:	b510      	push	{r4, lr}
   d7ebe:	4b03      	ldr	r3, [pc, #12]	; (d7ecc <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   d7ec0:	6003      	str	r3, [r0, #0]
   d7ec2:	4604      	mov	r4, r0
   d7ec4:	f000 f8cd 	bl	d8062 <_ZNSt9type_infoD1Ev>
   d7ec8:	4620      	mov	r0, r4
   d7eca:	bd10      	pop	{r4, pc}
   d7ecc:	000d9800 	.word	0x000d9800

000d7ed0 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   d7ed0:	b510      	push	{r4, lr}
   d7ed2:	4604      	mov	r4, r0
   d7ed4:	f7ff fff2 	bl	d7ebc <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d7ed8:	4620      	mov	r0, r4
   d7eda:	2108      	movs	r1, #8
   d7edc:	f7ff ffc1 	bl	d7e62 <_ZdlPvj>
   d7ee0:	4620      	mov	r0, r4
   d7ee2:	bd10      	pop	{r4, pc}

000d7ee4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   d7ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7ee8:	461f      	mov	r7, r3
   d7eea:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   d7eee:	f8dd 8018 	ldr.w	r8, [sp, #24]
   d7ef2:	4598      	cmp	r8, r3
   d7ef4:	4606      	mov	r6, r0
   d7ef6:	4615      	mov	r5, r2
   d7ef8:	d107      	bne.n	d7f0a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d7efa:	9907      	ldr	r1, [sp, #28]
   d7efc:	f000 f8b4 	bl	d8068 <_ZNKSt9type_infoeqERKS_>
   d7f00:	b118      	cbz	r0, d7f0a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d7f02:	7165      	strb	r5, [r4, #5]
   d7f04:	2000      	movs	r0, #0
   d7f06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7f0a:	4639      	mov	r1, r7
   d7f0c:	4630      	mov	r0, r6
   d7f0e:	f000 f8ab 	bl	d8068 <_ZNKSt9type_infoeqERKS_>
   d7f12:	2800      	cmp	r0, #0
   d7f14:	d0f6      	beq.n	d7f04 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   d7f16:	2301      	movs	r3, #1
   d7f18:	f8c4 8000 	str.w	r8, [r4]
   d7f1c:	7125      	strb	r5, [r4, #4]
   d7f1e:	71a3      	strb	r3, [r4, #6]
   d7f20:	e7f0      	b.n	d7f04 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000d7f22 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   d7f22:	b538      	push	{r3, r4, r5, lr}
   d7f24:	4615      	mov	r5, r2
   d7f26:	461c      	mov	r4, r3
   d7f28:	f000 f89e 	bl	d8068 <_ZNKSt9type_infoeqERKS_>
   d7f2c:	b120      	cbz	r0, d7f38 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   d7f2e:	2308      	movs	r3, #8
   d7f30:	60e3      	str	r3, [r4, #12]
   d7f32:	2306      	movs	r3, #6
   d7f34:	6025      	str	r5, [r4, #0]
   d7f36:	7123      	strb	r3, [r4, #4]
   d7f38:	bd38      	pop	{r3, r4, r5, pc}

000d7f3a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   d7f3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7f3c:	4605      	mov	r5, r0
   d7f3e:	460c      	mov	r4, r1
   d7f40:	9201      	str	r2, [sp, #4]
   d7f42:	461e      	mov	r6, r3
   d7f44:	f000 f890 	bl	d8068 <_ZNKSt9type_infoeqERKS_>
   d7f48:	b950      	cbnz	r0, d7f60 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d7f4a:	2e03      	cmp	r6, #3
   d7f4c:	d808      	bhi.n	d7f60 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d7f4e:	6823      	ldr	r3, [r4, #0]
   d7f50:	9a01      	ldr	r2, [sp, #4]
   d7f52:	695b      	ldr	r3, [r3, #20]
   d7f54:	4629      	mov	r1, r5
   d7f56:	4620      	mov	r0, r4
   d7f58:	b002      	add	sp, #8
   d7f5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d7f5e:	4718      	bx	r3
   d7f60:	b002      	add	sp, #8
   d7f62:	bd70      	pop	{r4, r5, r6, pc}

000d7f64 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   d7f64:	b510      	push	{r4, lr}
   d7f66:	4b03      	ldr	r3, [pc, #12]	; (d7f74 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   d7f68:	6003      	str	r3, [r0, #0]
   d7f6a:	4604      	mov	r4, r0
   d7f6c:	f7ff ffa6 	bl	d7ebc <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d7f70:	4620      	mov	r0, r4
   d7f72:	bd10      	pop	{r4, pc}
   d7f74:	000d9860 	.word	0x000d9860

000d7f78 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   d7f78:	b510      	push	{r4, lr}
   d7f7a:	4604      	mov	r4, r0
   d7f7c:	f7ff fff2 	bl	d7f64 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   d7f80:	4620      	mov	r0, r4
   d7f82:	210c      	movs	r1, #12
   d7f84:	f7ff ff6d 	bl	d7e62 <_ZdlPvj>
   d7f88:	4620      	mov	r0, r4
   d7f8a:	bd10      	pop	{r4, pc}

000d7f8c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   d7f8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d7f8e:	9f08      	ldr	r7, [sp, #32]
   d7f90:	4297      	cmp	r7, r2
   d7f92:	4605      	mov	r5, r0
   d7f94:	460e      	mov	r6, r1
   d7f96:	4614      	mov	r4, r2
   d7f98:	d00a      	beq.n	d7fb0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   d7f9a:	68a8      	ldr	r0, [r5, #8]
   d7f9c:	6802      	ldr	r2, [r0, #0]
   d7f9e:	9708      	str	r7, [sp, #32]
   d7fa0:	6a15      	ldr	r5, [r2, #32]
   d7fa2:	4631      	mov	r1, r6
   d7fa4:	4622      	mov	r2, r4
   d7fa6:	46ac      	mov	ip, r5
   d7fa8:	b003      	add	sp, #12
   d7faa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d7fae:	4760      	bx	ip
   d7fb0:	4619      	mov	r1, r3
   d7fb2:	9301      	str	r3, [sp, #4]
   d7fb4:	f000 f858 	bl	d8068 <_ZNKSt9type_infoeqERKS_>
   d7fb8:	9b01      	ldr	r3, [sp, #4]
   d7fba:	2800      	cmp	r0, #0
   d7fbc:	d0ed      	beq.n	d7f9a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   d7fbe:	2006      	movs	r0, #6
   d7fc0:	b003      	add	sp, #12
   d7fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7fc4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   d7fc4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7fc8:	460d      	mov	r5, r1
   d7fca:	4619      	mov	r1, r3
   d7fcc:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   d7fd0:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   d7fd4:	4681      	mov	r9, r0
   d7fd6:	4617      	mov	r7, r2
   d7fd8:	4698      	mov	r8, r3
   d7fda:	f000 f845 	bl	d8068 <_ZNKSt9type_infoeqERKS_>
   d7fde:	b190      	cbz	r0, d8006 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   d7fe0:	2d00      	cmp	r5, #0
   d7fe2:	6034      	str	r4, [r6, #0]
   d7fe4:	7137      	strb	r7, [r6, #4]
   d7fe6:	db09      	blt.n	d7ffc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   d7fe8:	1961      	adds	r1, r4, r5
   d7fea:	458a      	cmp	sl, r1
   d7fec:	bf0c      	ite	eq
   d7fee:	2106      	moveq	r1, #6
   d7ff0:	2101      	movne	r1, #1
   d7ff2:	71b1      	strb	r1, [r6, #6]
   d7ff4:	2000      	movs	r0, #0
   d7ff6:	b001      	add	sp, #4
   d7ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7ffc:	3502      	adds	r5, #2
   d7ffe:	d1f9      	bne.n	d7ff4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d8000:	2301      	movs	r3, #1
   d8002:	71b3      	strb	r3, [r6, #6]
   d8004:	e7f6      	b.n	d7ff4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d8006:	4554      	cmp	r4, sl
   d8008:	d106      	bne.n	d8018 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d800a:	4659      	mov	r1, fp
   d800c:	4648      	mov	r0, r9
   d800e:	f000 f82b 	bl	d8068 <_ZNKSt9type_infoeqERKS_>
   d8012:	b108      	cbz	r0, d8018 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d8014:	7177      	strb	r7, [r6, #5]
   d8016:	e7ed      	b.n	d7ff4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d8018:	f8d9 0008 	ldr.w	r0, [r9, #8]
   d801c:	6803      	ldr	r3, [r0, #0]
   d801e:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   d8022:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   d8026:	69dc      	ldr	r4, [r3, #28]
   d8028:	463a      	mov	r2, r7
   d802a:	4643      	mov	r3, r8
   d802c:	4629      	mov	r1, r5
   d802e:	46a4      	mov	ip, r4
   d8030:	b001      	add	sp, #4
   d8032:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8036:	4760      	bx	ip

000d8038 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   d8038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d803c:	4607      	mov	r7, r0
   d803e:	460c      	mov	r4, r1
   d8040:	4615      	mov	r5, r2
   d8042:	461e      	mov	r6, r3
   d8044:	f7ff ff6d 	bl	d7f22 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   d8048:	b948      	cbnz	r0, d805e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   d804a:	68b8      	ldr	r0, [r7, #8]
   d804c:	6803      	ldr	r3, [r0, #0]
   d804e:	699f      	ldr	r7, [r3, #24]
   d8050:	462a      	mov	r2, r5
   d8052:	4633      	mov	r3, r6
   d8054:	4621      	mov	r1, r4
   d8056:	46bc      	mov	ip, r7
   d8058:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d805c:	4760      	bx	ip
   d805e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d8062 <_ZNSt9type_infoD1Ev>:
   d8062:	4770      	bx	lr

000d8064 <_ZNKSt9type_info14__is_pointer_pEv>:
   d8064:	2000      	movs	r0, #0
   d8066:	4770      	bx	lr

000d8068 <_ZNKSt9type_infoeqERKS_>:
   d8068:	4281      	cmp	r1, r0
   d806a:	b508      	push	{r3, lr}
   d806c:	d00e      	beq.n	d808c <_ZNKSt9type_infoeqERKS_+0x24>
   d806e:	6840      	ldr	r0, [r0, #4]
   d8070:	7803      	ldrb	r3, [r0, #0]
   d8072:	2b2a      	cmp	r3, #42	; 0x2a
   d8074:	d00c      	beq.n	d8090 <_ZNKSt9type_infoeqERKS_+0x28>
   d8076:	6849      	ldr	r1, [r1, #4]
   d8078:	780b      	ldrb	r3, [r1, #0]
   d807a:	2b2a      	cmp	r3, #42	; 0x2a
   d807c:	bf08      	it	eq
   d807e:	3101      	addeq	r1, #1
   d8080:	f000 fe90 	bl	d8da4 <strcmp>
   d8084:	fab0 f080 	clz	r0, r0
   d8088:	0940      	lsrs	r0, r0, #5
   d808a:	bd08      	pop	{r3, pc}
   d808c:	2001      	movs	r0, #1
   d808e:	e7fc      	b.n	d808a <_ZNKSt9type_infoeqERKS_+0x22>
   d8090:	2000      	movs	r0, #0
   d8092:	e7fa      	b.n	d808a <_ZNKSt9type_infoeqERKS_+0x22>

000d8094 <__aeabi_drsub>:
   d8094:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d8098:	e002      	b.n	d80a0 <__adddf3>
   d809a:	bf00      	nop

000d809c <__aeabi_dsub>:
   d809c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d80a0 <__adddf3>:
   d80a0:	b530      	push	{r4, r5, lr}
   d80a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d80a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d80aa:	ea94 0f05 	teq	r4, r5
   d80ae:	bf08      	it	eq
   d80b0:	ea90 0f02 	teqeq	r0, r2
   d80b4:	bf1f      	itttt	ne
   d80b6:	ea54 0c00 	orrsne.w	ip, r4, r0
   d80ba:	ea55 0c02 	orrsne.w	ip, r5, r2
   d80be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d80c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d80c6:	f000 80e2 	beq.w	d828e <__adddf3+0x1ee>
   d80ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d80ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d80d2:	bfb8      	it	lt
   d80d4:	426d      	neglt	r5, r5
   d80d6:	dd0c      	ble.n	d80f2 <__adddf3+0x52>
   d80d8:	442c      	add	r4, r5
   d80da:	ea80 0202 	eor.w	r2, r0, r2
   d80de:	ea81 0303 	eor.w	r3, r1, r3
   d80e2:	ea82 0000 	eor.w	r0, r2, r0
   d80e6:	ea83 0101 	eor.w	r1, r3, r1
   d80ea:	ea80 0202 	eor.w	r2, r0, r2
   d80ee:	ea81 0303 	eor.w	r3, r1, r3
   d80f2:	2d36      	cmp	r5, #54	; 0x36
   d80f4:	bf88      	it	hi
   d80f6:	bd30      	pophi	{r4, r5, pc}
   d80f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d80fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8100:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d8104:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d8108:	d002      	beq.n	d8110 <__adddf3+0x70>
   d810a:	4240      	negs	r0, r0
   d810c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8110:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d8114:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8118:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d811c:	d002      	beq.n	d8124 <__adddf3+0x84>
   d811e:	4252      	negs	r2, r2
   d8120:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d8124:	ea94 0f05 	teq	r4, r5
   d8128:	f000 80a7 	beq.w	d827a <__adddf3+0x1da>
   d812c:	f1a4 0401 	sub.w	r4, r4, #1
   d8130:	f1d5 0e20 	rsbs	lr, r5, #32
   d8134:	db0d      	blt.n	d8152 <__adddf3+0xb2>
   d8136:	fa02 fc0e 	lsl.w	ip, r2, lr
   d813a:	fa22 f205 	lsr.w	r2, r2, r5
   d813e:	1880      	adds	r0, r0, r2
   d8140:	f141 0100 	adc.w	r1, r1, #0
   d8144:	fa03 f20e 	lsl.w	r2, r3, lr
   d8148:	1880      	adds	r0, r0, r2
   d814a:	fa43 f305 	asr.w	r3, r3, r5
   d814e:	4159      	adcs	r1, r3
   d8150:	e00e      	b.n	d8170 <__adddf3+0xd0>
   d8152:	f1a5 0520 	sub.w	r5, r5, #32
   d8156:	f10e 0e20 	add.w	lr, lr, #32
   d815a:	2a01      	cmp	r2, #1
   d815c:	fa03 fc0e 	lsl.w	ip, r3, lr
   d8160:	bf28      	it	cs
   d8162:	f04c 0c02 	orrcs.w	ip, ip, #2
   d8166:	fa43 f305 	asr.w	r3, r3, r5
   d816a:	18c0      	adds	r0, r0, r3
   d816c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d8170:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8174:	d507      	bpl.n	d8186 <__adddf3+0xe6>
   d8176:	f04f 0e00 	mov.w	lr, #0
   d817a:	f1dc 0c00 	rsbs	ip, ip, #0
   d817e:	eb7e 0000 	sbcs.w	r0, lr, r0
   d8182:	eb6e 0101 	sbc.w	r1, lr, r1
   d8186:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d818a:	d31b      	bcc.n	d81c4 <__adddf3+0x124>
   d818c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d8190:	d30c      	bcc.n	d81ac <__adddf3+0x10c>
   d8192:	0849      	lsrs	r1, r1, #1
   d8194:	ea5f 0030 	movs.w	r0, r0, rrx
   d8198:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d819c:	f104 0401 	add.w	r4, r4, #1
   d81a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d81a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d81a8:	f080 809a 	bcs.w	d82e0 <__adddf3+0x240>
   d81ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d81b0:	bf08      	it	eq
   d81b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d81b6:	f150 0000 	adcs.w	r0, r0, #0
   d81ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d81be:	ea41 0105 	orr.w	r1, r1, r5
   d81c2:	bd30      	pop	{r4, r5, pc}
   d81c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d81c8:	4140      	adcs	r0, r0
   d81ca:	eb41 0101 	adc.w	r1, r1, r1
   d81ce:	3c01      	subs	r4, #1
   d81d0:	bf28      	it	cs
   d81d2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d81d6:	d2e9      	bcs.n	d81ac <__adddf3+0x10c>
   d81d8:	f091 0f00 	teq	r1, #0
   d81dc:	bf04      	itt	eq
   d81de:	4601      	moveq	r1, r0
   d81e0:	2000      	moveq	r0, #0
   d81e2:	fab1 f381 	clz	r3, r1
   d81e6:	bf08      	it	eq
   d81e8:	3320      	addeq	r3, #32
   d81ea:	f1a3 030b 	sub.w	r3, r3, #11
   d81ee:	f1b3 0220 	subs.w	r2, r3, #32
   d81f2:	da0c      	bge.n	d820e <__adddf3+0x16e>
   d81f4:	320c      	adds	r2, #12
   d81f6:	dd08      	ble.n	d820a <__adddf3+0x16a>
   d81f8:	f102 0c14 	add.w	ip, r2, #20
   d81fc:	f1c2 020c 	rsb	r2, r2, #12
   d8200:	fa01 f00c 	lsl.w	r0, r1, ip
   d8204:	fa21 f102 	lsr.w	r1, r1, r2
   d8208:	e00c      	b.n	d8224 <__adddf3+0x184>
   d820a:	f102 0214 	add.w	r2, r2, #20
   d820e:	bfd8      	it	le
   d8210:	f1c2 0c20 	rsble	ip, r2, #32
   d8214:	fa01 f102 	lsl.w	r1, r1, r2
   d8218:	fa20 fc0c 	lsr.w	ip, r0, ip
   d821c:	bfdc      	itt	le
   d821e:	ea41 010c 	orrle.w	r1, r1, ip
   d8222:	4090      	lslle	r0, r2
   d8224:	1ae4      	subs	r4, r4, r3
   d8226:	bfa2      	ittt	ge
   d8228:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d822c:	4329      	orrge	r1, r5
   d822e:	bd30      	popge	{r4, r5, pc}
   d8230:	ea6f 0404 	mvn.w	r4, r4
   d8234:	3c1f      	subs	r4, #31
   d8236:	da1c      	bge.n	d8272 <__adddf3+0x1d2>
   d8238:	340c      	adds	r4, #12
   d823a:	dc0e      	bgt.n	d825a <__adddf3+0x1ba>
   d823c:	f104 0414 	add.w	r4, r4, #20
   d8240:	f1c4 0220 	rsb	r2, r4, #32
   d8244:	fa20 f004 	lsr.w	r0, r0, r4
   d8248:	fa01 f302 	lsl.w	r3, r1, r2
   d824c:	ea40 0003 	orr.w	r0, r0, r3
   d8250:	fa21 f304 	lsr.w	r3, r1, r4
   d8254:	ea45 0103 	orr.w	r1, r5, r3
   d8258:	bd30      	pop	{r4, r5, pc}
   d825a:	f1c4 040c 	rsb	r4, r4, #12
   d825e:	f1c4 0220 	rsb	r2, r4, #32
   d8262:	fa20 f002 	lsr.w	r0, r0, r2
   d8266:	fa01 f304 	lsl.w	r3, r1, r4
   d826a:	ea40 0003 	orr.w	r0, r0, r3
   d826e:	4629      	mov	r1, r5
   d8270:	bd30      	pop	{r4, r5, pc}
   d8272:	fa21 f004 	lsr.w	r0, r1, r4
   d8276:	4629      	mov	r1, r5
   d8278:	bd30      	pop	{r4, r5, pc}
   d827a:	f094 0f00 	teq	r4, #0
   d827e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d8282:	bf06      	itte	eq
   d8284:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d8288:	3401      	addeq	r4, #1
   d828a:	3d01      	subne	r5, #1
   d828c:	e74e      	b.n	d812c <__adddf3+0x8c>
   d828e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8292:	bf18      	it	ne
   d8294:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8298:	d029      	beq.n	d82ee <__adddf3+0x24e>
   d829a:	ea94 0f05 	teq	r4, r5
   d829e:	bf08      	it	eq
   d82a0:	ea90 0f02 	teqeq	r0, r2
   d82a4:	d005      	beq.n	d82b2 <__adddf3+0x212>
   d82a6:	ea54 0c00 	orrs.w	ip, r4, r0
   d82aa:	bf04      	itt	eq
   d82ac:	4619      	moveq	r1, r3
   d82ae:	4610      	moveq	r0, r2
   d82b0:	bd30      	pop	{r4, r5, pc}
   d82b2:	ea91 0f03 	teq	r1, r3
   d82b6:	bf1e      	ittt	ne
   d82b8:	2100      	movne	r1, #0
   d82ba:	2000      	movne	r0, #0
   d82bc:	bd30      	popne	{r4, r5, pc}
   d82be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d82c2:	d105      	bne.n	d82d0 <__adddf3+0x230>
   d82c4:	0040      	lsls	r0, r0, #1
   d82c6:	4149      	adcs	r1, r1
   d82c8:	bf28      	it	cs
   d82ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d82ce:	bd30      	pop	{r4, r5, pc}
   d82d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d82d4:	bf3c      	itt	cc
   d82d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d82da:	bd30      	popcc	{r4, r5, pc}
   d82dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d82e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d82e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d82e8:	f04f 0000 	mov.w	r0, #0
   d82ec:	bd30      	pop	{r4, r5, pc}
   d82ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d82f2:	bf1a      	itte	ne
   d82f4:	4619      	movne	r1, r3
   d82f6:	4610      	movne	r0, r2
   d82f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d82fc:	bf1c      	itt	ne
   d82fe:	460b      	movne	r3, r1
   d8300:	4602      	movne	r2, r0
   d8302:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8306:	bf06      	itte	eq
   d8308:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d830c:	ea91 0f03 	teqeq	r1, r3
   d8310:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d8314:	bd30      	pop	{r4, r5, pc}
   d8316:	bf00      	nop

000d8318 <__aeabi_ui2d>:
   d8318:	f090 0f00 	teq	r0, #0
   d831c:	bf04      	itt	eq
   d831e:	2100      	moveq	r1, #0
   d8320:	4770      	bxeq	lr
   d8322:	b530      	push	{r4, r5, lr}
   d8324:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8328:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d832c:	f04f 0500 	mov.w	r5, #0
   d8330:	f04f 0100 	mov.w	r1, #0
   d8334:	e750      	b.n	d81d8 <__adddf3+0x138>
   d8336:	bf00      	nop

000d8338 <__aeabi_i2d>:
   d8338:	f090 0f00 	teq	r0, #0
   d833c:	bf04      	itt	eq
   d833e:	2100      	moveq	r1, #0
   d8340:	4770      	bxeq	lr
   d8342:	b530      	push	{r4, r5, lr}
   d8344:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8348:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d834c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d8350:	bf48      	it	mi
   d8352:	4240      	negmi	r0, r0
   d8354:	f04f 0100 	mov.w	r1, #0
   d8358:	e73e      	b.n	d81d8 <__adddf3+0x138>
   d835a:	bf00      	nop

000d835c <__aeabi_f2d>:
   d835c:	0042      	lsls	r2, r0, #1
   d835e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d8362:	ea4f 0131 	mov.w	r1, r1, rrx
   d8366:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d836a:	bf1f      	itttt	ne
   d836c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d8370:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8374:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d8378:	4770      	bxne	lr
   d837a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d837e:	bf08      	it	eq
   d8380:	4770      	bxeq	lr
   d8382:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d8386:	bf04      	itt	eq
   d8388:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d838c:	4770      	bxeq	lr
   d838e:	b530      	push	{r4, r5, lr}
   d8390:	f44f 7460 	mov.w	r4, #896	; 0x380
   d8394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d839c:	e71c      	b.n	d81d8 <__adddf3+0x138>
   d839e:	bf00      	nop

000d83a0 <__aeabi_ul2d>:
   d83a0:	ea50 0201 	orrs.w	r2, r0, r1
   d83a4:	bf08      	it	eq
   d83a6:	4770      	bxeq	lr
   d83a8:	b530      	push	{r4, r5, lr}
   d83aa:	f04f 0500 	mov.w	r5, #0
   d83ae:	e00a      	b.n	d83c6 <__aeabi_l2d+0x16>

000d83b0 <__aeabi_l2d>:
   d83b0:	ea50 0201 	orrs.w	r2, r0, r1
   d83b4:	bf08      	it	eq
   d83b6:	4770      	bxeq	lr
   d83b8:	b530      	push	{r4, r5, lr}
   d83ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d83be:	d502      	bpl.n	d83c6 <__aeabi_l2d+0x16>
   d83c0:	4240      	negs	r0, r0
   d83c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d83c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d83ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d83ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d83d2:	f43f aed8 	beq.w	d8186 <__adddf3+0xe6>
   d83d6:	f04f 0203 	mov.w	r2, #3
   d83da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d83de:	bf18      	it	ne
   d83e0:	3203      	addne	r2, #3
   d83e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d83e6:	bf18      	it	ne
   d83e8:	3203      	addne	r2, #3
   d83ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d83ee:	f1c2 0320 	rsb	r3, r2, #32
   d83f2:	fa00 fc03 	lsl.w	ip, r0, r3
   d83f6:	fa20 f002 	lsr.w	r0, r0, r2
   d83fa:	fa01 fe03 	lsl.w	lr, r1, r3
   d83fe:	ea40 000e 	orr.w	r0, r0, lr
   d8402:	fa21 f102 	lsr.w	r1, r1, r2
   d8406:	4414      	add	r4, r2
   d8408:	e6bd      	b.n	d8186 <__adddf3+0xe6>
   d840a:	bf00      	nop

000d840c <__aeabi_dmul>:
   d840c:	b570      	push	{r4, r5, r6, lr}
   d840e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8412:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8416:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d841a:	bf1d      	ittte	ne
   d841c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8420:	ea94 0f0c 	teqne	r4, ip
   d8424:	ea95 0f0c 	teqne	r5, ip
   d8428:	f000 f8de 	bleq	d85e8 <__aeabi_dmul+0x1dc>
   d842c:	442c      	add	r4, r5
   d842e:	ea81 0603 	eor.w	r6, r1, r3
   d8432:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d8436:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d843a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d843e:	bf18      	it	ne
   d8440:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d8444:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8448:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d844c:	d038      	beq.n	d84c0 <__aeabi_dmul+0xb4>
   d844e:	fba0 ce02 	umull	ip, lr, r0, r2
   d8452:	f04f 0500 	mov.w	r5, #0
   d8456:	fbe1 e502 	umlal	lr, r5, r1, r2
   d845a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d845e:	fbe0 e503 	umlal	lr, r5, r0, r3
   d8462:	f04f 0600 	mov.w	r6, #0
   d8466:	fbe1 5603 	umlal	r5, r6, r1, r3
   d846a:	f09c 0f00 	teq	ip, #0
   d846e:	bf18      	it	ne
   d8470:	f04e 0e01 	orrne.w	lr, lr, #1
   d8474:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d8478:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d847c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d8480:	d204      	bcs.n	d848c <__aeabi_dmul+0x80>
   d8482:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d8486:	416d      	adcs	r5, r5
   d8488:	eb46 0606 	adc.w	r6, r6, r6
   d848c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d8490:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d8494:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d8498:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d849c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d84a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d84a4:	bf88      	it	hi
   d84a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d84aa:	d81e      	bhi.n	d84ea <__aeabi_dmul+0xde>
   d84ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d84b0:	bf08      	it	eq
   d84b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d84b6:	f150 0000 	adcs.w	r0, r0, #0
   d84ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d84be:	bd70      	pop	{r4, r5, r6, pc}
   d84c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d84c4:	ea46 0101 	orr.w	r1, r6, r1
   d84c8:	ea40 0002 	orr.w	r0, r0, r2
   d84cc:	ea81 0103 	eor.w	r1, r1, r3
   d84d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d84d4:	bfc2      	ittt	gt
   d84d6:	ebd4 050c 	rsbsgt	r5, r4, ip
   d84da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d84de:	bd70      	popgt	{r4, r5, r6, pc}
   d84e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d84e4:	f04f 0e00 	mov.w	lr, #0
   d84e8:	3c01      	subs	r4, #1
   d84ea:	f300 80ab 	bgt.w	d8644 <__aeabi_dmul+0x238>
   d84ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d84f2:	bfde      	ittt	le
   d84f4:	2000      	movle	r0, #0
   d84f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d84fa:	bd70      	pople	{r4, r5, r6, pc}
   d84fc:	f1c4 0400 	rsb	r4, r4, #0
   d8500:	3c20      	subs	r4, #32
   d8502:	da35      	bge.n	d8570 <__aeabi_dmul+0x164>
   d8504:	340c      	adds	r4, #12
   d8506:	dc1b      	bgt.n	d8540 <__aeabi_dmul+0x134>
   d8508:	f104 0414 	add.w	r4, r4, #20
   d850c:	f1c4 0520 	rsb	r5, r4, #32
   d8510:	fa00 f305 	lsl.w	r3, r0, r5
   d8514:	fa20 f004 	lsr.w	r0, r0, r4
   d8518:	fa01 f205 	lsl.w	r2, r1, r5
   d851c:	ea40 0002 	orr.w	r0, r0, r2
   d8520:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d8524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8528:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d852c:	fa21 f604 	lsr.w	r6, r1, r4
   d8530:	eb42 0106 	adc.w	r1, r2, r6
   d8534:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8538:	bf08      	it	eq
   d853a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d853e:	bd70      	pop	{r4, r5, r6, pc}
   d8540:	f1c4 040c 	rsb	r4, r4, #12
   d8544:	f1c4 0520 	rsb	r5, r4, #32
   d8548:	fa00 f304 	lsl.w	r3, r0, r4
   d854c:	fa20 f005 	lsr.w	r0, r0, r5
   d8550:	fa01 f204 	lsl.w	r2, r1, r4
   d8554:	ea40 0002 	orr.w	r0, r0, r2
   d8558:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d855c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8560:	f141 0100 	adc.w	r1, r1, #0
   d8564:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8568:	bf08      	it	eq
   d856a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d856e:	bd70      	pop	{r4, r5, r6, pc}
   d8570:	f1c4 0520 	rsb	r5, r4, #32
   d8574:	fa00 f205 	lsl.w	r2, r0, r5
   d8578:	ea4e 0e02 	orr.w	lr, lr, r2
   d857c:	fa20 f304 	lsr.w	r3, r0, r4
   d8580:	fa01 f205 	lsl.w	r2, r1, r5
   d8584:	ea43 0302 	orr.w	r3, r3, r2
   d8588:	fa21 f004 	lsr.w	r0, r1, r4
   d858c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8590:	fa21 f204 	lsr.w	r2, r1, r4
   d8594:	ea20 0002 	bic.w	r0, r0, r2
   d8598:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d859c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d85a0:	bf08      	it	eq
   d85a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d85a6:	bd70      	pop	{r4, r5, r6, pc}
   d85a8:	f094 0f00 	teq	r4, #0
   d85ac:	d10f      	bne.n	d85ce <__aeabi_dmul+0x1c2>
   d85ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d85b2:	0040      	lsls	r0, r0, #1
   d85b4:	eb41 0101 	adc.w	r1, r1, r1
   d85b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d85bc:	bf08      	it	eq
   d85be:	3c01      	subeq	r4, #1
   d85c0:	d0f7      	beq.n	d85b2 <__aeabi_dmul+0x1a6>
   d85c2:	ea41 0106 	orr.w	r1, r1, r6
   d85c6:	f095 0f00 	teq	r5, #0
   d85ca:	bf18      	it	ne
   d85cc:	4770      	bxne	lr
   d85ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d85d2:	0052      	lsls	r2, r2, #1
   d85d4:	eb43 0303 	adc.w	r3, r3, r3
   d85d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d85dc:	bf08      	it	eq
   d85de:	3d01      	subeq	r5, #1
   d85e0:	d0f7      	beq.n	d85d2 <__aeabi_dmul+0x1c6>
   d85e2:	ea43 0306 	orr.w	r3, r3, r6
   d85e6:	4770      	bx	lr
   d85e8:	ea94 0f0c 	teq	r4, ip
   d85ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d85f0:	bf18      	it	ne
   d85f2:	ea95 0f0c 	teqne	r5, ip
   d85f6:	d00c      	beq.n	d8612 <__aeabi_dmul+0x206>
   d85f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d85fc:	bf18      	it	ne
   d85fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8602:	d1d1      	bne.n	d85a8 <__aeabi_dmul+0x19c>
   d8604:	ea81 0103 	eor.w	r1, r1, r3
   d8608:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d860c:	f04f 0000 	mov.w	r0, #0
   d8610:	bd70      	pop	{r4, r5, r6, pc}
   d8612:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8616:	bf06      	itte	eq
   d8618:	4610      	moveq	r0, r2
   d861a:	4619      	moveq	r1, r3
   d861c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8620:	d019      	beq.n	d8656 <__aeabi_dmul+0x24a>
   d8622:	ea94 0f0c 	teq	r4, ip
   d8626:	d102      	bne.n	d862e <__aeabi_dmul+0x222>
   d8628:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d862c:	d113      	bne.n	d8656 <__aeabi_dmul+0x24a>
   d862e:	ea95 0f0c 	teq	r5, ip
   d8632:	d105      	bne.n	d8640 <__aeabi_dmul+0x234>
   d8634:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d8638:	bf1c      	itt	ne
   d863a:	4610      	movne	r0, r2
   d863c:	4619      	movne	r1, r3
   d863e:	d10a      	bne.n	d8656 <__aeabi_dmul+0x24a>
   d8640:	ea81 0103 	eor.w	r1, r1, r3
   d8644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8648:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d864c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8650:	f04f 0000 	mov.w	r0, #0
   d8654:	bd70      	pop	{r4, r5, r6, pc}
   d8656:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d865a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d865e:	bd70      	pop	{r4, r5, r6, pc}

000d8660 <__aeabi_ddiv>:
   d8660:	b570      	push	{r4, r5, r6, lr}
   d8662:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8666:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d866a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d866e:	bf1d      	ittte	ne
   d8670:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8674:	ea94 0f0c 	teqne	r4, ip
   d8678:	ea95 0f0c 	teqne	r5, ip
   d867c:	f000 f8a7 	bleq	d87ce <__aeabi_ddiv+0x16e>
   d8680:	eba4 0405 	sub.w	r4, r4, r5
   d8684:	ea81 0e03 	eor.w	lr, r1, r3
   d8688:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d868c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8690:	f000 8088 	beq.w	d87a4 <__aeabi_ddiv+0x144>
   d8694:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8698:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d869c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d86a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d86a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d86a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d86ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d86b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d86b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d86b8:	429d      	cmp	r5, r3
   d86ba:	bf08      	it	eq
   d86bc:	4296      	cmpeq	r6, r2
   d86be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d86c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d86c6:	d202      	bcs.n	d86ce <__aeabi_ddiv+0x6e>
   d86c8:	085b      	lsrs	r3, r3, #1
   d86ca:	ea4f 0232 	mov.w	r2, r2, rrx
   d86ce:	1ab6      	subs	r6, r6, r2
   d86d0:	eb65 0503 	sbc.w	r5, r5, r3
   d86d4:	085b      	lsrs	r3, r3, #1
   d86d6:	ea4f 0232 	mov.w	r2, r2, rrx
   d86da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d86de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d86e2:	ebb6 0e02 	subs.w	lr, r6, r2
   d86e6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d86ea:	bf22      	ittt	cs
   d86ec:	1ab6      	subcs	r6, r6, r2
   d86ee:	4675      	movcs	r5, lr
   d86f0:	ea40 000c 	orrcs.w	r0, r0, ip
   d86f4:	085b      	lsrs	r3, r3, #1
   d86f6:	ea4f 0232 	mov.w	r2, r2, rrx
   d86fa:	ebb6 0e02 	subs.w	lr, r6, r2
   d86fe:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8702:	bf22      	ittt	cs
   d8704:	1ab6      	subcs	r6, r6, r2
   d8706:	4675      	movcs	r5, lr
   d8708:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d870c:	085b      	lsrs	r3, r3, #1
   d870e:	ea4f 0232 	mov.w	r2, r2, rrx
   d8712:	ebb6 0e02 	subs.w	lr, r6, r2
   d8716:	eb75 0e03 	sbcs.w	lr, r5, r3
   d871a:	bf22      	ittt	cs
   d871c:	1ab6      	subcs	r6, r6, r2
   d871e:	4675      	movcs	r5, lr
   d8720:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d8724:	085b      	lsrs	r3, r3, #1
   d8726:	ea4f 0232 	mov.w	r2, r2, rrx
   d872a:	ebb6 0e02 	subs.w	lr, r6, r2
   d872e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8732:	bf22      	ittt	cs
   d8734:	1ab6      	subcs	r6, r6, r2
   d8736:	4675      	movcs	r5, lr
   d8738:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d873c:	ea55 0e06 	orrs.w	lr, r5, r6
   d8740:	d018      	beq.n	d8774 <__aeabi_ddiv+0x114>
   d8742:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d8746:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d874a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d874e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d8752:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d8756:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d875a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d875e:	d1c0      	bne.n	d86e2 <__aeabi_ddiv+0x82>
   d8760:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8764:	d10b      	bne.n	d877e <__aeabi_ddiv+0x11e>
   d8766:	ea41 0100 	orr.w	r1, r1, r0
   d876a:	f04f 0000 	mov.w	r0, #0
   d876e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d8772:	e7b6      	b.n	d86e2 <__aeabi_ddiv+0x82>
   d8774:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8778:	bf04      	itt	eq
   d877a:	4301      	orreq	r1, r0
   d877c:	2000      	moveq	r0, #0
   d877e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8782:	bf88      	it	hi
   d8784:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8788:	f63f aeaf 	bhi.w	d84ea <__aeabi_dmul+0xde>
   d878c:	ebb5 0c03 	subs.w	ip, r5, r3
   d8790:	bf04      	itt	eq
   d8792:	ebb6 0c02 	subseq.w	ip, r6, r2
   d8796:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d879a:	f150 0000 	adcs.w	r0, r0, #0
   d879e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d87a2:	bd70      	pop	{r4, r5, r6, pc}
   d87a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d87a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d87ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d87b0:	bfc2      	ittt	gt
   d87b2:	ebd4 050c 	rsbsgt	r5, r4, ip
   d87b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d87ba:	bd70      	popgt	{r4, r5, r6, pc}
   d87bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d87c0:	f04f 0e00 	mov.w	lr, #0
   d87c4:	3c01      	subs	r4, #1
   d87c6:	e690      	b.n	d84ea <__aeabi_dmul+0xde>
   d87c8:	ea45 0e06 	orr.w	lr, r5, r6
   d87cc:	e68d      	b.n	d84ea <__aeabi_dmul+0xde>
   d87ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d87d2:	ea94 0f0c 	teq	r4, ip
   d87d6:	bf08      	it	eq
   d87d8:	ea95 0f0c 	teqeq	r5, ip
   d87dc:	f43f af3b 	beq.w	d8656 <__aeabi_dmul+0x24a>
   d87e0:	ea94 0f0c 	teq	r4, ip
   d87e4:	d10a      	bne.n	d87fc <__aeabi_ddiv+0x19c>
   d87e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d87ea:	f47f af34 	bne.w	d8656 <__aeabi_dmul+0x24a>
   d87ee:	ea95 0f0c 	teq	r5, ip
   d87f2:	f47f af25 	bne.w	d8640 <__aeabi_dmul+0x234>
   d87f6:	4610      	mov	r0, r2
   d87f8:	4619      	mov	r1, r3
   d87fa:	e72c      	b.n	d8656 <__aeabi_dmul+0x24a>
   d87fc:	ea95 0f0c 	teq	r5, ip
   d8800:	d106      	bne.n	d8810 <__aeabi_ddiv+0x1b0>
   d8802:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8806:	f43f aefd 	beq.w	d8604 <__aeabi_dmul+0x1f8>
   d880a:	4610      	mov	r0, r2
   d880c:	4619      	mov	r1, r3
   d880e:	e722      	b.n	d8656 <__aeabi_dmul+0x24a>
   d8810:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8814:	bf18      	it	ne
   d8816:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d881a:	f47f aec5 	bne.w	d85a8 <__aeabi_dmul+0x19c>
   d881e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d8822:	f47f af0d 	bne.w	d8640 <__aeabi_dmul+0x234>
   d8826:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d882a:	f47f aeeb 	bne.w	d8604 <__aeabi_dmul+0x1f8>
   d882e:	e712      	b.n	d8656 <__aeabi_dmul+0x24a>

000d8830 <__gedf2>:
   d8830:	f04f 3cff 	mov.w	ip, #4294967295
   d8834:	e006      	b.n	d8844 <__cmpdf2+0x4>
   d8836:	bf00      	nop

000d8838 <__ledf2>:
   d8838:	f04f 0c01 	mov.w	ip, #1
   d883c:	e002      	b.n	d8844 <__cmpdf2+0x4>
   d883e:	bf00      	nop

000d8840 <__cmpdf2>:
   d8840:	f04f 0c01 	mov.w	ip, #1
   d8844:	f84d cd04 	str.w	ip, [sp, #-4]!
   d8848:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d884c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8850:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8854:	bf18      	it	ne
   d8856:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d885a:	d01b      	beq.n	d8894 <__cmpdf2+0x54>
   d885c:	b001      	add	sp, #4
   d885e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d8862:	bf0c      	ite	eq
   d8864:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d8868:	ea91 0f03 	teqne	r1, r3
   d886c:	bf02      	ittt	eq
   d886e:	ea90 0f02 	teqeq	r0, r2
   d8872:	2000      	moveq	r0, #0
   d8874:	4770      	bxeq	lr
   d8876:	f110 0f00 	cmn.w	r0, #0
   d887a:	ea91 0f03 	teq	r1, r3
   d887e:	bf58      	it	pl
   d8880:	4299      	cmppl	r1, r3
   d8882:	bf08      	it	eq
   d8884:	4290      	cmpeq	r0, r2
   d8886:	bf2c      	ite	cs
   d8888:	17d8      	asrcs	r0, r3, #31
   d888a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d888e:	f040 0001 	orr.w	r0, r0, #1
   d8892:	4770      	bx	lr
   d8894:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8898:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d889c:	d102      	bne.n	d88a4 <__cmpdf2+0x64>
   d889e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d88a2:	d107      	bne.n	d88b4 <__cmpdf2+0x74>
   d88a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d88a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d88ac:	d1d6      	bne.n	d885c <__cmpdf2+0x1c>
   d88ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d88b2:	d0d3      	beq.n	d885c <__cmpdf2+0x1c>
   d88b4:	f85d 0b04 	ldr.w	r0, [sp], #4
   d88b8:	4770      	bx	lr
   d88ba:	bf00      	nop

000d88bc <__aeabi_cdrcmple>:
   d88bc:	4684      	mov	ip, r0
   d88be:	4610      	mov	r0, r2
   d88c0:	4662      	mov	r2, ip
   d88c2:	468c      	mov	ip, r1
   d88c4:	4619      	mov	r1, r3
   d88c6:	4663      	mov	r3, ip
   d88c8:	e000      	b.n	d88cc <__aeabi_cdcmpeq>
   d88ca:	bf00      	nop

000d88cc <__aeabi_cdcmpeq>:
   d88cc:	b501      	push	{r0, lr}
   d88ce:	f7ff ffb7 	bl	d8840 <__cmpdf2>
   d88d2:	2800      	cmp	r0, #0
   d88d4:	bf48      	it	mi
   d88d6:	f110 0f00 	cmnmi.w	r0, #0
   d88da:	bd01      	pop	{r0, pc}

000d88dc <__aeabi_dcmpeq>:
   d88dc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d88e0:	f7ff fff4 	bl	d88cc <__aeabi_cdcmpeq>
   d88e4:	bf0c      	ite	eq
   d88e6:	2001      	moveq	r0, #1
   d88e8:	2000      	movne	r0, #0
   d88ea:	f85d fb08 	ldr.w	pc, [sp], #8
   d88ee:	bf00      	nop

000d88f0 <__aeabi_dcmplt>:
   d88f0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d88f4:	f7ff ffea 	bl	d88cc <__aeabi_cdcmpeq>
   d88f8:	bf34      	ite	cc
   d88fa:	2001      	movcc	r0, #1
   d88fc:	2000      	movcs	r0, #0
   d88fe:	f85d fb08 	ldr.w	pc, [sp], #8
   d8902:	bf00      	nop

000d8904 <__aeabi_dcmple>:
   d8904:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8908:	f7ff ffe0 	bl	d88cc <__aeabi_cdcmpeq>
   d890c:	bf94      	ite	ls
   d890e:	2001      	movls	r0, #1
   d8910:	2000      	movhi	r0, #0
   d8912:	f85d fb08 	ldr.w	pc, [sp], #8
   d8916:	bf00      	nop

000d8918 <__aeabi_dcmpge>:
   d8918:	f84d ed08 	str.w	lr, [sp, #-8]!
   d891c:	f7ff ffce 	bl	d88bc <__aeabi_cdrcmple>
   d8920:	bf94      	ite	ls
   d8922:	2001      	movls	r0, #1
   d8924:	2000      	movhi	r0, #0
   d8926:	f85d fb08 	ldr.w	pc, [sp], #8
   d892a:	bf00      	nop

000d892c <__aeabi_dcmpgt>:
   d892c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8930:	f7ff ffc4 	bl	d88bc <__aeabi_cdrcmple>
   d8934:	bf34      	ite	cc
   d8936:	2001      	movcc	r0, #1
   d8938:	2000      	movcs	r0, #0
   d893a:	f85d fb08 	ldr.w	pc, [sp], #8
   d893e:	bf00      	nop

000d8940 <__aeabi_d2uiz>:
   d8940:	004a      	lsls	r2, r1, #1
   d8942:	d211      	bcs.n	d8968 <__aeabi_d2uiz+0x28>
   d8944:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d8948:	d211      	bcs.n	d896e <__aeabi_d2uiz+0x2e>
   d894a:	d50d      	bpl.n	d8968 <__aeabi_d2uiz+0x28>
   d894c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d8950:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d8954:	d40e      	bmi.n	d8974 <__aeabi_d2uiz+0x34>
   d8956:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d895a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d895e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d8962:	fa23 f002 	lsr.w	r0, r3, r2
   d8966:	4770      	bx	lr
   d8968:	f04f 0000 	mov.w	r0, #0
   d896c:	4770      	bx	lr
   d896e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d8972:	d102      	bne.n	d897a <__aeabi_d2uiz+0x3a>
   d8974:	f04f 30ff 	mov.w	r0, #4294967295
   d8978:	4770      	bx	lr
   d897a:	f04f 0000 	mov.w	r0, #0
   d897e:	4770      	bx	lr

000d8980 <__aeabi_uldivmod>:
   d8980:	b953      	cbnz	r3, d8998 <__aeabi_uldivmod+0x18>
   d8982:	b94a      	cbnz	r2, d8998 <__aeabi_uldivmod+0x18>
   d8984:	2900      	cmp	r1, #0
   d8986:	bf08      	it	eq
   d8988:	2800      	cmpeq	r0, #0
   d898a:	bf1c      	itt	ne
   d898c:	f04f 31ff 	movne.w	r1, #4294967295
   d8990:	f04f 30ff 	movne.w	r0, #4294967295
   d8994:	f000 b98c 	b.w	d8cb0 <__aeabi_idiv0>
   d8998:	f1ad 0c08 	sub.w	ip, sp, #8
   d899c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d89a0:	f000 f824 	bl	d89ec <__udivmoddi4>
   d89a4:	f8dd e004 	ldr.w	lr, [sp, #4]
   d89a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d89ac:	b004      	add	sp, #16
   d89ae:	4770      	bx	lr

000d89b0 <__aeabi_d2ulz>:
   d89b0:	b5d0      	push	{r4, r6, r7, lr}
   d89b2:	4b0c      	ldr	r3, [pc, #48]	; (d89e4 <__aeabi_d2ulz+0x34>)
   d89b4:	2200      	movs	r2, #0
   d89b6:	4606      	mov	r6, r0
   d89b8:	460f      	mov	r7, r1
   d89ba:	f7ff fd27 	bl	d840c <__aeabi_dmul>
   d89be:	f7ff ffbf 	bl	d8940 <__aeabi_d2uiz>
   d89c2:	4604      	mov	r4, r0
   d89c4:	f7ff fca8 	bl	d8318 <__aeabi_ui2d>
   d89c8:	4b07      	ldr	r3, [pc, #28]	; (d89e8 <__aeabi_d2ulz+0x38>)
   d89ca:	2200      	movs	r2, #0
   d89cc:	f7ff fd1e 	bl	d840c <__aeabi_dmul>
   d89d0:	4602      	mov	r2, r0
   d89d2:	460b      	mov	r3, r1
   d89d4:	4630      	mov	r0, r6
   d89d6:	4639      	mov	r1, r7
   d89d8:	f7ff fb60 	bl	d809c <__aeabi_dsub>
   d89dc:	f7ff ffb0 	bl	d8940 <__aeabi_d2uiz>
   d89e0:	4621      	mov	r1, r4
   d89e2:	bdd0      	pop	{r4, r6, r7, pc}
   d89e4:	3df00000 	.word	0x3df00000
   d89e8:	41f00000 	.word	0x41f00000

000d89ec <__udivmoddi4>:
   d89ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d89f0:	9d08      	ldr	r5, [sp, #32]
   d89f2:	4604      	mov	r4, r0
   d89f4:	468c      	mov	ip, r1
   d89f6:	2b00      	cmp	r3, #0
   d89f8:	f040 8083 	bne.w	d8b02 <__udivmoddi4+0x116>
   d89fc:	428a      	cmp	r2, r1
   d89fe:	4617      	mov	r7, r2
   d8a00:	d947      	bls.n	d8a92 <__udivmoddi4+0xa6>
   d8a02:	fab2 f282 	clz	r2, r2
   d8a06:	b142      	cbz	r2, d8a1a <__udivmoddi4+0x2e>
   d8a08:	f1c2 0020 	rsb	r0, r2, #32
   d8a0c:	fa24 f000 	lsr.w	r0, r4, r0
   d8a10:	4091      	lsls	r1, r2
   d8a12:	4097      	lsls	r7, r2
   d8a14:	ea40 0c01 	orr.w	ip, r0, r1
   d8a18:	4094      	lsls	r4, r2
   d8a1a:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d8a1e:	0c23      	lsrs	r3, r4, #16
   d8a20:	fbbc f6f8 	udiv	r6, ip, r8
   d8a24:	fa1f fe87 	uxth.w	lr, r7
   d8a28:	fb08 c116 	mls	r1, r8, r6, ip
   d8a2c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   d8a30:	fb06 f10e 	mul.w	r1, r6, lr
   d8a34:	4299      	cmp	r1, r3
   d8a36:	d909      	bls.n	d8a4c <__udivmoddi4+0x60>
   d8a38:	18fb      	adds	r3, r7, r3
   d8a3a:	f106 30ff 	add.w	r0, r6, #4294967295
   d8a3e:	f080 8119 	bcs.w	d8c74 <__udivmoddi4+0x288>
   d8a42:	4299      	cmp	r1, r3
   d8a44:	f240 8116 	bls.w	d8c74 <__udivmoddi4+0x288>
   d8a48:	3e02      	subs	r6, #2
   d8a4a:	443b      	add	r3, r7
   d8a4c:	1a5b      	subs	r3, r3, r1
   d8a4e:	b2a4      	uxth	r4, r4
   d8a50:	fbb3 f0f8 	udiv	r0, r3, r8
   d8a54:	fb08 3310 	mls	r3, r8, r0, r3
   d8a58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   d8a5c:	fb00 fe0e 	mul.w	lr, r0, lr
   d8a60:	45a6      	cmp	lr, r4
   d8a62:	d909      	bls.n	d8a78 <__udivmoddi4+0x8c>
   d8a64:	193c      	adds	r4, r7, r4
   d8a66:	f100 33ff 	add.w	r3, r0, #4294967295
   d8a6a:	f080 8105 	bcs.w	d8c78 <__udivmoddi4+0x28c>
   d8a6e:	45a6      	cmp	lr, r4
   d8a70:	f240 8102 	bls.w	d8c78 <__udivmoddi4+0x28c>
   d8a74:	3802      	subs	r0, #2
   d8a76:	443c      	add	r4, r7
   d8a78:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   d8a7c:	eba4 040e 	sub.w	r4, r4, lr
   d8a80:	2600      	movs	r6, #0
   d8a82:	b11d      	cbz	r5, d8a8c <__udivmoddi4+0xa0>
   d8a84:	40d4      	lsrs	r4, r2
   d8a86:	2300      	movs	r3, #0
   d8a88:	e9c5 4300 	strd	r4, r3, [r5]
   d8a8c:	4631      	mov	r1, r6
   d8a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8a92:	b902      	cbnz	r2, d8a96 <__udivmoddi4+0xaa>
   d8a94:	deff      	udf	#255	; 0xff
   d8a96:	fab2 f282 	clz	r2, r2
   d8a9a:	2a00      	cmp	r2, #0
   d8a9c:	d150      	bne.n	d8b40 <__udivmoddi4+0x154>
   d8a9e:	1bcb      	subs	r3, r1, r7
   d8aa0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   d8aa4:	fa1f f887 	uxth.w	r8, r7
   d8aa8:	2601      	movs	r6, #1
   d8aaa:	fbb3 fcfe 	udiv	ip, r3, lr
   d8aae:	0c21      	lsrs	r1, r4, #16
   d8ab0:	fb0e 331c 	mls	r3, lr, ip, r3
   d8ab4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   d8ab8:	fb08 f30c 	mul.w	r3, r8, ip
   d8abc:	428b      	cmp	r3, r1
   d8abe:	d907      	bls.n	d8ad0 <__udivmoddi4+0xe4>
   d8ac0:	1879      	adds	r1, r7, r1
   d8ac2:	f10c 30ff 	add.w	r0, ip, #4294967295
   d8ac6:	d202      	bcs.n	d8ace <__udivmoddi4+0xe2>
   d8ac8:	428b      	cmp	r3, r1
   d8aca:	f200 80e9 	bhi.w	d8ca0 <__udivmoddi4+0x2b4>
   d8ace:	4684      	mov	ip, r0
   d8ad0:	1ac9      	subs	r1, r1, r3
   d8ad2:	b2a3      	uxth	r3, r4
   d8ad4:	fbb1 f0fe 	udiv	r0, r1, lr
   d8ad8:	fb0e 1110 	mls	r1, lr, r0, r1
   d8adc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   d8ae0:	fb08 f800 	mul.w	r8, r8, r0
   d8ae4:	45a0      	cmp	r8, r4
   d8ae6:	d907      	bls.n	d8af8 <__udivmoddi4+0x10c>
   d8ae8:	193c      	adds	r4, r7, r4
   d8aea:	f100 33ff 	add.w	r3, r0, #4294967295
   d8aee:	d202      	bcs.n	d8af6 <__udivmoddi4+0x10a>
   d8af0:	45a0      	cmp	r8, r4
   d8af2:	f200 80d9 	bhi.w	d8ca8 <__udivmoddi4+0x2bc>
   d8af6:	4618      	mov	r0, r3
   d8af8:	eba4 0408 	sub.w	r4, r4, r8
   d8afc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   d8b00:	e7bf      	b.n	d8a82 <__udivmoddi4+0x96>
   d8b02:	428b      	cmp	r3, r1
   d8b04:	d909      	bls.n	d8b1a <__udivmoddi4+0x12e>
   d8b06:	2d00      	cmp	r5, #0
   d8b08:	f000 80b1 	beq.w	d8c6e <__udivmoddi4+0x282>
   d8b0c:	2600      	movs	r6, #0
   d8b0e:	e9c5 0100 	strd	r0, r1, [r5]
   d8b12:	4630      	mov	r0, r6
   d8b14:	4631      	mov	r1, r6
   d8b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8b1a:	fab3 f683 	clz	r6, r3
   d8b1e:	2e00      	cmp	r6, #0
   d8b20:	d14a      	bne.n	d8bb8 <__udivmoddi4+0x1cc>
   d8b22:	428b      	cmp	r3, r1
   d8b24:	d302      	bcc.n	d8b2c <__udivmoddi4+0x140>
   d8b26:	4282      	cmp	r2, r0
   d8b28:	f200 80b8 	bhi.w	d8c9c <__udivmoddi4+0x2b0>
   d8b2c:	1a84      	subs	r4, r0, r2
   d8b2e:	eb61 0103 	sbc.w	r1, r1, r3
   d8b32:	2001      	movs	r0, #1
   d8b34:	468c      	mov	ip, r1
   d8b36:	2d00      	cmp	r5, #0
   d8b38:	d0a8      	beq.n	d8a8c <__udivmoddi4+0xa0>
   d8b3a:	e9c5 4c00 	strd	r4, ip, [r5]
   d8b3e:	e7a5      	b.n	d8a8c <__udivmoddi4+0xa0>
   d8b40:	f1c2 0320 	rsb	r3, r2, #32
   d8b44:	fa20 f603 	lsr.w	r6, r0, r3
   d8b48:	4097      	lsls	r7, r2
   d8b4a:	fa01 f002 	lsl.w	r0, r1, r2
   d8b4e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   d8b52:	40d9      	lsrs	r1, r3
   d8b54:	4330      	orrs	r0, r6
   d8b56:	0c03      	lsrs	r3, r0, #16
   d8b58:	fbb1 f6fe 	udiv	r6, r1, lr
   d8b5c:	fa1f f887 	uxth.w	r8, r7
   d8b60:	fb0e 1116 	mls	r1, lr, r6, r1
   d8b64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   d8b68:	fb06 f108 	mul.w	r1, r6, r8
   d8b6c:	4299      	cmp	r1, r3
   d8b6e:	fa04 f402 	lsl.w	r4, r4, r2
   d8b72:	d909      	bls.n	d8b88 <__udivmoddi4+0x19c>
   d8b74:	18fb      	adds	r3, r7, r3
   d8b76:	f106 3cff 	add.w	ip, r6, #4294967295
   d8b7a:	f080 808d 	bcs.w	d8c98 <__udivmoddi4+0x2ac>
   d8b7e:	4299      	cmp	r1, r3
   d8b80:	f240 808a 	bls.w	d8c98 <__udivmoddi4+0x2ac>
   d8b84:	3e02      	subs	r6, #2
   d8b86:	443b      	add	r3, r7
   d8b88:	1a5b      	subs	r3, r3, r1
   d8b8a:	b281      	uxth	r1, r0
   d8b8c:	fbb3 f0fe 	udiv	r0, r3, lr
   d8b90:	fb0e 3310 	mls	r3, lr, r0, r3
   d8b94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   d8b98:	fb00 f308 	mul.w	r3, r0, r8
   d8b9c:	428b      	cmp	r3, r1
   d8b9e:	d907      	bls.n	d8bb0 <__udivmoddi4+0x1c4>
   d8ba0:	1879      	adds	r1, r7, r1
   d8ba2:	f100 3cff 	add.w	ip, r0, #4294967295
   d8ba6:	d273      	bcs.n	d8c90 <__udivmoddi4+0x2a4>
   d8ba8:	428b      	cmp	r3, r1
   d8baa:	d971      	bls.n	d8c90 <__udivmoddi4+0x2a4>
   d8bac:	3802      	subs	r0, #2
   d8bae:	4439      	add	r1, r7
   d8bb0:	1acb      	subs	r3, r1, r3
   d8bb2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   d8bb6:	e778      	b.n	d8aaa <__udivmoddi4+0xbe>
   d8bb8:	f1c6 0c20 	rsb	ip, r6, #32
   d8bbc:	fa03 f406 	lsl.w	r4, r3, r6
   d8bc0:	fa22 f30c 	lsr.w	r3, r2, ip
   d8bc4:	431c      	orrs	r4, r3
   d8bc6:	fa20 f70c 	lsr.w	r7, r0, ip
   d8bca:	fa01 f306 	lsl.w	r3, r1, r6
   d8bce:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   d8bd2:	fa21 f10c 	lsr.w	r1, r1, ip
   d8bd6:	431f      	orrs	r7, r3
   d8bd8:	0c3b      	lsrs	r3, r7, #16
   d8bda:	fbb1 f9fe 	udiv	r9, r1, lr
   d8bde:	fa1f f884 	uxth.w	r8, r4
   d8be2:	fb0e 1119 	mls	r1, lr, r9, r1
   d8be6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   d8bea:	fb09 fa08 	mul.w	sl, r9, r8
   d8bee:	458a      	cmp	sl, r1
   d8bf0:	fa02 f206 	lsl.w	r2, r2, r6
   d8bf4:	fa00 f306 	lsl.w	r3, r0, r6
   d8bf8:	d908      	bls.n	d8c0c <__udivmoddi4+0x220>
   d8bfa:	1861      	adds	r1, r4, r1
   d8bfc:	f109 30ff 	add.w	r0, r9, #4294967295
   d8c00:	d248      	bcs.n	d8c94 <__udivmoddi4+0x2a8>
   d8c02:	458a      	cmp	sl, r1
   d8c04:	d946      	bls.n	d8c94 <__udivmoddi4+0x2a8>
   d8c06:	f1a9 0902 	sub.w	r9, r9, #2
   d8c0a:	4421      	add	r1, r4
   d8c0c:	eba1 010a 	sub.w	r1, r1, sl
   d8c10:	b2bf      	uxth	r7, r7
   d8c12:	fbb1 f0fe 	udiv	r0, r1, lr
   d8c16:	fb0e 1110 	mls	r1, lr, r0, r1
   d8c1a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
   d8c1e:	fb00 f808 	mul.w	r8, r0, r8
   d8c22:	45b8      	cmp	r8, r7
   d8c24:	d907      	bls.n	d8c36 <__udivmoddi4+0x24a>
   d8c26:	19e7      	adds	r7, r4, r7
   d8c28:	f100 31ff 	add.w	r1, r0, #4294967295
   d8c2c:	d22e      	bcs.n	d8c8c <__udivmoddi4+0x2a0>
   d8c2e:	45b8      	cmp	r8, r7
   d8c30:	d92c      	bls.n	d8c8c <__udivmoddi4+0x2a0>
   d8c32:	3802      	subs	r0, #2
   d8c34:	4427      	add	r7, r4
   d8c36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   d8c3a:	eba7 0708 	sub.w	r7, r7, r8
   d8c3e:	fba0 8902 	umull	r8, r9, r0, r2
   d8c42:	454f      	cmp	r7, r9
   d8c44:	46c6      	mov	lr, r8
   d8c46:	4649      	mov	r1, r9
   d8c48:	d31a      	bcc.n	d8c80 <__udivmoddi4+0x294>
   d8c4a:	d017      	beq.n	d8c7c <__udivmoddi4+0x290>
   d8c4c:	b15d      	cbz	r5, d8c66 <__udivmoddi4+0x27a>
   d8c4e:	ebb3 020e 	subs.w	r2, r3, lr
   d8c52:	eb67 0701 	sbc.w	r7, r7, r1
   d8c56:	fa07 fc0c 	lsl.w	ip, r7, ip
   d8c5a:	40f2      	lsrs	r2, r6
   d8c5c:	ea4c 0202 	orr.w	r2, ip, r2
   d8c60:	40f7      	lsrs	r7, r6
   d8c62:	e9c5 2700 	strd	r2, r7, [r5]
   d8c66:	2600      	movs	r6, #0
   d8c68:	4631      	mov	r1, r6
   d8c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8c6e:	462e      	mov	r6, r5
   d8c70:	4628      	mov	r0, r5
   d8c72:	e70b      	b.n	d8a8c <__udivmoddi4+0xa0>
   d8c74:	4606      	mov	r6, r0
   d8c76:	e6e9      	b.n	d8a4c <__udivmoddi4+0x60>
   d8c78:	4618      	mov	r0, r3
   d8c7a:	e6fd      	b.n	d8a78 <__udivmoddi4+0x8c>
   d8c7c:	4543      	cmp	r3, r8
   d8c7e:	d2e5      	bcs.n	d8c4c <__udivmoddi4+0x260>
   d8c80:	ebb8 0e02 	subs.w	lr, r8, r2
   d8c84:	eb69 0104 	sbc.w	r1, r9, r4
   d8c88:	3801      	subs	r0, #1
   d8c8a:	e7df      	b.n	d8c4c <__udivmoddi4+0x260>
   d8c8c:	4608      	mov	r0, r1
   d8c8e:	e7d2      	b.n	d8c36 <__udivmoddi4+0x24a>
   d8c90:	4660      	mov	r0, ip
   d8c92:	e78d      	b.n	d8bb0 <__udivmoddi4+0x1c4>
   d8c94:	4681      	mov	r9, r0
   d8c96:	e7b9      	b.n	d8c0c <__udivmoddi4+0x220>
   d8c98:	4666      	mov	r6, ip
   d8c9a:	e775      	b.n	d8b88 <__udivmoddi4+0x19c>
   d8c9c:	4630      	mov	r0, r6
   d8c9e:	e74a      	b.n	d8b36 <__udivmoddi4+0x14a>
   d8ca0:	f1ac 0c02 	sub.w	ip, ip, #2
   d8ca4:	4439      	add	r1, r7
   d8ca6:	e713      	b.n	d8ad0 <__udivmoddi4+0xe4>
   d8ca8:	3802      	subs	r0, #2
   d8caa:	443c      	add	r4, r7
   d8cac:	e724      	b.n	d8af8 <__udivmoddi4+0x10c>
   d8cae:	bf00      	nop

000d8cb0 <__aeabi_idiv0>:
   d8cb0:	4770      	bx	lr
   d8cb2:	bf00      	nop

000d8cb4 <atoi>:
   d8cb4:	220a      	movs	r2, #10
   d8cb6:	2100      	movs	r1, #0
   d8cb8:	f000 b920 	b.w	d8efc <strtol>

000d8cbc <atol>:
   d8cbc:	220a      	movs	r2, #10
   d8cbe:	2100      	movs	r1, #0
   d8cc0:	f000 b91c 	b.w	d8efc <strtol>

000d8cc4 <__cxa_atexit>:
   d8cc4:	b510      	push	{r4, lr}
   d8cc6:	4c05      	ldr	r4, [pc, #20]	; (d8cdc <__cxa_atexit+0x18>)
   d8cc8:	4613      	mov	r3, r2
   d8cca:	b12c      	cbz	r4, d8cd8 <__cxa_atexit+0x14>
   d8ccc:	460a      	mov	r2, r1
   d8cce:	4601      	mov	r1, r0
   d8cd0:	2002      	movs	r0, #2
   d8cd2:	f3af 8000 	nop.w
   d8cd6:	bd10      	pop	{r4, pc}
   d8cd8:	4620      	mov	r0, r4
   d8cda:	e7fc      	b.n	d8cd6 <__cxa_atexit+0x12>
   d8cdc:	00000000 	.word	0x00000000

000d8ce0 <memcmp>:
   d8ce0:	b530      	push	{r4, r5, lr}
   d8ce2:	3901      	subs	r1, #1
   d8ce4:	2400      	movs	r4, #0
   d8ce6:	42a2      	cmp	r2, r4
   d8ce8:	d101      	bne.n	d8cee <memcmp+0xe>
   d8cea:	2000      	movs	r0, #0
   d8cec:	e005      	b.n	d8cfa <memcmp+0x1a>
   d8cee:	5d03      	ldrb	r3, [r0, r4]
   d8cf0:	3401      	adds	r4, #1
   d8cf2:	5d0d      	ldrb	r5, [r1, r4]
   d8cf4:	42ab      	cmp	r3, r5
   d8cf6:	d0f6      	beq.n	d8ce6 <memcmp+0x6>
   d8cf8:	1b58      	subs	r0, r3, r5
   d8cfa:	bd30      	pop	{r4, r5, pc}

000d8cfc <memcpy>:
   d8cfc:	440a      	add	r2, r1
   d8cfe:	4291      	cmp	r1, r2
   d8d00:	f100 33ff 	add.w	r3, r0, #4294967295
   d8d04:	d100      	bne.n	d8d08 <memcpy+0xc>
   d8d06:	4770      	bx	lr
   d8d08:	b510      	push	{r4, lr}
   d8d0a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8d0e:	f803 4f01 	strb.w	r4, [r3, #1]!
   d8d12:	4291      	cmp	r1, r2
   d8d14:	d1f9      	bne.n	d8d0a <memcpy+0xe>
   d8d16:	bd10      	pop	{r4, pc}

000d8d18 <memmove>:
   d8d18:	4288      	cmp	r0, r1
   d8d1a:	b510      	push	{r4, lr}
   d8d1c:	eb01 0402 	add.w	r4, r1, r2
   d8d20:	d902      	bls.n	d8d28 <memmove+0x10>
   d8d22:	4284      	cmp	r4, r0
   d8d24:	4623      	mov	r3, r4
   d8d26:	d807      	bhi.n	d8d38 <memmove+0x20>
   d8d28:	1e43      	subs	r3, r0, #1
   d8d2a:	42a1      	cmp	r1, r4
   d8d2c:	d008      	beq.n	d8d40 <memmove+0x28>
   d8d2e:	f811 2b01 	ldrb.w	r2, [r1], #1
   d8d32:	f803 2f01 	strb.w	r2, [r3, #1]!
   d8d36:	e7f8      	b.n	d8d2a <memmove+0x12>
   d8d38:	4402      	add	r2, r0
   d8d3a:	4601      	mov	r1, r0
   d8d3c:	428a      	cmp	r2, r1
   d8d3e:	d100      	bne.n	d8d42 <memmove+0x2a>
   d8d40:	bd10      	pop	{r4, pc}
   d8d42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d8d46:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d8d4a:	e7f7      	b.n	d8d3c <memmove+0x24>

000d8d4c <memset>:
   d8d4c:	4402      	add	r2, r0
   d8d4e:	4603      	mov	r3, r0
   d8d50:	4293      	cmp	r3, r2
   d8d52:	d100      	bne.n	d8d56 <memset+0xa>
   d8d54:	4770      	bx	lr
   d8d56:	f803 1b01 	strb.w	r1, [r3], #1
   d8d5a:	e7f9      	b.n	d8d50 <memset+0x4>

000d8d5c <srand>:
   d8d5c:	b538      	push	{r3, r4, r5, lr}
   d8d5e:	4b0d      	ldr	r3, [pc, #52]	; (d8d94 <srand+0x38>)
   d8d60:	681d      	ldr	r5, [r3, #0]
   d8d62:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d8d64:	4604      	mov	r4, r0
   d8d66:	b97b      	cbnz	r3, d8d88 <srand+0x2c>
   d8d68:	2018      	movs	r0, #24
   d8d6a:	f7fd f993 	bl	d6094 <malloc>
   d8d6e:	4a0a      	ldr	r2, [pc, #40]	; (d8d98 <srand+0x3c>)
   d8d70:	4b0a      	ldr	r3, [pc, #40]	; (d8d9c <srand+0x40>)
   d8d72:	63a8      	str	r0, [r5, #56]	; 0x38
   d8d74:	e9c0 2300 	strd	r2, r3, [r0]
   d8d78:	4b09      	ldr	r3, [pc, #36]	; (d8da0 <srand+0x44>)
   d8d7a:	6083      	str	r3, [r0, #8]
   d8d7c:	230b      	movs	r3, #11
   d8d7e:	8183      	strh	r3, [r0, #12]
   d8d80:	2201      	movs	r2, #1
   d8d82:	2300      	movs	r3, #0
   d8d84:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d8d88:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d8d8a:	2200      	movs	r2, #0
   d8d8c:	611c      	str	r4, [r3, #16]
   d8d8e:	615a      	str	r2, [r3, #20]
   d8d90:	bd38      	pop	{r3, r4, r5, pc}
   d8d92:	bf00      	nop
   d8d94:	2003e4b0 	.word	0x2003e4b0
   d8d98:	abcd330e 	.word	0xabcd330e
   d8d9c:	e66d1234 	.word	0xe66d1234
   d8da0:	0005deec 	.word	0x0005deec

000d8da4 <strcmp>:
   d8da4:	f810 2b01 	ldrb.w	r2, [r0], #1
   d8da8:	f811 3b01 	ldrb.w	r3, [r1], #1
   d8dac:	2a01      	cmp	r2, #1
   d8dae:	bf28      	it	cs
   d8db0:	429a      	cmpcs	r2, r3
   d8db2:	d0f7      	beq.n	d8da4 <strcmp>
   d8db4:	1ad0      	subs	r0, r2, r3
   d8db6:	4770      	bx	lr

000d8db8 <strlen>:
   d8db8:	4603      	mov	r3, r0
   d8dba:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8dbe:	2a00      	cmp	r2, #0
   d8dc0:	d1fb      	bne.n	d8dba <strlen+0x2>
   d8dc2:	1a18      	subs	r0, r3, r0
   d8dc4:	3801      	subs	r0, #1
   d8dc6:	4770      	bx	lr

000d8dc8 <strncpy>:
   d8dc8:	b510      	push	{r4, lr}
   d8dca:	3901      	subs	r1, #1
   d8dcc:	4603      	mov	r3, r0
   d8dce:	b132      	cbz	r2, d8dde <strncpy+0x16>
   d8dd0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d8dd4:	f803 4b01 	strb.w	r4, [r3], #1
   d8dd8:	3a01      	subs	r2, #1
   d8dda:	2c00      	cmp	r4, #0
   d8ddc:	d1f7      	bne.n	d8dce <strncpy+0x6>
   d8dde:	441a      	add	r2, r3
   d8de0:	2100      	movs	r1, #0
   d8de2:	4293      	cmp	r3, r2
   d8de4:	d100      	bne.n	d8de8 <strncpy+0x20>
   d8de6:	bd10      	pop	{r4, pc}
   d8de8:	f803 1b01 	strb.w	r1, [r3], #1
   d8dec:	e7f9      	b.n	d8de2 <strncpy+0x1a>

000d8dee <strnlen>:
   d8dee:	b510      	push	{r4, lr}
   d8df0:	4602      	mov	r2, r0
   d8df2:	4401      	add	r1, r0
   d8df4:	428a      	cmp	r2, r1
   d8df6:	4613      	mov	r3, r2
   d8df8:	d101      	bne.n	d8dfe <strnlen+0x10>
   d8dfa:	1a18      	subs	r0, r3, r0
   d8dfc:	bd10      	pop	{r4, pc}
   d8dfe:	781c      	ldrb	r4, [r3, #0]
   d8e00:	3201      	adds	r2, #1
   d8e02:	2c00      	cmp	r4, #0
   d8e04:	d1f6      	bne.n	d8df4 <strnlen+0x6>
   d8e06:	e7f8      	b.n	d8dfa <strnlen+0xc>

000d8e08 <_strtol_l.isra.0>:
   d8e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8e0c:	4e3a      	ldr	r6, [pc, #232]	; (d8ef8 <_strtol_l.isra.0+0xf0>)
   d8e0e:	4686      	mov	lr, r0
   d8e10:	468c      	mov	ip, r1
   d8e12:	4660      	mov	r0, ip
   d8e14:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d8e18:	5da5      	ldrb	r5, [r4, r6]
   d8e1a:	f015 0508 	ands.w	r5, r5, #8
   d8e1e:	d1f8      	bne.n	d8e12 <_strtol_l.isra.0+0xa>
   d8e20:	2c2d      	cmp	r4, #45	; 0x2d
   d8e22:	d133      	bne.n	d8e8c <_strtol_l.isra.0+0x84>
   d8e24:	f89c 4000 	ldrb.w	r4, [ip]
   d8e28:	f04f 0801 	mov.w	r8, #1
   d8e2c:	f100 0c02 	add.w	ip, r0, #2
   d8e30:	2b00      	cmp	r3, #0
   d8e32:	d05c      	beq.n	d8eee <_strtol_l.isra.0+0xe6>
   d8e34:	2b10      	cmp	r3, #16
   d8e36:	d10c      	bne.n	d8e52 <_strtol_l.isra.0+0x4a>
   d8e38:	2c30      	cmp	r4, #48	; 0x30
   d8e3a:	d10a      	bne.n	d8e52 <_strtol_l.isra.0+0x4a>
   d8e3c:	f89c 0000 	ldrb.w	r0, [ip]
   d8e40:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d8e44:	2858      	cmp	r0, #88	; 0x58
   d8e46:	d14d      	bne.n	d8ee4 <_strtol_l.isra.0+0xdc>
   d8e48:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d8e4c:	2310      	movs	r3, #16
   d8e4e:	f10c 0c02 	add.w	ip, ip, #2
   d8e52:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d8e56:	3f01      	subs	r7, #1
   d8e58:	2600      	movs	r6, #0
   d8e5a:	fbb7 f9f3 	udiv	r9, r7, r3
   d8e5e:	4630      	mov	r0, r6
   d8e60:	fb03 7a19 	mls	sl, r3, r9, r7
   d8e64:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d8e68:	2d09      	cmp	r5, #9
   d8e6a:	d818      	bhi.n	d8e9e <_strtol_l.isra.0+0x96>
   d8e6c:	462c      	mov	r4, r5
   d8e6e:	42a3      	cmp	r3, r4
   d8e70:	dd24      	ble.n	d8ebc <_strtol_l.isra.0+0xb4>
   d8e72:	1c75      	adds	r5, r6, #1
   d8e74:	d007      	beq.n	d8e86 <_strtol_l.isra.0+0x7e>
   d8e76:	4581      	cmp	r9, r0
   d8e78:	d31d      	bcc.n	d8eb6 <_strtol_l.isra.0+0xae>
   d8e7a:	d101      	bne.n	d8e80 <_strtol_l.isra.0+0x78>
   d8e7c:	45a2      	cmp	sl, r4
   d8e7e:	db1a      	blt.n	d8eb6 <_strtol_l.isra.0+0xae>
   d8e80:	fb00 4003 	mla	r0, r0, r3, r4
   d8e84:	2601      	movs	r6, #1
   d8e86:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d8e8a:	e7eb      	b.n	d8e64 <_strtol_l.isra.0+0x5c>
   d8e8c:	2c2b      	cmp	r4, #43	; 0x2b
   d8e8e:	bf08      	it	eq
   d8e90:	f89c 4000 	ldrbeq.w	r4, [ip]
   d8e94:	46a8      	mov	r8, r5
   d8e96:	bf08      	it	eq
   d8e98:	f100 0c02 	addeq.w	ip, r0, #2
   d8e9c:	e7c8      	b.n	d8e30 <_strtol_l.isra.0+0x28>
   d8e9e:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d8ea2:	2d19      	cmp	r5, #25
   d8ea4:	d801      	bhi.n	d8eaa <_strtol_l.isra.0+0xa2>
   d8ea6:	3c37      	subs	r4, #55	; 0x37
   d8ea8:	e7e1      	b.n	d8e6e <_strtol_l.isra.0+0x66>
   d8eaa:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d8eae:	2d19      	cmp	r5, #25
   d8eb0:	d804      	bhi.n	d8ebc <_strtol_l.isra.0+0xb4>
   d8eb2:	3c57      	subs	r4, #87	; 0x57
   d8eb4:	e7db      	b.n	d8e6e <_strtol_l.isra.0+0x66>
   d8eb6:	f04f 36ff 	mov.w	r6, #4294967295
   d8eba:	e7e4      	b.n	d8e86 <_strtol_l.isra.0+0x7e>
   d8ebc:	1c73      	adds	r3, r6, #1
   d8ebe:	d106      	bne.n	d8ece <_strtol_l.isra.0+0xc6>
   d8ec0:	2322      	movs	r3, #34	; 0x22
   d8ec2:	f8ce 3000 	str.w	r3, [lr]
   d8ec6:	4638      	mov	r0, r7
   d8ec8:	b942      	cbnz	r2, d8edc <_strtol_l.isra.0+0xd4>
   d8eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8ece:	f1b8 0f00 	cmp.w	r8, #0
   d8ed2:	d000      	beq.n	d8ed6 <_strtol_l.isra.0+0xce>
   d8ed4:	4240      	negs	r0, r0
   d8ed6:	2a00      	cmp	r2, #0
   d8ed8:	d0f7      	beq.n	d8eca <_strtol_l.isra.0+0xc2>
   d8eda:	b10e      	cbz	r6, d8ee0 <_strtol_l.isra.0+0xd8>
   d8edc:	f10c 31ff 	add.w	r1, ip, #4294967295
   d8ee0:	6011      	str	r1, [r2, #0]
   d8ee2:	e7f2      	b.n	d8eca <_strtol_l.isra.0+0xc2>
   d8ee4:	2430      	movs	r4, #48	; 0x30
   d8ee6:	2b00      	cmp	r3, #0
   d8ee8:	d1b3      	bne.n	d8e52 <_strtol_l.isra.0+0x4a>
   d8eea:	2308      	movs	r3, #8
   d8eec:	e7b1      	b.n	d8e52 <_strtol_l.isra.0+0x4a>
   d8eee:	2c30      	cmp	r4, #48	; 0x30
   d8ef0:	d0a4      	beq.n	d8e3c <_strtol_l.isra.0+0x34>
   d8ef2:	230a      	movs	r3, #10
   d8ef4:	e7ad      	b.n	d8e52 <_strtol_l.isra.0+0x4a>
   d8ef6:	bf00      	nop
   d8ef8:	000d989a 	.word	0x000d989a

000d8efc <strtol>:
   d8efc:	4613      	mov	r3, r2
   d8efe:	460a      	mov	r2, r1
   d8f00:	4601      	mov	r1, r0
   d8f02:	4802      	ldr	r0, [pc, #8]	; (d8f0c <strtol+0x10>)
   d8f04:	6800      	ldr	r0, [r0, #0]
   d8f06:	f7ff bf7f 	b.w	d8e08 <_strtol_l.isra.0>
   d8f0a:	bf00      	nop
   d8f0c:	2003e4b0 	.word	0x2003e4b0

000d8f10 <dynalib_user>:
   d8f10:	000d4021 000d405d 000d4085 000d4089     !@..]@...@...@..
   d8f20:	00000000 25006925 6900696c 756f006e     ....%i.%li.in.ou
   d8f30:	77700074 7764006d 00776100 50433057     t.pwm.dw.aw.W0CP
   d8f40:	74415763 6f415569 4f75714a 5f555070     cWAtiUAoJquOpPU_
   d8f50:	4b586b68 72734e76 51417833 72687400     hkXKvNsr3xAQ.thr
   d8f60:	31646165 72687400 32646165 72687400     ead1.thread2.thr
   d8f70:	33646165 76654400 20656369 20746f6e     ead3.Device not 
   d8f80:	6e756f66 50202e64 7361656c 68632065     found. Please ch
   d8f90:	206b6365 69726977 002e676e 25007776     eck wiring..vw.%
   d8fa0:	66372e32 00752500 756f7267 762f4270     2.7f.%u.groupB/v
   d8fb0:	61687369 6d65546c 72670070 4270756f     ishalTemp.groupB
   d8fc0:	7369762f 506c6168 00786f72 756f7267     /vishalProx.grou
   d8fd0:	762f4270 61687369 78754c6c 6f726700     pB/vishalLux.gro
   d8fe0:	2f427075 67697274 49726567 7265746e     upB/triggerInter
   d8ff0:	74707572 73695600 276c6168 4c422073     rupt.Vishal's BL
   d9000:	73692045 73696420 6e6e6f63 65746365     E is disconnecte
   d9010:	616c0064 68742e62 6c637765 6d6f632e     d.lab.thewcl.com
   d9020:	34453600 30303030 35422d31 462d3341     .6E400001-B5A3-F
   d9030:	2d333933 39413045 3035452d 44343245     393-E0A9-E50E24D
   d9040:	39414343 45360045 30303034 422d3230     CCA9E.6E400002-B
   d9050:	2d334135 33393346 4130452d 35452d39     5A3-F393-E0A9-E5
   d9060:	34324530 41434344 36004539 30303445     0E24DCCA9E.6E400
   d9070:	2d333030 33413542 3933462d 30452d33     003-B5A3-F393-E0
   d9080:	452d3941 32453035 43434434 00453941     A9-E50E24DCCA9E.

000d9090 <_ZZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEvE7profile>:
   d9090:	6b6e6c62 00666e69 00726576 2e302e31     blnkinf.ver.1.0.
   d90a0:	2d680030 74616562 00353400 66667562     0.h-beat.45.buff
   d90b0:	006e692d 34323031 76656400 72615000     -in.1024.dev.Par
   d90c0:	6c636974 75620065 00646c69 206c754a     ticle.build.Jul 
   d90d0:	32203531 20313230 313a3131 31353a37     15 2021 11:17:51
   d90e0:	00000000 54514d04 06000454 7349514d     .....MQTT...MQIs
   d90f0:	00037064                                dp..

000d90f4 <_ZL22BlynkReadHandlerVector>:
   d90f4:	000d5ae5 000d5ae5 000d5ae5 000d5ae5     .Z...Z...Z...Z..
   d9104:	000d5ae5 000d5ae5 000d5ae5 000d5ae5     .Z...Z...Z...Z..
   d9114:	000d5ae5 000d5ae5 000d5ae5 000d5ae5     .Z...Z...Z...Z..
   d9124:	000d5ae5 000d5ae5 000d5ae5 000d5ae5     .Z...Z...Z...Z..
   d9134:	000d5ae5 000d5ae5 000d5ae5 000d5ae5     .Z...Z...Z...Z..
   d9144:	000d5ae5 000d5ae5 000d5ae5 000d5ae5     .Z...Z...Z...Z..
   d9154:	000d5ae5 000d5ae5 000d5ae5 000d5ae5     .Z...Z...Z...Z..
   d9164:	000d5ae5 000d5ae5 000d5ae5 000d5ae5     .Z...Z...Z...Z..
   d9174:	000d5ae5 000d5ae5 000d5ae5 000d5ae5     .Z...Z...Z...Z..
   d9184:	000d5ae5 000d5ae5 000d5ae5 000d5ae5     .Z...Z...Z...Z..
   d9194:	000d5ae5 000d5ae5 000d5ae5 000d5ae5     .Z...Z...Z...Z..
   d91a4:	000d5ae5 000d5ae5 000d5ae5 000d5ae5     .Z...Z...Z...Z..
   d91b4:	000d5ae5 000d5ae5 000d5ae5 000d5ae5     .Z...Z...Z...Z..
   d91c4:	000d5ae5 000d5ae5 000d5ae5 000d5ae5     .Z...Z...Z...Z..
   d91d4:	000d5ae5 000d5ae5 000d5ae5 000d5ae5     .Z...Z...Z...Z..
   d91e4:	000d5ae5 000d5ae5 000d5ae5 000d5ae5     .Z...Z...Z...Z..
   d91f4:	000d5ae5 000d5ae5 000d5ae5 000d5ae5     .Z...Z...Z...Z..
   d9204:	000d5ae5 000d5ae5 000d5ae5 000d5ae5     .Z...Z...Z...Z..
   d9214:	000d5ae5 000d5ae5 000d5ae5 000d5ae5     .Z...Z...Z...Z..
   d9224:	000d5ae5 000d5ae5 000d5ae5 000d5ae5     .Z...Z...Z...Z..
   d9234:	000d5ae5 000d5ae5 000d5ae5 000d5ae5     .Z...Z...Z...Z..
   d9244:	000d5ae5 000d5ae5 000d5ae5 000d5ae5     .Z...Z...Z...Z..
   d9254:	000d5ae5 000d5ae5 000d5ae5 000d5ae5     .Z...Z...Z...Z..
   d9264:	000d5ae5 000d5ae5 000d5ae5 000d5ae5     .Z...Z...Z...Z..
   d9274:	000d5ae5 000d5ae5 000d5ae5 000d5ae5     .Z...Z...Z...Z..
   d9284:	000d5ae5 000d5ae5 000d5ae5 000d5ae5     .Z...Z...Z...Z..
   d9294:	000d5ae5 000d5ae5 000d5ae5 000d5ae5     .Z...Z...Z...Z..
   d92a4:	000d5ae5 000d5ae5 000d5ae5 000d5ae5     .Z...Z...Z...Z..
   d92b4:	000d5ae5 000d5ae5 000d5ae5 000d5ae5     .Z...Z...Z...Z..
   d92c4:	000d5ae5 000d5ae5 000d5ae5 000d5ae5     .Z...Z...Z...Z..
   d92d4:	000d5ae5 000d5ae5 000d5ae5 000d5ae5     .Z...Z...Z...Z..
   d92e4:	000d5ae5 000d5ae5 000d5ae5 000d5ae5     .Z...Z...Z...Z..

000d92f4 <_ZL23BlynkWriteHandlerVector>:
   d92f4:	000d5ae7 000d5ae7 000d5ae7 000d5ae7     .Z...Z...Z...Z..
   d9304:	000d5ae7 000d5ae7 000d5ae7 000d5ae7     .Z...Z...Z...Z..
   d9314:	000d5ae7 000d5ae7 000d5ae7 000d5ae7     .Z...Z...Z...Z..
   d9324:	000d5ae7 000d5ae7 000d5ae7 000d5ae7     .Z...Z...Z...Z..
   d9334:	000d5ae7 000d5ae7 000d5ae7 000d5ae7     .Z...Z...Z...Z..
   d9344:	000d5ae7 000d5ae7 000d5ae7 000d5ae7     .Z...Z...Z...Z..
   d9354:	000d5ae7 000d5ae7 000d5ae7 000d5ae7     .Z...Z...Z...Z..
   d9364:	000d5ae7 000d5ae7 000d5ae7 000d5ae7     .Z...Z...Z...Z..
   d9374:	000d5ae7 000d5ae7 000d5ae7 000d5ae7     .Z...Z...Z...Z..
   d9384:	000d5ae7 000d5ae7 000d5ae7 000d5ae7     .Z...Z...Z...Z..
   d9394:	000d5ae7 000d5ae7 000d5ae7 000d5ae7     .Z...Z...Z...Z..
   d93a4:	000d5ae7 000d5ae7 000d5ae7 000d5ae7     .Z...Z...Z...Z..
   d93b4:	000d5ae7 000d5ae7 000d5ae7 000d5ae7     .Z...Z...Z...Z..
   d93c4:	000d5ae7 000d5ae7 000d5ae7 000d5ae7     .Z...Z...Z...Z..
   d93d4:	000d5ae7 000d5ae7 000d5ae7 000d5ae7     .Z...Z...Z...Z..
   d93e4:	000d5ae7 000d5ae7 000d5ae7 000d5ae7     .Z...Z...Z...Z..
   d93f4:	000d5ae7 000d5ae7 000d5ae7 000d5ae7     .Z...Z...Z...Z..
   d9404:	000d5ae7 000d5ae7 000d5ae7 000d5ae7     .Z...Z...Z...Z..
   d9414:	000d5ae7 000d5ae7 000d5ae7 000d5ae7     .Z...Z...Z...Z..
   d9424:	000d5ae7 000d5ae7 000d5ae7 000d5ae7     .Z...Z...Z...Z..
   d9434:	000d5ae7 000d5ae7 000d5ae7 000d5ae7     .Z...Z...Z...Z..
   d9444:	000d5ae7 000d5ae7 000d5ae7 000d5ae7     .Z...Z...Z...Z..
   d9454:	000d5ae7 000d5ae7 000d5ae7 000d5ae7     .Z...Z...Z...Z..
   d9464:	000d5ae7 000d5ae7 000d5ae7 000d5ae7     .Z...Z...Z...Z..
   d9474:	000d5ae7 000d5ae7 000d5ae7 000d5ae7     .Z...Z...Z...Z..
   d9484:	000d5ae7 000d5ae7 000d5ae7 000d5ae7     .Z...Z...Z...Z..
   d9494:	000d5ae7 000d5ae7 000d5ae7 000d5ae7     .Z...Z...Z...Z..
   d94a4:	000d5ae7 000d5ae7 000d5ae7 000d5ae7     .Z...Z...Z...Z..
   d94b4:	000d5ae7 000d5ae7 000d5ae7 000d5ae7     .Z...Z...Z...Z..
   d94c4:	000d5ae7 000d5ae7 000d5ae7 000d5ae7     .Z...Z...Z...Z..
   d94d4:	000d5ae7 000d5ae7 000d5ae7 000d5ae7     .Z...Z...Z...Z..
   d94e4:	000d5ae7 000d5ae7 000d5ae7 000d5ae7     .Z...Z...Z...Z..

000d94f4 <_ZTVN5spark13EthernetClassE>:
	...
   d94fc:	000d6163 000d6159 000d614f 000d6145     ca..Ya..Oa..Ea..
   d950c:	000d6139 000d612d 000d7b3d 000d7b45     9a..-a..={..E{..
   d951c:	000d6121 000d6119 000d610f 000d6105     !a...a...a...a..
   d952c:	000d7b75 69726977 622e676e 5300656c     u{..wiring.ble.S
   d953c:	74726174 73696420 65766f63 676e6972     tart discovering
   d954c:	72657320 65636976 46002e73 656c6961      services..Faile
   d955c:	6f742064 70706120 20646e65 72656570     d to append peer
   d956c:	6e654320 6c617274 76656420 2e656369      Central device.
   d957c:	6e6f4300 7463656e 62206465 65432079     .Connected by Ce
   d958c:	6172746e 6564206c 65636976 6944002e     ntral device..Di
   d959c:	6e6f6373 7463656e 62206465 65722079     sconnected by re
   d95ac:	65746f6d 76656420 2e656369 00000000     mote device.....

000d95bc <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d95c4:	000d647d 000d64a1 000d6a9f 000d64af     }d...d...j...d..
   d95d4:	000d6481                                .d..

000d95d8 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   d95e0:	5f9b34fb 80000080 00001000 00000000     .4._............
   d95f0:	00707061 252d5925 64252d6d 3a482554     app.%Y-%m-%dT%H:
   d9600:	253a4d25 007a2553 74637361 00656d69     %M:%S%z.asctime.

000d9610 <_ZTV9IPAddress>:
	...
   d9618:	000d70a9 000d7099 000d709b              .p...p...p..

000d9624 <_ZTV9USBSerial>:
	...
   d962c:	000d71cd 000d7235 000d720b 000d6e09     .q..5r...r...n..
   d963c:	000d71fd 000d71cf 000d71df 000d722f     .q...q...q../r..
   d964c:	000d71ef 000d71c9                       .q...q..

000d9654 <_ZTV11USARTSerial>:
	...
   d965c:	000d72d9 000d7345 000d731d 000d6e09     .r..Es...s...n..
   d966c:	000d72ed 000d7309 000d72fb 000d7317     .r...s...r...s..
   d967c:	000d72db 000d72df                       .r...r..

000d9684 <_ZTV7TwoWire>:
	...
   d968c:	000d73d5 000d741f 000d73f7 000d73d7     .s...t...s...s..
   d969c:	000d73ff 000d7407 000d740f 000d7417     .s...t...t...t..
   d96ac:	69726977 7200676e 20766365 6f727265     wiring.recv erro
   d96bc:	203d2072 00006425                       r = %d..

000d96c4 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d96cc:	000d754d 000d7571 000d798b 000d757f     Mu..qu...y...u..
   d96dc:	000d7551                                Qu..

000d96e0 <_ZTV9TCPClient>:
	...
   d96e8:	000d75fd 000d7631 000d74cb 000d74e5     .u..1v...t...t..
   d96f8:	000d7821 000d7693 000d7665 000d750f     !x...v..ev...u..
   d9708:	000d772b 000d7991 000d76c7 000d78d5     +w...y...v...x..
   d9718:	000d7511 000d7543 000d74f7 000d7583     .u..Cu...t...u..
   d9728:	000d7645                                Ev..

000d972c <_ZTVN5spark9WiFiClassE>:
	...
   d9734:	000d7adf 000d7ad5 000d7acb 000d7a8d     .z...z...z...z..
   d9744:	000d6f13 000d7abf 000d7b3d 000d7b45     .o...z..={..E{..
   d9754:	000d7ab3 000d7aab 000d7aa1 000d7a97     .z...z...z...z..
   d9764:	000d7b75                                u{..

000d9768 <_ZTVN5spark12NetworkClassE>:
	...
   d9770:	000d7afd 000d7b07 000d7b11 000d7b1b     .z...{...{...{..
   d9780:	000d7b25 000d7b31 000d7b3d 000d7b45     %{..1{..={..E{..
   d9790:	000d7b4d 000d7b59 000d7b61 000d7b6b     M{..Y{..a{..k{..
   d97a0:	000d7b75                                u{..

000d97a4 <_ZSt7nothrow>:
	...

000d97a5 <_ZTSSt19_Sp_make_shared_tag>:
   d97a5:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   d97b5:	5f646572 00676174                        red_tag....

000d97c0 <_ZTISt19_Sp_make_shared_tag>:
   d97c0:	000d9800 000d97a5                       ........

000d97c8 <_ZTIN10__cxxabiv117__class_type_infoE>:
   d97c8:	000d9860 000d97d4 000d9884              `...........

000d97d4 <_ZTSN10__cxxabiv117__class_type_infoE>:
   d97d4:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   d97e4:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   d97f4:	00000045                                E...

000d97f8 <_ZTVN10__cxxabiv117__class_type_infoE>:
   d97f8:	00000000 000d97c8 000d7ebd 000d7ed1     .........~...~..
   d9808:	000d8065 000d8065 000d7f3b 000d7e7d     e...e...;...}~..
   d9818:	000d7f23 000d7ee5 000d7eb1              #....~...~..

000d9824 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   d9824:	000d9860 000d9830 000d97c8              `...0.......

000d9830 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   d9830:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   d9840:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   d9850:	456f666e 00000000                       nfoE....

000d9858 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   d9858:	00000000 000d9824 000d7f65 000d7f79     ....$...e...y...
   d9868:	000d8065 000d8065 000d7f3b 000d7e7d     e...e...;...}~..
   d9878:	000d8039 000d7fc5 000d7f8d              9...........

000d9884 <_ZTISt9type_info>:
   d9884:	000d9800 000d988c                       ........

000d988c <_ZTSSt9type_info>:
   d988c:	74397453 5f657079 6f666e69               St9type_info.

000d9899 <_ctype_>:
   d9899:	20202000 20202020 28282020 20282828     .         ((((( 
   d98a9:	20202020 20202020 20202020 20202020                     
   d98b9:	10108820 10101010 10101010 10101010      ...............
   d98c9:	04040410 04040404 10040404 10101010     ................
   d98d9:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d98e9:	01010101 01010101 01010101 10101010     ................
   d98f9:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d9909:	02020202 02020202 02020202 10101010     ................
   d9919:	00000020 00000000 00000000 00000000      ...............
	...

000d999a <link_const_variable_data_end>:
	...

000d999c <link_constructors_location>:
   d999c:	000d4e45 	.word	0x000d4e45
   d99a0:	000d616d 	.word	0x000d616d
   d99a4:	000d61b5 	.word	0x000d61b5
   d99a8:	000d6de1 	.word	0x000d6de1
   d99ac:	000d6f21 	.word	0x000d6f21
   d99b0:	000d6f31 	.word	0x000d6f31
   d99b4:	000d6f59 	.word	0x000d6f59
   d99b8:	000d7ae9 	.word	0x000d7ae9
   d99bc:	000d7c55 	.word	0x000d7c55
